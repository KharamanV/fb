-- --------------------------------------------------------
-- Хост:                         127.0.0.1
-- Версия сервера:               5.7.13 - MySQL Community Server (GPL)
-- ОС Сервера:                   Win32
-- HeidiSQL Версия:              9.3.0.4984
-- --------------------------------------------------------

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET NAMES utf8mb4 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;

-- Дамп структуры для таблица fb.bans
CREATE TABLE IF NOT EXISTS `bans` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `user_id` int(10) unsigned NOT NULL,
  `blocked_until` timestamp NULL DEFAULT NULL,
  `reason` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `bans_user_id_index` (`user_id`),
  CONSTRAINT `bans_user_id_foreign` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- Дамп данных таблицы fb.bans: ~0 rows (приблизительно)
/*!40000 ALTER TABLE `bans` DISABLE KEYS */;
/*!40000 ALTER TABLE `bans` ENABLE KEYS */;


-- Дамп структуры для таблица fb.categories
CREATE TABLE IF NOT EXISTS `categories` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `description` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  `slug` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `color` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=10 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- Дамп данных таблицы fb.categories: ~7 rows (приблизительно)
/*!40000 ALTER TABLE `categories` DISABLE KEYS */;
INSERT INTO `categories` (`id`, `name`, `description`, `created_at`, `updated_at`, `slug`, `color`) VALUES
	(3, 'html & css', 'html & css', '2016-10-08 19:05:07', '2016-10-08 19:05:07', 'html-css', 'rgb(244, 67, 54)'),
	(4, 'javascript', 'javascript', '2016-10-08 19:05:33', '2016-10-08 19:05:33', 'javascript', '#f6b33c'),
	(5, 'php', 'php\r\n', '2016-10-08 19:05:58', '2016-10-08 19:05:58', 'php', '#669'),
	(6, 'database', 'db', '2016-10-08 19:06:11', '2016-10-08 19:06:11', 'database', 'rgb(76, 96, 246)'),
	(7, 'design & ux', 'design & ux', '2016-10-08 19:06:29', '2016-10-08 19:06:29', 'design-ux', 'rgb(170, 53, 214)'),
	(8, 'tools', 'tools', '2016-10-08 19:06:40', '2016-10-08 19:06:40', 'tools', '#32B47B'),
	(9, 'vcs', 'vcs', '2016-10-08 19:06:46', '2016-10-08 19:06:46', 'vcs', 'rgb(51, 163, 241)');
/*!40000 ALTER TABLE `categories` ENABLE KEYS */;


-- Дамп структуры для таблица fb.comments
CREATE TABLE IF NOT EXISTS `comments` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `user_id` int(10) unsigned NOT NULL,
  `post_id` int(10) unsigned NOT NULL,
  `text` text COLLATE utf8_unicode_ci NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  `rating` int(11) NOT NULL DEFAULT '0',
  PRIMARY KEY (`id`),
  KEY `comments_user_id_foreign` (`user_id`),
  KEY `comments_post_id_foreign` (`post_id`),
  CONSTRAINT `comments_post_id_foreign` FOREIGN KEY (`post_id`) REFERENCES `posts` (`id`) ON DELETE CASCADE,
  CONSTRAINT `comments_user_id_foreign` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=16 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- Дамп данных таблицы fb.comments: ~6 rows (приблизительно)
/*!40000 ALTER TABLE `comments` DISABLE KEYS */;
INSERT INTO `comments` (`id`, `user_id`, `post_id`, `text`, `created_at`, `updated_at`, `rating`) VALUES
	(1, 2, 28, 'KLASS!', '2016-10-01 11:25:00', '2016-10-23 16:19:07', 0),
	(8, 2, 29, 'Ох уж эта верстка писем..', '2016-10-20 05:55:49', '2016-10-23 16:21:14', 2),
	(11, 8, 29, 'Спасибо большое!', '2016-10-23 16:11:38', '2016-10-23 16:27:52', 1),
	(12, 8, 28, 'С некоторыми вещами не соглашусь', '2016-10-23 16:19:24', '2016-10-23 16:19:24', 0),
	(14, 2, 27, 'Телепатил когда это еще не было мейнстримом :D', '2016-10-23 16:32:15', '2016-10-23 16:37:14', 0),
	(15, 2, 17, 'not bad', '2016-10-23 16:37:50', '2016-10-23 16:37:50', 0);
/*!40000 ALTER TABLE `comments` ENABLE KEYS */;


-- Дамп структуры для таблица fb.comments_rates
CREATE TABLE IF NOT EXISTS `comments_rates` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `comment_id` int(10) unsigned NOT NULL,
  `user_id` int(10) unsigned NOT NULL,
  `value` tinyint(4) NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `comments_rates_comment_id_foreign` (`comment_id`),
  KEY `comments_rates_user_id_foreign` (`user_id`),
  CONSTRAINT `comments_rates_comment_id_foreign` FOREIGN KEY (`comment_id`) REFERENCES `comments` (`id`) ON DELETE CASCADE,
  CONSTRAINT `comments_rates_user_id_foreign` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- Дамп данных таблицы fb.comments_rates: ~5 rows (приблизительно)
/*!40000 ALTER TABLE `comments_rates` DISABLE KEYS */;
INSERT INTO `comments_rates` (`id`, `comment_id`, `user_id`, `value`, `created_at`, `updated_at`) VALUES
	(1, 1, 5, 1, '2016-10-03 18:53:32', '2016-10-03 18:53:32'),
	(2, 8, 5, 1, '2016-10-23 11:48:38', '2016-10-23 11:48:38'),
	(3, 8, 8, 1, '2016-10-23 15:47:27', '2016-10-23 15:47:27'),
	(4, 1, 8, -1, '2016-10-23 16:19:07', '2016-10-23 16:19:07'),
	(7, 11, 2, -1, '2016-10-23 16:27:52', '2016-10-23 16:27:52');
/*!40000 ALTER TABLE `comments_rates` ENABLE KEYS */;


-- Дамп структуры для таблица fb.email_resets
CREATE TABLE IF NOT EXISTS `email_resets` (
  `user_id` int(10) unsigned NOT NULL,
  `new_email` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `token` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `created_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  KEY `email_resets_user_id_index` (`user_id`),
  KEY `email_resets_token_index` (`token`),
  CONSTRAINT `email_resets_user_id_foreign` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- Дамп данных таблицы fb.email_resets: ~0 rows (приблизительно)
/*!40000 ALTER TABLE `email_resets` DISABLE KEYS */;
/*!40000 ALTER TABLE `email_resets` ENABLE KEYS */;


-- Дамп структуры для таблица fb.migrations
CREATE TABLE IF NOT EXISTS `migrations` (
  `migration` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `batch` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- Дамп данных таблицы fb.migrations: ~25 rows (приблизительно)
/*!40000 ALTER TABLE `migrations` DISABLE KEYS */;
INSERT INTO `migrations` (`migration`, `batch`) VALUES
	('2014_10_12_000000_create_users_table', 1),
	('2014_10_12_100000_create_password_resets_table', 1),
	('2016_08_22_191709_create_posts_table', 1),
	('2016_09_05_082735_add_roles_to_users_table', 2),
	('2016_09_05_092523_create_roles_table', 2),
	('2016_09_06_142053_change_role_id_column_type_in_users_table', 3),
	('2016_09_09_092512_create_user_activations_table', 4),
	('2016_09_09_093152_add_is_active_column_to_users_table', 4),
	('2016_09_12_130940_add_columns_to_users_table', 5),
	('2016_09_14_144841_change_columns_role_id_and_is_active_in_users_table', 5),
	('2016_09_16_134051_change_slug_column_in_posts_table', 5),
	('2016_09_17_075211_change_img_path_column_in_posts_table', 6),
	('2016_09_18_150959_create_categories_table', 7),
	('2016_09_18_153452_create_category_id_to_posts_table', 7),
	('2016_09_19_131245_create_tags_table', 8),
	('2016_09_19_133125_create_post_tag_table', 8),
	('2016_09_21_111212_add_slug_column_to_categories_table', 8),
	('2016_09_22_142623_create_comments_table', 8),
	('2016_09_28_090321_add_rating_column_to_posts_table', 9),
	('2016_09_28_090356_add_rating_column_to_comments_table', 9),
	('2016_09_29_114036_create_comments_rates_table', 9),
	('2016_09_30_102513_create_posts_rates_table', 9),
	('2016_10_01_192550_create_email_resets_table', 10),
	('2016_10_03_091553_add_avatar_column_to_users_table', 11),
	('2016_10_03_115359_create_tag_user_table', 11),
	('2016_10_03_154214_create_bans_table', 11),
	('2016_10_03_182858_add_ban_counter_to_users_table', 11),
	('2016_10_04_113341_add_ban_id_column_to_users_table', 12),
	('2016_10_07_120449_add_category_id_column_to_tags_table', 13),
	('2016_10_08_191336_add_color_column_to_categories_table', 14),
	('2016_10_10_095632_add_foreign_key_category_id_to_posts_table', 15),
	('2016_10_12_154336_add_deleted_at_column_to_posts_table', 16),
	('2016_10_20_204252_add_foreign_key_to_user_activations_table', 17);
/*!40000 ALTER TABLE `migrations` ENABLE KEYS */;


-- Дамп структуры для таблица fb.password_resets
CREATE TABLE IF NOT EXISTS `password_resets` (
  `email` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `token` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `created_at` timestamp NOT NULL,
  KEY `password_resets_email_index` (`email`),
  KEY `password_resets_token_index` (`token`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- Дамп данных таблицы fb.password_resets: ~1 rows (приблизительно)
/*!40000 ALTER TABLE `password_resets` DISABLE KEYS */;
INSERT INTO `password_resets` (`email`, `token`, `created_at`) VALUES
	('awdawdawda@AWD.AWDA', 'e5f67964f72eee9693d523b6660e0d24a5d621c6958b79449d702f62c9be56b2', '2016-10-11 22:22:51');
/*!40000 ALTER TABLE `password_resets` ENABLE KEYS */;


-- Дамп структуры для таблица fb.posts
CREATE TABLE IF NOT EXISTS `posts` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `title` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `short` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `img` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `slug` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `text` text COLLATE utf8_unicode_ci,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  `category_id` int(10) unsigned DEFAULT NULL,
  `rating` int(11) NOT NULL DEFAULT '0',
  `deleted_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `posts_slug_unique` (`slug`),
  KEY `FK_posts_categories` (`category_id`),
  CONSTRAINT `FK_posts_categories` FOREIGN KEY (`category_id`) REFERENCES `categories` (`id`) ON DELETE SET NULL ON UPDATE NO ACTION
) ENGINE=InnoDB AUTO_INCREMENT=30 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- Дамп данных таблицы fb.posts: ~17 rows (приблизительно)
/*!40000 ALTER TABLE `posts` DISABLE KEYS */;
INSERT INTO `posts` (`id`, `title`, `short`, `img`, `slug`, `text`, `created_at`, `updated_at`, `category_id`, `rating`, `deleted_at`) VALUES
	(1, 'Опыт построения и эксплуатации большого файлового хранилища', 'Опыт построения и эксплуатации большого файлового хранилища', '9559b6b2659b9705c97048e96cc0340f.jpg', 'opit-postroeniya-i-ekspluatatsii-bolishogo-failovogo-hranilischa', '<h2 style="font-family: Verdana, sans-serif; font-size: 21px; margin: 0px; font-weight: 400; padding: 0px; background-color: #ffffff;">Даниил Подольский (Git in Sky)</h2>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Рассказ о том, что каждый инженер должен сделать в своей жизни после того, как он родил ребенка, посадил дерево и построил дом &ndash; это сделать свое файловое хранилище.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Доклад мой называется &laquo;Опыт построения и эксплуатации большого файлового хранилища&raquo;. Большое файловое хранилище мы строим и эксплуатируем последние три года. В тот момент, когда я подавал тезисы, доклад назывался &laquo;Ночью через лес. Опыт построения эксплуатации бла-бла-бла&raquo;. Но программный комитет попросил меня быть серьезнее, тем не менее, на самом деле это доклад &laquo;Ночью через лес&raquo;.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><a style="background-color: #ffffff; color: #6da3bd; font-family: Verdana, sans-serif; font-size: 14px;" name="habracut"></a><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><img style="border-style: none; max-width: 100%; vertical-align: middle; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" src="https://habrastorage.org/getpro/habr/post_images/b1b/ff8/134/b1bff81346eed49749795de91a8098f9.png" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Этот образ придумал коллега Чистяков для конференции &laquo;Стачка&raquo;, и там мы делали доклад &laquo;Ночью через лес&raquo; про докера, а я &ndash; про новые SQL-базы.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">С тех пор, как я хожу на конференции, мне стало понятно, что слышать я хочу не истории успеха, а истории ужаса и кошмара, который нас всех ждет на пути к успеху. Потому что успех чужой мне ничего не даст. Конечно, если кто-то уже что-то сделал, само знание о том, что это возможно сделать, помогает мне двигаться, но в реальности я бы хотел знать, где там мины и ловушки.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Еще один кайфовый образ &ndash; книга &laquo;Пикник на обочине&raquo;. Там есть научно-исследовательский институт, который исследует эту зону. У них есть летающие боты, у них есть автоматические маркеры, у них есть то и это, у них есть роботизированные системы, а есть сталкеры, которые бродят по этой зоне просто так, раскидывая гайки туда-сюда. Так вот, так уж получилось, что мы работаем в том сегменте, где востребованы сталкеры, а не научно-исследовательский институт. Мы работаем в том сегменте, где highload наиболее важен. Мы работаем в сегменте нищебродов. Highload &ndash; это, вообще-то, для нищебродов, потому что взрослые парни просто не допускают, чтобы нагрузка на сервера у них превышала 30%. Если вы решили, что ваш flow watermark 70%, во-первых, у вас начался highload, во-вторых, вы нищеброд.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><img style="border-style: none; max-width: 100%; vertical-align: middle; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" src="https://habrastorage.org/getpro/habr/post_images/e97/100/4a0/e971004a058bf1c2da8d0e2b125c89b6.png" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Итак. Для начала, что такое файловое хранилище и зачем оно, вообще, может оказаться в нашей жизни?</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /></p>\r\n<div class="oembed" style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">\r\n<div style="left: 0px; width: 780px; height: 0px; position: relative; padding-bottom: 438.734px;"><iframe style="top: 0px; left: 0px; width: 780px; height: 438.734px; position: absolute;" src="https://player.vimeo.com/video/151815642?byline=0&amp;badge=0" frameborder="0" allowfullscreen="true"></iframe></div>\r\n</div>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Файл &ndash; это кусок информации (это его официальное определение), снабженный именем, по которому этот кусок информации можно извлечь. Но это же не единственный на свете кусок информации, который снабжен именем, почему же файл отличается от всех прочих? Потому что файл слишком большой, чтобы обращаться с ним как с одним куском. Смотрите: если вы хотите поддерживать, например, 100 тыс. одновременных соединений (это не так уж много) и отдаете вы файлы размером в 1 Мб. Это означает, что если вы хотите обращаться с файлом как с одним куском информации, вы вынуждены загрузить все 100 тыс. файлов по 1 Мб в память, это 100 Гб памяти. Невозможно. Соответственно, вам придется что-то сделать. Или ограничить количество одновременных соединений (для корпоративных применений это нормально), или обращаться с файлом так, как будто он состоит из кусочков информации, из отдельных мелких кусочков, из чанков. Слово чанк будет употребляться в докладе дальше.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Краеугольный камень&nbsp;</span><s style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">здорового питания&nbsp;</s><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">. Было зачеркнуто. Файл &ndash; это краеугольный камень сегодняшнего обмена информации, все об этом знают. Мы все, что можно, оформляем как файл просто по привычке. Потому что до недавнего времени у нас не было никаких средств хранить информацию иначе как файлах на диске. Об этом тоже будет позже &ndash; почему этот подход сегодня плохо срабатывает и лучше бы от него отказаться, но пока не удается.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Файловое хранилище &ndash; это место, где файлы хранятся. На самом деле, может быть, даже более важно, что файлы там хранятся &ndash; это то место, откуда к файлам предоставляется доступ, откуда они отдаются.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><img style="border-style: none; max-width: 100%; vertical-align: middle; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" src="https://habrastorage.org/getpro/habr/post_images/20d/5fb/571/20d5fb5710ce13394a1aa43034becf80.png" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Что такое файловое хранилище, мы поняли. Что такое большое файловое хранилище? Эксплуатируя большое файловое хранилище, я обнаружил, что это не характеристика самого хранилища. Например, у Васи Пупкина есть архив подросткового кино на 5 ПБ. Это большое файловое хранилище? Нет, потому что оно никому не нужно, потому что Вася Пупкин не может смотреть все 5 ПБ одновременно. Он смотрит один маленький фильм. Там есть еще несколько характеристик у этого пупкинского хранилища, например, если он его потеряет, он расплачется и скачает все заново из Интернета.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Много файлов. Можно предположить, что если много байт &ndash; это не большое, тогда много файлов &ndash; это большое? Нет. Есть хранилища, в которых очень много записей. У нас есть базы, в которых миллиард строк и, тем не менее, они не являются большими. Почему? Потому что если у вас есть миллиард строк в базе, у вас есть удобные и надежные средства управления этими строками. Для файлов такого средства нет. Все наши активно используемые сегодня файловые системы &ndash; иерархические. Это значит, что для того, чтобы выяснить, что происходит у нас на файловой системе, нам надо пройтись по ней, все имеющиеся каталоги открыть, их почитать. Иногда у нас нет, даже обычно у нас нет индексов на каталоге, поэтому мы вынуждены прочитать его от начала до конца, найти нужный файл &ndash; все это себе прекрасно представляют.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Так вот, большое &ndash; это описание ситуации, в которой вы оказались со своим файловым хранилищем, а не самого хранилища. Очень часто, и это мой любимый фокус, можно превратить большое файловое хранилище в нормальное, просто перенеся его на SSD. Там значительно больше IOPS&rsquo;ов и стандартные средства управления информацией, которые используются на файловых системах, начинают работать достаточно быстро, чтобы управление таким файловым хранилищем не представляло собой проблему.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><img style="border-style: none; max-width: 100%; vertical-align: middle; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" src="https://habrastorage.org/getpro/habr/post_images/6d4/f73/b4d/6d4f73b4d67756bbd30fec5e2d4fba77.png" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Парадокс файлового хранилища. С точки зрения бизнеса эти файловые хранилища не зачем не нужны. Когда у вас есть довольно большой проект, который принимает от пользователей файлы, отдает пользователям файлы, показывает пользователям рекламу &ndash; все, в общем, понятно. А почему примерно половина бюджета проекта составляют какие-то железки невнятные, на которых лежат какие-то невнятные байты? Бизнес, в принципе, понимает, зачем это, но на самом деле файловые хранилища не нужны. В бизнес-требованиях никогда не будет написано &laquo;хранить файлы&raquo;. В бизнес-требованиях будет написано &laquo;отдавать файлы&raquo;. Существует ТЗ, в котором будет написано &laquo;хранить файлы&raquo; &ndash; это ТЗ на систему резервного копирования. Но это тоже вранье. Когда мы хотим систему резервного копирования, мы не хотим систему резервного копирования, мы хотим систему аварийного восстановления. Т.е. мы опять хотим файлы читать, а не хранить.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">К сожалению, создатели файловых хранилищ этого не понимают. Может быть, только создатели S3 додумались до этой простой вещи. Всех остальных интересует, чтобы файлы были сложены, чтобы они ни в коем случае не разрушились, и если опасность разрушения возникает, то надо прекратить всякую деятельность, ни в коем случае не отдавать файл, который может быть побит, и ни в коем случае не загружать новые файлы, если у нас есть опасность разрушения имеющейся информации.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Это традиционный подход, но, тем не менее, к тому, чем мы занимаемся, он отношения не имеет. Файловое хранилище &ndash; вещь необходимая, никак без нее не обойдешься, она и нужна, и нет. А без нее никак, потому что файлики должны где-то быть, чтобы ты мог их отдавать.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><img style="border-style: none; max-width: 100%; vertical-align: middle; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" src="https://habrastorage.org/getpro/habr/post_images/664/a02/383/664a02383694b9170aab3ed46b9125f9.png" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Основной источник опыта общения с файловыми хранилищами в моей жизни &ndash; это проект Setup.Ru. Setup.Ru &ndash; это массовый хостинг с некоторыми фишечками, там сайты генерятся по шаблону. Есть шаблон, пользователь его заполняет, нажимает &laquo;сгенерировать&raquo;, генерируется от 20 до 200 файлов, они все складываются в хранилище. Пользователи загружают картинки, разнообразные другие бинарные файлы. В общем, это неограниченный источник этого всего. На данный момент в хранилище Setup лежат 450 млн. файлов, поделенных на 1,5 млн. сайтов. Это довольно много. Как мы дошли до жизни такой &ndash; это основное содержание моего доклада. Как мы двигались к тому, что у нас там есть сейчас. 20 млн. файлов в сутки &ndash; это объем обновления Setup сегодня в пике. Само по себе, 20 млн. &ndash; это уже много. В первый раз мы столкнулись с проблемами, когда у нас было 6,5 млн. файлов, но тем не менее.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><img style="border-style: none; max-width: 100%; vertical-align: middle; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" src="https://habrastorage.org/getpro/habr/post_images/938/544/2f7/9385442f73a37b358917dac8e9a9eb70.png" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">В 2012 году файловое хранилище Setup было организовано очень просто. Генераторы контента публиковали на два сервера с целью обеспечения отказоустойчивости. Синхронизация &ndash; если у нас один из этих серверов умирал, мы брали другой такой же, копировали rsynk&rsquo;ом с одного на другой всю эту массу файлов, и все у нас было хорошо. Для горячего контента у нас использовался SSD, тогда еще Hetzner. Это все в Hetzner, извините. Это к вопросу о том, что мы именно сталкеры. Т.е. Hetzner &ndash; это такое смешное место, такая зона, мы оттуда выносим время от времени ведьмин студень, продаем его на черном рыке и с этого живем.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">В чем мы увидели проблему, когда с этой схемой познакомились в 2012 году? В тот момент, когда у нас один из дублирующих серверов помер, мы некоторое время подряд живем без файловера, соответственно, пока идет rsynk, мы вынуждены молиться и трястись от страха. Со статистикой по файловой системе тоже проблемы. Если по SSD все еще это удавалось собирать, по 60 Гб (64 Гб тогда были SSD в Hetzner и никаких других), то по HDD мы очень быстро к весне 2012-го поняли, что мы не знаем, что у нас лежит на дисках, и никогда не узнаем. Правда тогда мы еще не думали, что это станет проблемой.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><img style="border-style: none; max-width: 100%; vertical-align: middle; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" src="https://habrastorage.org/getpro/habr/post_images/5dd/f6f/350/5ddf6f35024c8f9ac5e1376f47c63b63.png" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Летом 2012 года у нас сдох очередной сервер. Мы привычным движением заказали новый, запустили rsynk, и он никогда не закончился. Вернее, никогда не закончился скрипт, который запускал rsynk в цикле, пока не обнаруживал, что все файлы скопированы. Оказалось, что файлов уже достаточно много, что обход дерева занимает шесть часов, что копируются файлы плюс к этим шести часам, еще 12. И за 18 часов контент успевает измениться настолько, что реплика наша неактуальна. &laquo;Ночью через лес&raquo;, т.е. никто не ожидал, что эта палка угодит нам в глаз. Так вот. Сейчас-то это очевидно, а тогда мы были очень удивлены, типа: как же так?</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Тогда же ваш покорный слуга придумал сложить файлы в базу. Почему он это придумал, откуда вообще взялась эта идиотская идея? Потому что все-таки мы собрали какую-то статистику. 95% файлов были меньше 64 Кб. 64 Кб &ndash; это даже при 100 тыс. одновременных соединений &ndash; вполне подъемный размер, чтобы обращаться с этим как с одним куском. Остальные файлы были спрятаны в базу, большие файлы были спрятаны в BLOB&rsquo;ы. Позже я буду говорить о том, что это самая главная ошибка этого решения. Буду говорить, почему.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Это все было сделано в в Postgres&rsquo;e. Мы тогда верили в мастер-мастер репликацию, а в Postgres нет никакой мастер-мастер репликации (и нигде нет, на самом деле, ни в одной СУБД нет мастер-мастер репликации), поэтому мы написали свою, которая учитывала особенности нашего контента и обновления этого контента, и могла функционировать нормально.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">И весной 2013 года мы, наконец, столкнулись с проблемами того, что мы понаписали.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><img style="border-style: none; max-width: 100%; vertical-align: middle; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" src="https://habrastorage.org/getpro/habr/post_images/b90/f8b/09a/b90f8b09a2332b0800035f6356514855.png" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Файлов стало к тому времени 25 млн. Оказалось, что при таком объеме обновлений, который к тому времени происходил в системе, транзакции занимают существенное время. Поэтому некоторые транзакции, которые были короче, успевали закончиться раньше, чем начавшиеся раньше, но более длинные. В результате &ndash; автоинкрементный счетчик, на который мы ориентировались в нашей мастер-мастер репликации, оказался с дырочками. Т.е. некоторые файлы никогда наша мастер-мастер репликация не видела. Это был большой сюрприз для меня лично. Я пил три дня.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Потом, наконец, придумал, что надо всякий раз, когда мы запускаем мастер-мастер репликацию, от последнего этого счетчика отнять. Сначала приходилось отнимать 1000, потом 2000, потом и 10000. Когда я вписал в это поле 25 тыс., я понял, что надо что-то делать, но к тому моменту я не знал, что делать. Мы наткнулись опять на ту же самую проблему &ndash; контент менялся быстрее, чем мы его синхронизировали.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Оказалось, что эта наша мастер-мастер репликация работает довольно медленно, и работает медленно, на самом деле, не она, работает медленно вставка в Postgres, особенно медленно работает вставка в BLOB&rsquo;ы. Поэтому в какой-то момент, ночью, когда количество публикаций уменьшалось радикально, база сходилась. Но днем она все время была немножко неконсистентная, чуть-чуть. Наши пользователи заметили это следующим образом: они загружают картинку, они хотят ее тут же увидеть, а ее нет, потому что загрузили они ее на один сервер, а запрашивают они ее через round-robin с другого. Ну, пришлось учить наши сервера, заменять бизнес-логику, пришлось доставать картинку с того же сервера, на который мы ее загрузили. Это аукнулось нам потом проблемами со сдохшим сервером &ndash; когда сервер сдох, надо лезть туда, где этот router и </span></p>', '2016-09-01 19:00:47', '2016-10-23 15:36:34', NULL, 0, NULL),
	(2, 'Sharding – patterns and antipatterns', 'Sharding – patterns and antipatterns', 'da5417c5cb63cb8d701c5156a33ff176.jpg', 'sharding-patterns-and-antipatterns', '<h2 style="font-family: Verdana, sans-serif; font-size: 21px; margin: 0px; font-weight: 400; padding: 0px; background-color: #ffffff;">Константин Осипов (&nbsp;<a class="user_link" style="background-color: transparent; color: #990099; text-decoration: none;" href="https://habrahabr.ru/users/kostja/">kostja</a>&nbsp;), Алексей Рыбак (&nbsp;<a class="user_link" style="background-color: transparent; color: #990099; text-decoration: none;" href="https://habrahabr.ru/users/fisher/">fisher</a>&nbsp;)</h2>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-weight: bold; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Константин Осипов:</span><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;Доклад родился из следующего разговора. Я, как всегда, пытался убедить Алексея больше использовать Tarantool, а он сказал, что там до сих пор нет шардинга и, вообще, неинтересно. Тогда мы стали рассуждать о том, почему нет. Я стал рассказывать, что тут нет одного универсального решения, автоматика полная за вас работает, а вы только кофе на работе пьете и все&hellip;&nbsp;</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /></p>\r\n<h3 style="font-family: Verdana, sans-serif; font-size: 19.25px; margin: 0px; font-weight: 400; padding: 0px; background-color: #ffffff;">Поэтому родился этот доклад &mdash; чтобы посмотреть на то, какой бывает шардинг, какие методы в каких системах используются, какие преимущества и недостатки, почему нельзя одной &laquo;серебряной пулей&raquo; все решить?</h3>\r\n<p><a style="background-color: #ffffff; color: #6da3bd; font-family: Verdana, sans-serif; font-size: 14px;" name="habracut"></a><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Если говорить о шардинге, как о проблеме, то, вообще говоря, такой проблемы нет. Есть проблема распределенных систем, т.е. есть больших баз данных, которые горизонтально масштабируются, у них множество задач, мы их перечислили:</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><img style="border-style: none; max-width: 100%; vertical-align: middle; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" src="https://habrastorage.org/getpro/habr/post_images/688/4dd/bfd/6884ddbfd40beaa7a6c127649652ef18.png" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">В первую очередь, чем больше у вас узлов, тем острее стоит проблема выхода их из строя. Представьте, что у вас из 1000 компьютеров по одному будет ломаться, в среднем, через день или чаще. Поэтому перед вами стоит задача избыточности данных, чтобы не терять их. И это не шардинг. Это, скорее, репликация.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Самая сложная проблема в распределенной системе &mdash; это проблема членства, т.е. кто в нее входит, кто не входит, потому что машины выходят из строя, происходят ошибки, и постоянное членство в распределенной системе меняется. Об этом мы тоже не будем говорить.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Есть задача распределенного выполнения сложных запросов. MapReduce или распределенный SQL. Это тоже не оно.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Так, о чем же мы будем говорить?</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Мы возьмем одну тему, а именно тему того, как какой-то объем данных, который не помещается на одну машину, можно распределить горизонтально по горизонтальному кластеру, и как этим всем потом управлять.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-weight: bold; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Алексей Рыбак:</span><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;Я добавлю. Термин уже устоявшийся, но, все-таки, что же такое шардинг? Вдруг кто-то не знает. Шардинг &mdash; это метод, как правило, горизонтального разделения данных. Чаще всего про шардинг говорят не только про распределенные базы данных, но и, вообще, про распределенные хранилища. Мы будем, прежде всего, фокусироваться на базах данных.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><img style="border-style: none; max-width: 100%; vertical-align: middle; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" src="https://habrastorage.org/getpro/habr/post_images/dd1/9f2/afd/dd19f2afd5b16fba906e7c048c84be98.png" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-weight: bold; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Константин Осипов:</span><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;В нашем докладе мы взяли три вещи, которые составляют из себя сам шардинг, это:</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /></p>\r\n<ul style="margin: 0px 0px 0px 20px; padding: 0px; list-style-position: outside; list-style-image: initial; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">\r\n<li style="margin-left: 20px;">выбор функции шардинга,</li>\r\n<li style="margin-left: 20px;">то, где находятся ваши данные (как вы их находите),</li>\r\n<li style="margin-left: 20px;">то, как вы перераспределяете ваши данные.</li>\r\n</ul>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Мы постараемся сделать так, чтобы этот доклад был не теоретическим, а о том, как это работает в тех проектах, которые мы знаем, т.е. будут истории из жизни.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-weight: bold; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Алексей Рыбак:</span><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;Несмотря на то, что мы будем рассказывать всякие истории о том, что и как было сделано, все-таки, основа доклада &mdash; методологическая. Чтобы представить, как обычно все делается (а, так или иначе, все делается лишь несколькими способами), с тем, чтобы устаканились термины, и в следующий раз, если мы будем углубляться в какие-то темы, мы говорили бы на одном языке.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-weight: bold; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Константин Осипов:</span><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;Перед нами не стоит задача убедить вас использовать тот или иной продукт, но с помощью этого доклада, может быть, вы сможете лучше понимать, как &laquo;под капотом&raquo; работает тот или иной продукт, и каковы преимущества и недостатки решения, выбранного разработчиками этого продукта.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Управлять любой системой вы можете, только понимая, как она работает.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Собственно, что такое шардинг на поверхности? Это выбор способа. Этот выбор я обозначу вот так просто:</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><img style="border-style: none; max-width: 100%; vertical-align: middle; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" src="https://habrastorage.org/getpro/habr/post_images/2d9/70c/7ce/2d970c7ce5d44ab278065f667881ff92.png" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">У нас есть некий ключ, мы должны определить шард. Шард &mdash; это обычно или IP-адрес, либо DNS-адрес компьютера, на котором все это находится.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">На самом деле, формула неправильная, потому что в общем случае здесь должна быть функция от ключа и от количества серверов, т.е. сколько у нас машин или, вообще, от множества серверов. И она должна выдавать нужный сервер, потому что она по-разному работает на разном количестве серверов.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Но прежде, чем мы будем об этом говорить, мы хотим поговорить о чем-то более веселом, а именно о выборе правильного ключа, по которому производится это разбиение. Тут история, в общем-то, такая: вы выбираете ключ, по которому шардите данные один раз, и живете с ним всю жизнь, ну или долго &mdash; несколько лет, и получаете все преимущества и недостатки этого дела.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">А уже гораздо позже, когда что-то сделать уже нельзя (потому что данные уже определенным образом распределены, система уже работает, downtime невозможен) какие тут, вообще, могут быть проблемы, истории?</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Одна история &mdash; еще из 2001 г., времен молодости SpyLOG-а &mdash; там шардинг был основан на пользователях. Что такое SpyLOG? Сейчас это Openstat. Он собирает статистику посещений, т.е. это такой трекер, счетчик, маленькая кнопочка на страничке.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">В общем, все сайты &mdash; как крупные, так и мелкие &mdash; были на тот момент распределены по 40 машинам. И, соответственно, сайты покрупнее жили вместе с сайтами помельче, т.е. ключом шардинга был ID сайта, например, анекдот.ру, рамблер.ру, яндекс.ру&hellip;</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Так получалось, что большие сайты реально укладывали наши машины, потому что один трафик, генерируемый одним ключом шардинга, был больше, чем одна машина могла принять.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Поэтому, когда вы выбираете то, по чему вы шардите данные, вы должны выбрать достаточно маленькой объект, чтобы он не положил систему.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Допустим, в случае фейсбука у вас есть страничка Джастина Бибера, и вы решили шардить данные тоже по пользователям. Естественно, у Джастина Бибера миллион каких-то фолловеров, лайкеров, на каждое его сообщение куча репостов и т.д. Поэтому, наверное, выбор Джастина Бибера в качестве того, по кому вы будете шардить &mdash; не самая лучшая идея.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Второй момент, который надо при шардинге держать в голове, что шардинг &mdash; это не про нормализацию, т.е. если вы думаете, что есть какой-то канонический способ посмотреть на ваши данные и определить, как вы их будете распределять по вашим машинам, то это не так. То есть, вы должны смотреть не на данные, а на use case-ы, на ваше приложение, на ваш бизнес, и вы должны думать, какой use case в вашем бизнесе самый важный и должен быть самым производительным. Потому что в шардинге всегда есть компромиссы. Какие-то запросы работают быстро, мгновенно, какие-то запросы вы вынуждены будете выполнять на весь кластер. И выбор того, по какому ключу вы шардите, определяет это.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-weight: bold; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Алексей Рыбак:</span><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;О Джастине Бибере. А я считаю, что в большей части социальных сетей, на самом деле, выбор пользователя в качестве шардингового ключа &mdash; это хороший выбор. Но надо помнить, что если вы при этом все посты, комментарии и пр. упаковываете в один и тот же шард, то будьте готовы, что в какой-то момент у вас будет очень неоднородное распределение данных и, возможно, вам нужно будет использовать в вашем проекте два типа шардинга &mdash; один ваш изначальный, по юзерам, а второй &mdash; какой-то дополнительный &mdash; например, по комментам.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Это естественно будет приводить к тому, что данные будут (с некоей вероятностью) неконсистентными, что вам нужно будет вместо одного запроса делать два. Это не страшно, потому что при этом вы приобретаете возможность как-то расти.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">А если вы все упакуете на один шард, то у вас будет все очень сильно разбалансировано, и качество вашего софта и вашего сервиса для пользователей может быть очень низким. Поэтому не страшно, что мы сделаем программирование более сложным, зато у нас все будет достаточно быстро. То есть это вполне себе разумный trade-off.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-weight: bold; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Константин Осипов:</span><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;Еще один момент, о котором хотелось бы сказать. Не всегда шардинг-ключ у вас хранится. Например, хранение сессий на мэйл.ру. Допустим, у вас есть ID мэйл.ру, у меня это kostea.mail.ru или что-то такое. Сессия &mdash; это тот объект, который идентифицирует девайс, с которого я зашел. Соответственно, у одного логина много сессий. Мэйл.ру хранит все сессии одного пользователя на одном шарде, т.е. ключом шардинга является логин. Но сама сессия, т.е. идентификатор объекта &mdash; первичный ключ &mdash; это не ключ шардинга. То есть, не всегда так бывает, что идентификатор объекта &mdash; это ключ шардинга. И это бывает удобно, поскольку все хранится на одном шарде. Мы можем одного юзера, например, везде разлогинить, если мы подозреваем, что его пароль взломали и т.п. Мы можем легко этим управлять.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Вот пример хороших и плохих шард-ключей:</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><img style="border-style: none; max-width: 100%; vertical-align: middle; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" src="https://habrastorage.org/getpro/habr/post_images/46b/ef4/d3e/46bef4d3e1ef8f646877810435d512cd.png" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-weight: bold; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Алексей Рыбак:</span><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;Мы к этому примеру будем еще неоднократно возвращаться, поэтому продолжим.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Если вы столкнулись с шардингом, то, скорее всего, это произошло в момент, когда вы наш доклад еще не слышали. Вы попытались что-то поискать в Интернете и ничего особенного не нашли. В течение последних, наверное, десяти лет многие команды прошли один и тот же путь изобретения велосипедов. Поэтому мы начнем рассмотрение наших паттернов или способов организации шардинга с некоторых наиболее распространенных и не самых плохих методов.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">В качестве двух первых можно выбрать следующие.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Как правило, все начинается с одного сервера, и есть такой совершенно простой для, в том числе системного администрирования, метод &mdash; &laquo;йогурт системных администраторов&raquo;. &laquo;Йогурт&raquo; &mdash; потому что он легкий и полезный.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Прежде, чем мы перейдем к этому способу, я хочу отметить: когда делается большая система, несмотря на то, что она начинается с одного-двух серверов, самое важное, когда она вырастает, это стоимость поддержки &mdash; сколько, условно говоря, проблем при эксплуатации всего этого хозяйства возникает. Поэтому удобство системного администратора &mdash; это ценность, которая должна стоять, наверное, на первом месте, когда проектируются подобного рода системы.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Итак, у вас есть один сервер, вы подняли реплику, среплицировали на него данные, через какое-то время распределили нагрузку, в том числе по записи, и думаете, что делать дальше. А дальше вы покупаете еще два сервера, у каждого из них появляется своя реплика. Почему реплика? Потому что с точки зрения системного администрирования это достаточно просто &mdash; вы настроили реплику, потом на какое-то время там запретили записи, таким образом, вы просто делитесь как амеба, которая изображена на этом рисунке:</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><img style="border-style: none; max-width: 100%; vertical-align: middle; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" src="https://habrastorage.org/getpro/habr/post_images/2dd/36e/4b0/2dd36e4b0ea55842d92e6ea68e4ba40a.png" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Проблема заключается в том, что вам нужно все время удваиваться, а это будет очень дорого. Поэтому надо использовать что-то другое.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Есть некоторая комбинация, основанная на магических числах. Я здесь написал 48, на самом деле это лишь пример для идеи. Чем удобно число 48? Оно делится на 12, на 6, на 4, на 3. Вы можете начать с того, что на одном сервере будете держать 48 схем или 48 таблиц, порезанных изначально на такое число. После чего простыми для системного администратора операциями, дампами вы можете переливать какую-то часть данных на другие сервера. При этом, естественно, где-то у вас должна быть логика координации, о которой мы еще поговорим. Вот этот метод &mdash; использование каких-то специальных чисел, которые легко делятся &mdash; позволит вам достаточно легко расти, например, до 48-50 серверов.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-weight: bold; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Константин Осипов:</span><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;Вообще, когда вы думаете о шардинге, нужно в первую очередь проанализировать вашу предметную область, т.е. что за данные у вас хранятся.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Данных не может быть гигантски много. Даже, если говорить обо всех людях на нашей планете, то это всего лишь 7-8 миллиардов. Это не так много. Допустим, если мы говорим обо всех рекламных объявлениях на каком-нибудь avito, то это тоже миллионы, но это не экстраординарные значения. Т.е. у вас есть потолок. Любая система растет, но ее рост замедляется по мере того, как она становится крупнее. Поэтому не всегда нужно брать какие-то самые сложные решения, чтобы все максимально масштабировать. Если вы знаете, что у вас будет максимум 10 серверов, возможно, вам нужно простое решение.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Еще хочу отметить, что всегда выбор шардинг-формулы (на слайде эта формула &mdash; мы просто делим пополам) связан с решардингом.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-weight: bold; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Алексей Рыбак:</span><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;Каким же образом мы распределяем данные между ключами? Пока мы говорили со стороны переноса каких-то схем между серверами. Дальше возникает вопрос: а как мы, вообще, раскидываем данные? Выбрали ключ, раскидали данные по серверам. Здесь есть два самых крупных способа.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Первый способ &mdash; что-то похожее на хэширование. Оно не обязательно должно быть консистентным, т.е., грубо говоря, при добавлении новых серверов у вас множество ключей может очень сильно перетасоваться (это следующий момент, о котором мы поговорим). В любом случае, что вы делаете? Если это числовой ключ, его можно просто поделить на число серверов, получить остаток от деления &mdash; и это будет номер вашего сервера. Если это строковой ключ, например, e-mail, то от него можно взять числовой хэш, далее сделать то же самое.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Есть более &laquo;гаражные&raquo; методы &mdash; типа выбрать первую букву логина, но поскольку вы никак не определяете распределение логинов по буквам, вы должны изначально учесть распределение букв в языке, но это тоже достаточно сложно. Более того, если вы положите одну букву на один сервер, а потом одна буква в один сервер не влезет, то вам нужно будет очень сильно изменять конфигурацию для того, чтобы потом эту букву раскидать. Очень плохая идея. Я бы сказал, что это антипаттерн.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Обозначим только одну проблему, которая при хэшировании имеет место быть. Это добавление новых серверов. Что у вас происходит при решардинге с точки зрения саппорта? У вас вылетает нода, вам нужно поднять из реплик мастер-ноду для этой части и сделать это максимально быстро. Второе &mdash; у вас просто нагрузка выросла, вам нужно докупить новые сервера и максимально быстро ввести их в строй. Соответственно, решардинг является ключевой проблемой.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Если вы просто берете остаток от деления, то появляется большее количество серверов, все хэши &laquo;переразмазываются&raquo;, все ключи, все данные нужно передвинуть. Это очень тяжелая и плохая операция. Она работает, когда вы держите все в памяти.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Например, у нас есть кластер memcached в Badoo. Мы распределили все по остатку от деления, добавили новых серверов (это происходит не так часто), и через, может быть, 5-10 минут все данные пересортировались. Все это происходит достаточно быстро, без особых проблем, потому что передвинуть данные по сети и положить в память другой машины &mdash; это фигня.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Если у вас данные юзеров лежат на диске, например, переписка какая-то и т.п., то это значительно более сложная вещь.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-weight: bold; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Константин Осипов:</span><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;Есть шардинг &laquo;для взрослых&raquo;. И это вторая часть нашего доклада.</span></p>', '2016-09-01 19:00:47', '2016-10-23 15:34:26', 8, 2, NULL),
	(3, 'Самые нужные плагины для Gulp', 'Самые нужные плагины для Gulp', '9e35c0f77445795c6e97b1db181572e7.jpg', 'samie-nuzhnie-plagini-dlya-gulp', '<p><em style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Это пост можно сказать является дубликатом моей предыдущей подборки&nbsp;<a style="background-color: transparent; color: #990099; text-decoration: none;" href="http://habrahabr.ru/post/251157/">&ldquo;Самые нужные плагины для Grunt&rdquo;</a>. Дело в том, что спустя много часов поиска я не нашел крутых плагинов для Gulp, которых нет для Grunt за исключением пары весьма специфичных утилит. Всё как раз наоборот, но проигнорировать множество пользователей Gulp я не мог. Все недостающие плагины я выделил, потому что Gulp умеет использовать их из Grunt, как и Grunt из Gulp.<br /></em><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Доброго времени суток, всем! Кто-то умный, не помню в какой статье именно на Хабре, буквально недавно размышлял о процессе разработки с явным призывом автоматизировать все, что только можно автоматизировать. И лучше один раз потратить время на автоматизацию, чтобы потом экономить его на протяжении всего проекта.&nbsp;</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">У веб-разработчиков есть прекрасный инструмент для автоматизации массы задач, который называется Gulp. И моя страсть к таксономии заставила себя собрать огромную коллекцию почти из 100 ценных плагинов для этого сборщика. Думаю многие кто уже использует Gulp найдут для себя что-то нужное, а кто нет, глядя на возможности, получит хорошую мотивацию установить его и понять как эта штука работает.&nbsp;</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">А еще я выложил&nbsp;</span><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="https://github.com/Pestov/essential-gulp-plugins">подборку на GitHub</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">, чтобы каждый мог пополнить коллекцию.&nbsp;</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><a style="background-color: #ffffff; color: #6da3bd; font-family: Verdana, sans-serif; font-size: 14px;" name="habracut"></a></p>\r\n<h4 style="font-family: Verdana, sans-serif; font-size: 16.8px; margin: 0px; font-weight: 400; padding: 0px; background-color: #ffffff;">HTML&amp;CSS</h4>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="https://github.com/postcss/autoprefixer">autoprefixer</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;&mdash; один из самых полезных плагинов, который автоматически расставляет префиксы к CSS свойствам, исходя из статистики&nbsp;</span><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="http://caniuse.com/">caniuse</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">. Важно сказать, что Автопрефиксер это лишь один из множества дополнений в рамках проекта&nbsp;</span><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="https://github.com/postcss/postcss">PostCSS</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;от Злых Марсиан.&nbsp;</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="https://github.com/BrowserSync/gulp-browser-sync">gulp-browser-sync</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;&mdash; вероятно, самый нужный инструмент, с точки зрения повышения продуктивности веб-разработчиков. BrowserSync создает подключение, после чего производит автообновление страницы во всех браузерах на всех устройствах при изменениями не только клиентских или даже серверных файлов. А плюс ко всему синхронизирует позицию скроллинга и заполненные данные в формах.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="https://github.com/jonkemp/gulp-useref">gulp-useref</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;&mdash; парсит специфичные блоки и конкатенирует описанные в них стили и скрипты.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="https://github.com/alexshk/gulp-email-design">gulp-email-design</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;&mdash; бесценный инструмент при верстки писем, который переводит все CSS стили в инлайновые, автоматически изменяя все пути к файлам, опционально умеет загружать изображения на CDN и даже отсылать письма на почту.&nbsp;</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="https://github.com/ben-eb/gulp-uncss">gulp-uncss</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;&mdash; лучшее решение для оптимизации CSS файлов. Плагин анализирует HTML код и находит все неиспользуемые и продублированные стили.&nbsp;</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="https://github.com/ben-eb/gulp-csso">gulp-csso</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;&mdash; отличный CSS минификатор. На сегодняшний день существует целый ряд CSS компрессоров и сравнительная таблица (GitHub) по ним. Но недавно я увидел лучшую&nbsp;</span><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="https://github.com/frankmarineau/shorthand">Shorthand</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;утилиту без Gulp, которая делает приблизительно следующее:</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /></p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="css hljs" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;"><span class="hljs-selector-tag" style="font-weight: bold;">a</span> {\r\n    <span class="hljs-attribute" style="color: navy;">font-family</span>: Arial;\r\n    <span class="hljs-attribute" style="color: navy;">font-style</span>: italic;\r\n    <span class="hljs-attribute" style="color: navy;">font-size</span>: <span class="hljs-number" style="color: teal;">14px</span>;\r\n    <span class="hljs-attribute" style="color: navy;">line-height</span>: <span class="hljs-number" style="color: teal;">18px</span>; \r\n    <span class="hljs-attribute" style="color: navy;">font-weight</span>: bold;\r\n    <span class="hljs-attribute" style="color: navy;">background-image</span>: <span class="hljs-built_in" style="color: #0086b3;">url</span>(<span class="hljs-string" style="color: #dd1144;">\'example.png\'</span>);\r\n    <span class="hljs-attribute" style="color: navy;">background-color</span>: red;\r\n    <span class="hljs-attribute" style="color: navy;">background-size</span>: cover;\r\n    <span class="hljs-attribute" style="color: navy;">background-repeat</span>: no-repeat;\r\n}\r\n\r\n=&gt;\r\n\r\n<span class="hljs-selector-tag" style="font-weight: bold;">a</span> {\r\n  <span class="hljs-attribute" style="color: navy;">font</span>: italic bold <span class="hljs-number" style="color: teal;">14px</span>/<span class="hljs-number" style="color: teal;">18px</span> Arial;\r\n  <span class="hljs-attribute" style="color: navy;">background</span>: red <span class="hljs-built_in" style="color: #0086b3;">url</span>(<span class="hljs-string" style="color: #dd1144;">\'example.png\'</span>) no-repeat / cover;\r\n}\r\n\r\n</code></pre>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="https://github.com/jonschlinkert/gulp-htmlmin">gulp-htmlmin</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;&mdash; простой HTML минификатор.&nbsp;</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="https://github.com/koistya/gulp-csscomb">gulp-csscomb</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;&mdash; облагораживает структуру ваших CSS.&nbsp;</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="https://www.npmjs.com/package/gulp-csslint">gulp-csslint</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;&mdash; CSS линтер.&nbsp;</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="https://github.com/bezoerb/gulp-htmlhint">gulp-htmlhint</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;&mdash; HTML валидатор.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /></p>\r\n<h4 style="font-family: Verdana, sans-serif; font-size: 16.8px; margin: 0px; font-weight: 400; padding: 0px; background-color: #ffffff;">JavaScript</h4>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="https://github.com/azproduction/gulp-autopolyfiller">gulp-autopolyfiller</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;&mdash; мега крутой плагин, который похож на Autoprefixer и подбирает все необходимые полифилы для JavaScript, чтобы вы могли использовать последние стандарты ECMAScript уже сегодня. Еще рекомендую&nbsp;</span><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="https://github.com/babel/gulp-babel">gulp-babel</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">, который конвертирует ES6/ES7 в ES5.&nbsp;</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="https://www.npmjs.com/package/gulp-jsfmt">gulp-jsfmt</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;&mdash; полезнейший плагин для работы с JavaScript от команды Rdio, который позволяет искать конкретные фрагменты, форматировать и производить массовые изменения в коде. Также существует&nbsp;</span><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="https://github.com/tarunc/gulp-jsbeautifier">gulp-jsbeautifier</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="https://github.com/jscs-dev/gulp-jscs">gulp-jscs</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;&mdash; JavaScript Code Style. Замечательный инструмент со множеством конфигураций для проверки вашего кода в соответствии с существующими стайлгайдами от jQuery, Яндекса, Google, Airbnb и других.&nbsp;</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="https://github.com/doctyper/gulp-modernizr">gulp-modernizr</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;&mdash; помогает составить правильную архитектуру проекта на основе Modernizr.js в зависимости от возможностей браузера.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="https://github.com/gimm/gulp-express">gulp-express</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;&mdash; запускает Express.js веб-сервер.&nbsp;</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="https://github.com/robinthrift/gulp-requirejs">gulp-requirejs</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;и&nbsp;</span><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="https://github.com/deepak1556/gulp-browserify">gulp-browserify</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;&mdash; оптимизируют работу RequireJS и Browserify соответственно.&nbsp;</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="https://github.com/sindresorhus/gulp-plato">gulp-plato</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;&mdash; предоставляет аналитику по вашему коду с разными метриками в виде красивых графиков.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="https://github.com/alexeyraspopov/gulp-complexity">gulp-complexity</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;&mdash; проверка на качество кода основанная на алгоритмах Halstead и Cyclomatic.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="https://github.com/kirjs/gulp-fixmyjs">fixmyjs</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;&mdash; автоматически исправляет простые ошибки в коде после линта выполненного на основе&nbsp;</span><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="http://jshint.com/">JSHint</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">(</span><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="https://github.com/spalger/gulp-jshint">gulp-jshint</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">).</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="https://github.com/yannickcr/gulp-jscpd">gulp-jscpd</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;&mdash; для поиска дубликатов в коде.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="https://github.com/rogeriopvl/gulp-jsonlint">gulp-jsonlint</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;&mdash; валидатор JSON файлов.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="https://github.com/terinjokes/gulp-uglify">gulp-uglify</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;&mdash; JavaScript компрессор.&nbsp;</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="https://github.com/wearefractal/gulp-concat">gulp-concat</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;&mdash; конкатенация файлов.&nbsp;</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /></p>\r\n<h3 style="font-family: Verdana, sans-serif; font-size: 19.25px; margin: 0px; font-weight: 400; padding: 0px; background-color: #ffffff;">Unit тесты</h3>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /></p>\r\n<ul style="margin: 0px 0px 0px 20px; padding: 0px; list-style-position: outside; list-style-image: initial; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">\r\n<li style="margin-left: 20px;"><a style="background-color: transparent; color: #990099; text-decoration: none;" href="https://github.com/kjvalencik/gulp-nodeunit">gulp-nodeunit</a></li>\r\n<li style="margin-left: 20px;"><a style="background-color: transparent; color: #990099; text-decoration: none;" href="https://github.com/sindresorhus/gulp-jasmine">gulp-jasmine</a></li>\r\n<li style="margin-left: 20px;"><a style="background-color: transparent; color: #990099; text-decoration: none;" href="https://github.com/jonkemp/gulp-qunit">gulp-qunit</a></li>\r\n<li style="margin-left: 20px;"><a style="background-color: transparent; color: #990099; text-decoration: none;" href="https://github.com/sindresorhus/gulp-mocha">gulp-mocha</a></li>\r\n<li style="margin-left: 20px;"><a style="background-color: transparent; color: #990099; text-decoration: none;" href="https://github.com/karma-runner/gulp-karma">gulp-karma</a></li>\r\n</ul>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /></p>\r\n<h4 style="font-family: Verdana, sans-serif; font-size: 16.8px; margin: 0px; font-weight: 400; padding: 0px; background-color: #ffffff;">Графика</h4>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="https://github.com/wakayama-io/gulpicon/">gulpicon</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;&mdash; ценный плагин, который позволяет генерировать спрайты из SVG, переводить их в PNG, записывать все Data URI и подключать нужный формат в зависимости от возможностей браузера.&nbsp;</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="https://github.com/nfroidure/gulp-iconfont">gulp-iconfont</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;&mdash; великолепный плагин для работы с веб-шрифтами. Умеет создавать WOFF, WOFF2, EOT, TTF файлы из SVG.&nbsp;</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="https://github.com/mahnunchik/gulp-responsive">gulp-responsive</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;&mdash; простой способ сгенерировать адаптивные изображения под требуемые разрешения устройств с указанием соответствующих префиксов в наименовании.&nbsp;</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="https://github.com/rizalp/gulp-sharp">gulp-sharp</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;&mdash; самый быстрый модуль для работы с JPEG, PNG, WebP и TIFF изображениями. Плагин умеет изменять размер, ориентацию, фон, альфа-канал и многое другое.&nbsp;</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="https://github.com/w0rm/gulp-svgstore">gulp-svgstore</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;&mdash; объединяет все подключаемые SVG файлы и записывает их в HTML как&nbsp;</span><code style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 14px; color: #222222; background-color: #ffffff;">&lt;symbol&gt;</code><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;для дальнейшего использования.&nbsp;</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="https://github.com/akoenig/imacss">gulp-imacss</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;&mdash; очень удобная утилита, которая автоматически преобразовывает подключенные в CSS изображения PNG, JPG, SVG в Data URI.&nbsp;</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="https://github.com/sindresorhus/gulp-imagemin">gulp-imagemin</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;и&nbsp;</span><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="https://github.com/creativeaura/gulp-tinypng">gulp-tinypng</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;для сжатия изображений.&nbsp;</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="https://github.com/otouto/gulp-spritesmith">gulp-spritesmith</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;&mdash; автоматическая генерация спрайтов.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /></p>\r\n<h4 style="font-family: Verdana, sans-serif; font-size: 16.8px; margin: 0px; font-weight: 400; padding: 0px; background-color: #ffffff;">Разное</h4>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="https://github.com/gratimax/gulp-grunt">gulp-grunt</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;&mdash; позволяет запускать Grunt плагины для Gulp.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /></p>\r\n<h5 style="padding: 0px; margin: 0px; font-family: Verdana, sans-serif; font-weight: 400; font-size: 15.4px; background-color: #ffffff;"><span style="font-weight: bold;">Некоторые из отсутствующих:</span></h5>\r\n<p>&nbsp;</p>\r\n<blockquote style="padding-left: 15px; margin: 0.83em 0px; clear: both; border-left: 2px solid #bbbbbb; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;"><a style="background-color: transparent; color: #990099; text-decoration: none;" href="https://github.com/spatools/grunt-html-build">grunt-html-build</a>&nbsp;&mdash; универсальный помощник в верстке. Плагин умеет объединять исходные файлы и создавать полноценные шаблоны/блоки для вашего HTML. Еще для похожих задач очень хорош&nbsp;<a style="background-color: transparent; color: #990099; text-decoration: none;" href="https://github.com/alanshaw/grunt-include-replace">grunt-include-replace</a>.<br /><br /><a style="background-color: transparent; color: #990099; text-decoration: none;" href="https://github.com/fatso83/grunt-penthouse">grunt-penthouse</a>&nbsp;и&nbsp;<a style="background-color: transparent; color: #990099; text-decoration: none;" href="https://github.com/filamentgroup/grunt-criticalcss">grunt-criticalcss</a>&nbsp;&mdash; автоматически находят Critical Path в вашем проекте. Важный момент с точки зрения производительность, о чем подробнее написано&nbsp;<a style="background-color: transparent; color: #990099; text-decoration: none;" href="http://www.phpied.com/css-and-the-critical-path/">тут</a>.&nbsp;<br /><br /><a style="background-color: transparent; color: #990099; text-decoration: none;" href="https://github.com/shipitjs/grunt-shipit">grunt-shipit</a>&nbsp;&mdash; автоматизирует deploy с помощью Shipit.<br /><br /><a style="background-color: transparent; color: #990099; text-decoration: none;" href="https://github.com/wecodemore/grunt-githooks">grunt-githooks</a>&nbsp;&mdash; привязывает&nbsp;<a style="background-color: transparent; color: #990099; text-decoration: none;" href="http://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks">Git Hooks</a>&nbsp;к Grunt таскам.&nbsp;<br /><br /><a style="background-color: transparent; color: #990099; text-decoration: none;" href="https://github.com/GitbookIO/grunt-gitbook">grunt-gitbook</a>&nbsp;&mdash; создавайте документацию с помощью потрясающей утилиты GitBook.<br /><br /><a style="background-color: transparent; color: #990099; text-decoration: none;" href="https://github.com/btford/grunt-conventional-changelog">grunt-conventional-changelog</a>&nbsp;&mdash; генерирует список изменений на основе коммитов в Git.&nbsp;<br /><br /><a style="background-color: transparent; color: #990099; text-decoration: none;" href="https://github.com/tutukin/grunt-proxy">grunt-proxy</a>&nbsp;and&nbsp;<a style="background-color: transparent; color: #990099; text-decoration: none;" href="https://github.com/drewzboto/grunt-connect-proxy">grunt-connect-proxy</a>&nbsp;&mdash; connect support for proxying API calls during development.<br /><br /><a style="background-color: transparent; color: #990099; text-decoration: none;" href="https://github.com/stefanjudis/grunt-phantomas">grunt-phantomas</a>&nbsp;&mdash; превосходный инструмент для измерения производительности проекта.&nbsp;<br /><br /><a style="background-color: transparent; color: #990099; text-decoration: none;" href="https://github.com/mattstyles/grunt-banner">grunt-usebanner</a>&nbsp;&mdash; добавляет баннеры (копирайт или ASCII заголовки) в исходных файлах и&nbsp;<a style="background-color: transparent; color: #990099; text-decoration: none;" href="https://github.com/patorjk/grunt-figlet">grunt-figlet</a>&nbsp;для помощи работы с этим.</blockquote>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="https://github.com/floatdrop/gulp-watch">gulp-watch</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;&mdash; краеугольный камень в плагинной системе Gulp. Следит за всеми указанными файлами или целыми директориями и в случае каких-либо изменений выполняет описанные в конфигурациях таски.&nbsp;</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="https://github.com/mikaelbr/gulp-notify">gulp-notify</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;&mdash; выводит ошибки при сборке Gulp в виде системных сообщений, а главное то, что работает для разных операционных систем.&nbsp;</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="https://github.com/stevelacy/gulp-git">gulp-git</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;&mdash; позволяет использовать Git команды.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="https://github.com/jsBoot/gulp-jsdoc">gulp-jsdoc</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;&mdash; генератор документации, работает на основе JSDoc3.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="https://github.com/sindresorhus/gulp-rev">gulp-rev</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;&mdash; полезный плагин для работы с ревизиями.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="https://github.com/pasangsherpa/gulp-release">gulp-release</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;&mdash; позволяет управлять версиями в вашем проекте.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="https://github.com/stevelacy/gulp-bump">gulp-bump</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;&mdash; следит за репозиторием и обновляет package.json и&nbsp;</span><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="https://github.com/tounano/gulp-update">gulp-update</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">, который обновляет сами пакеты.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="https://github.com/ck86/gulp-bower-files">gulp-bower-files</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;&mdash; подключает все необходимые Bower компоненты.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="https://github.com/hemanth/gulp-removelogs">gulp-removelogs</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;&mdash; автоматически удаляет логи.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="https://github.com/jas/gulp-preprocess">gulp-preprocess</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;&mdash; препроцессор, ссылающийся на установленные конфигурации.&nbsp;</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="https://github.com/hughsk/gulp-duration">gulp-duration</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;&mdash; отображает время выполнения тасков.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="https://github.com/sindresorhus/gulp-changed">gulp-changed</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;и&nbsp;</span><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="https://www.npmjs.com/package/gulp-newer">gulp-newer</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;&mdash; запускают таски только для изменившихся файлов.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="https://github.com/avevlad/gulp-connect">gulp-connect</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;&mdash; простой веб-сервер для статических сайтов.&nbsp;</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="https://github.com/sun-zheng-an/gulp-shell">gulp-shell</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;&mdash; позволяет запускать Shell команды.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="https://github.com/teambition/gulp-ssh">gulp-ssh</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;&mdash; обеспечивает возможность подключения по SSH и SFTP.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="https://www.npmjs.com/package/gulp-zip">gulp-zip</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;&mdash; архивирует папки и файлы.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="https://github.com/peter-vilja/gulp-clean">gulp-clean</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;и&nbsp;</span><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="https://github.com/klaascuvelier/gulp-copy">gulp-copy</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;&mdash; соответственно очищают и копируют указанные исходники.&nbsp;</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="https://github.com/Metrime/gulp-filesize">gulp-filesize</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;&mdash; отображает размеры файлов в удобном для чтения формате.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="https://github.com/gulpjs/gulp-util">gulp-util</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;&mdash; различные утилиты для разработки Gulp плагинов.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /></p>\r\n<h4 style="font-family: Verdana, sans-serif; font-size: 16.8px; margin: 0px; font-weight: 400; padding: 0px; background-color: #ffffff;">Компиляторы</h4>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="https://github.com/plus3network/gulp-less">gulp-less</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;&mdash; LESS в CSS.&nbsp;</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="https://github.com/dlmanning/gulp-sass">gulp-sass</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;&mdash; SASS/SCSS в СSS.&nbsp;</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="https://github.com/appleboy/gulp-compass">gulp-compass</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;&mdash; SASS с Compass в CSS.&nbsp;</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="https://github.com/LearnBoost/stylus">gulp-stylus</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;&mdash; Stylus в CSS.&nbsp;</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="https://github.com/wearefractal/gulp-coffee">gulp-coffee</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;&mdash; CoffeeScript в JavaScript.&nbsp;</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="https://github.com/phated/gulp-jade">gulp-jade</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;&mdash; Jade в HTML.&nbsp;</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="https://github.com/lazd/gulp-handlebars">gulp-handlebars</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;&mdash; Handlebars шаблоны в JST.&nbsp;</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="https://github.com/rdmurphy/gulp-jst">gulp-jst</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;&mdash; Underscore шаблоны в JST.&nbsp;</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="https://github.com/sindresorhus/gulp-react">gulp-react</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;&mdash; Facebook React&rsquo;s JSX шаблоны в JST.&nbsp;</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="https://github.com/sindresorhus/gulp-nunjucks">gulp-nunjucks</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;&mdash; Nunjucks шаблоны в JST.&nbsp;</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="https://github.com/sindresorhus/gulp-dust">gulp-dustjs</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;&mdash; Dust шаблоны в JST.&nbsp;</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="https://github.com/miickel/gulp-angular-templatecache">gulp-angular-templatecache</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;&mdash; AngularJS шаблоны в JST.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /></p>\r\n<h4 style="font-family: Verdana, sans-serif; font-size: 16.8px; margin: 0px; font-weight: 400; padding: 0px; background-color: #ffffff;">Напоследок</h4>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="https://github.com/addyosmani/psi">psi</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;&mdash; PageSpeed Insights with reporting.&nbsp;</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="https://github.com/addyosmani/tmi">tmi</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;&mdash; TMI (Too Many Images) &mdash; discover your image weight on the web.&nbsp;</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="https://ngrok.com/">ngrok</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;&mdash; Introspected tunnels to localhost.&nbsp;</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="https://github.com/sindresorhus/pageres">pageres</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;&mdash; удобная утилита для создания скриншотов сайтов в разных разрешениях.&nbsp;</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Возможно, некоторые методы автоматизации вам будет удобнее использовать прямо в редакторе &mdash; Лучшие плагины для SublimeText.&nbsp;</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="https://github.com/tkellen/node-matchdep">matchdep</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;&mdash; помогает правильно описать зависимости.</span></p>', '2016-09-01 19:00:47', '2016-10-23 15:29:09', 8, 0, NULL),
	(4, 'Маленькие хитрости работы со слоями в Photoshop', 'Маленькие хитрости работы со слоями в Photoshop', '3662d1de1b8bb625f9d52f12a995e151.png', 'malenikie-hitrosti-raboti-so-sloyami-v-photoshop', '<p><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Есть множество секретов при работе с Photoshop, зная которые можно заметно повысить свою производительность. При создании дизайна сайта гармоничное размещение объектов на странице, правильные отступы и наличие пустого пространства играют важную роль для восприятия оформления, а достигается это перемещением элементов дизайна. При этом на переключение между слоями и операции по их перемещению уходит порой до 80% времени, и лишь только оставшееся часть идет на рисование и ввод информации. Поэтому в данном мини-ликбезе, я хочу коснуться только хитростей работы с вкладкой Layers как наиболее востребованной.&nbsp;</span><a style="background-color: #ffffff; color: #6da3bd; font-family: Verdana, sans-serif; font-size: 14px;" name="habracut"></a><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Итак, начнем сначала.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" clear="left" /><span style="font-weight: bold; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Создавайте слои</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Старайтесь не лепить всё в один слой (особенно в слой Background). Возьмите за правило создавай новый слой каждый раз когда хочется добавить что-то новое. Для каждого отдельного объекта (даже простой линии) обязательно нужно создавать новый слой. В дальнейшем будет проще двигать, корректировать, применять фильтры, прозрачность, временно отключать слой. Некоторым слоям рекомендуется давать понятный вам идентификатор (в отличие от Layer10), чтобы легче было их потом находить. Ну вы сами разберетесь каким именно слоям важно иметь название когда начнете их искать&nbsp;</span><s style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">и не находить</s><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Чтобы создать новый слой кликните по иконке&nbsp;</span><img style="border-style: none; max-width: 100%; vertical-align: middle; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" src="https://habrastorage.org/getpro/habr/olpictures/bec/a9a/826/beca9a82685113ed0cd7f19b4ef0b249.gif" alt="New Layer" width="10" height="10" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;во вкладке Layers. Удерживайте Alt чтобы иметь возможность задать сразу имя. Также вы можете создать слой нажав Ctrl+Shift+Alt+N (или Ctrl+Shift+N чтобы вас попросили задать имя).</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-weight: bold; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Группируйте слои</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Как только вам захочется двигать одновременно несколько элементов, то скорее всего вы оперируете с какой-то новой сущностью, не ленитесь сгруппировать эти слои и понятно обозвать. Это тоже должно войти в привычку. Группы позволяют быстро двигать составные элементы, быстро скрывать, а также (что немаловажно) быстро клонировать их. Чтобы создать пустую группу нужно кликнуть по иконке&nbsp;</span><img style="border-style: none; max-width: 100%; vertical-align: middle; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" src="https://habrastorage.org/getpro/habr/olpictures/315/956/963/3159569635e9fad001c6b9b9bf68f8ca.gif" alt="New Group" width="11" height="10" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;во вкладке Layers. Аналогично со слоями удерживайте Alt чтобы задать сразу новое имя.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Но обычно пустые группы не создают, а объединяют в них уже существующие слои/группы. Чтобы мгновенно сгруппировать уже существующие объекты: выделите нужные во вкладке Layers и кликните по&nbsp;</span><img style="border-style: none; max-width: 100%; vertical-align: middle; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" src="https://habrastorage.org/getpro/habr/olpictures/315/956/963/3159569635e9fad001c6b9b9bf68f8ca.gif" alt="New Group" width="11" height="10" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;удерживая Shift (или просто нажмите Ctrl+G). В результате все выделенные слои автоматически попадут в новосозданную группу. По аналогии со слоями, если зажать еще и Alt, то вас попросят ввести имя для группы. Если слоям названия не помешали бы, то для групп они уже довольно важны. Особенно важно назвать группу до ее клонирования (меньше будет мороки позднее).</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Есть еще один неявный способ сгруппировать уже существующие слои. После выделения нужных слоев хватаем один из них и перетаскиваем на кнопку&nbsp;</span><img style="border-style: none; max-width: 100%; vertical-align: middle; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" src="https://habrastorage.org/getpro/habr/olpictures/315/956/963/3159569635e9fad001c6b9b9bf68f8ca.gif" alt="New Group" width="11" height="10" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;внизу вкладки Layers.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">В результате Layers уже выглядит как набор папок в вашей файловой системе. И такое структурирование очень удобно для перемещения и клонирования связанных объектов. Еще раз настою на том, чтобы вы сразу старались называть папки говорящими именами. Будет удобно изменять исходник даже через полгода, не говоря уже про ближайшие полчаса.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-weight: bold; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Выбирайте слои/группы</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Прежде чем делать что-нибудь со слоем (или группой) нужно выделить его во вкладке Layers. Однако, когда количество слоев зашкаливает за сотню искать там становится проблематично. К счастью есть другой, очень простой метод выбора нужного слоя. Перейдите в режим&nbsp;</span><img style="border-style: none; max-width: 100%; vertical-align: middle; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" src="https://habrastorage.org/getpro/habr/olpictures/922/480/036/9224800369f38e313113a32828ce42e3.gif" alt="Move Tool" width="24" height="21" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;(нажав V), а далее кликаем по какой-нибудь области рисования:</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Ctrl + Left Click &mdash; моментально выбрать группу (если нет, то слой) к которой относится область.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Alt + Right Click &mdash; моментально выбрать слой под курсором (самый верхний если их несколько).</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Накрайняк, если вы не можете никак зацепить нужный слой (например он глубоко под всеми) используйте:</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Ctrl + Right Click &mdash; вызвать меню-список всех слоев которые относятся к точке под курсором (вот здесь грамотные названия очень вам пригодятся). Выбираем нужный из списка и voila.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-weight: bold; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Двигайте/клонируйте объекты</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">После того как вы выбрали слой/группу (например по методу выше), как известно, вы можете перемещать его методом драг-н-дроп. Чтобы клонировать группу/слой при перемещении удерживайте Alt (зажав его еще перед перемещением). Вы можете также удерживать Shift чтобы перемещение/клонирование происходило точно по вертикали/горизонтали/диагонали от начального положения (зажимать и отжимать Shift можно когда угодно).</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-weight: bold; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Изменяйте меньше, накладывайте больше</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Photoshop это растровый редактор, поэтому чем больше вы меняете оригинал тем (необратимо) хуже он становится. Неплохо было бы использовать принцип &laquo;семь раз отмерь&raquo; при работе с клипартами. Однако некоторые вещи можно делать над слоем и не изменяя оригинала:</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Во-первых используя Blending Options (дважды кликнуть не по названию слоя), что вы, скорее всего, уже знаете и используете. Там есть разнообразные визуальные эффекты и очень удобно что их всегда можно поправить или вовсе отключить.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Во-вторых, поправить гамму, контраст, яркость, скорректировать баланс белого и всё такое прочее можно создав Adjustment Layer (из меню Layers-&gt;New Adjustment Layer или кликнув по&nbsp;</span><img style="border-style: none; max-width: 100%; vertical-align: middle; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" src="https://habrastorage.org/getpro/habr/olpictures/e4c/d21/1a8/e4cd211a8e4bc80583ddf0886485a18f.gif" alt="New adjustment layer" width="18" height="12" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;во вкладке Layers). Все изменения, которые вы таким образом сделаете, можно будет отменить просто удалив Adjustment Layer с текущего слоя. Кроме того вы всегда сможете поправить настройки впоследствии и это не отразится на качестве, т.к. оригинальный слой при этом остается нетронутым. Если вы вдруг решите поменять цветовую гамму макета вам не придется переделывать его заново.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Также вы можете откадрировать клипарт или сделать невидимой/видимой любую его область (хоть градиентно, хоть в виде звезды, хоть в виде текста) создав Layer Mask (кликнув по&nbsp;</span><img style="border-style: none; max-width: 100%; vertical-align: middle; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" src="https://habrastorage.org/getpro/habr/olpictures/600/eac/157/600eac15701c97042e282f612e8917d3.gif" alt="New layer mask" width="14" height="12" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">). Теперь рисуя в этой области (или применяя к ней любые интрументы/фильтры) вы можете влиять на степень видимости слоя к которому применили. Черные области скрывают части оригинала, серые делают полупрозрачными, чем светлее тем меньше прозрачность. Чтобы вернуться к оригиналу просто удалите Layer Mask.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">В случаях когда вам приходится изменять оригинал (например при уменьшении его размеров), рекомендую делать это над клонированным слоем. Оригинал же оставить и сделать невидимым. Таким образом, если окажется что вы немного переборщили с изменениями, вы всегда сможете начать с оригинального изображения.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-weight: bold; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Всякие мелочи</span></p>\r\n<ul style="margin: 0px 0px 0px 20px; padding: 0px; list-style-position: outside; list-style-image: initial; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">\r\n<li style="margin-left: 20px;">Начиная с Photoshop 7 появилась возможность назначать цвета группам и слоям. Вы уж сами разберитесь надо ли оно вам. Думаю, что при очень большом количестве групп/слоев цветовое разделение может помочь быстро найти нужный в списке.<br />Поменять имя слоя/группы можно дважды кликнув на имени во вкладке Layers<br />Быстро выделить (маской) весь слой можно Ctrl+кликнув по его миниатюре<br />Чтобы быстро понять что это за слой с названием Layer10 большинство обычно скрывает/показывает его кликая по иконке&nbsp;<img style="border-style: none; max-width: 100%; vertical-align: middle;" src="https://habrastorage.org/getpro/habr/olpictures/82c/781/759/82c781759042c4efcf3f2d1ef28384ee.gif" alt="Visibility" width="16" height="16" />. А если кликать по &laquo;глазу&raquo; удеривая Alt то, с точностью до наоборот, все скроется кроме данного слоя. Разумеется следующий Alt+Click вернет все как было.<br />Одним нажатием можно скрыть/показать сразу несколько слоев если кликнув на &laquo;глаз&raquo; одного слоя провести (не отпуская кнопки мыши) по &laquo;глазам&raquo; остальных слоев.<br />Вместо группировки в группы можно также связать объекты с помощью связывания (<img style="border-style: none; max-width: 100%; vertical-align: middle;" src="https://habrastorage.org/getpro/habr/olpictures/d16/0e4/c96/d160e4c963cace03489162b12e954307.gif" alt="Link Layers" width="20" height="9" />). Лично мне кажется что это пережитки прошлого и такой группировкой лучше не злоупотреблять (ну как минимум невозможно скрывать/показывать такую группу в один клик).<br />Если клик по треугольнику рядом с группой раскрывает/закрывает эту группу, то Ctrl+клик раскроет/закроет все группы текущего уровня.<br />Можно создать копию слоя (слоев), переместив его (их) на кнопку создания нового слоя (<img style="border-style: none; max-width: 100%; vertical-align: middle;" src="https://habrastorage.org/getpro/habr/olpictures/bec/a9a/826/beca9a82685113ed0cd7f19b4ef0b249.gif" alt="New Layer" width="10" height="10" />).<br /><br />Меня всегда удивляли отсутствие закономерностей в комбинациях клавиш Photoshop (в частности модификаторов Shift, Alt и Ctrl), запомнить сразу скорее всего не удастся, но если вы не будете бояться пробовать их, то рано или поздно всё запомнится, что обязательно повлияет на вашу продуктивность.</li>\r\n</ul>', '2016-09-01 19:00:47', '2016-10-23 15:27:10', 7, 0, NULL),
	(5, 'Велосипеды на Javascript и jQuery', 'Велосипеды на Javascript и jQuery', '439d17e30e47b9d791e7366003a9f826.jpg', 'velosipedi-na-javascript-i-jquery', '<p><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">В очередной раз открыв код коллег и ужаснувшись, я решил написать эту статью. Надеюсь для кого-нибудь это будет полезным, заодно и мне будет проще новичкам объяснять что у них в коде не так, просто кинув ссылку на эту статью.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Безусловно количество таких вещей очень и очень велико, поэтому в статье ограничусь лишь некоторыми.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><a style="background-color: #ffffff; color: #6da3bd; font-family: Verdana, sans-serif; font-size: 14px;" name="habracut"></a></p>\r\n<h4 style="font-family: Verdana, sans-serif; font-size: 16.8px; margin: 0px; font-weight: 400; padding: 0px; background-color: #ffffff;">1. Константы в коде</h4>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Эта проблема касается не только javascript, а программирования в целом. Рассмотрим пример:</span></p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="javascript hljs" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;">$elem.on(<span class="hljs-string" style="color: #dd1144;">\'keydown\'</span>, <span class="hljs-function"><span class="hljs-keyword" style="font-weight: bold;">function</span>(<span class="hljs-params">e</span>) </span>{\r\n    <span class="hljs-keyword" style="font-weight: bold;">if</span> (e.keyCode == <span class="hljs-number" style="color: teal;">27</span>) {\r\n        <span class="hljs-comment" style="color: #999988; font-style: italic;">//...</span>\r\n    }\r\n});</code></pre>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Что за магическое число 27? Люди, которые часто сталкиваются с кодами сразу скажут &mdash; это же клавиша ESC. Но большинство разработчиков, особенно начинающих, либо не помнят эти коды, либо не знают вообще, и сталкиваясь с кодами, вынуждены в очередной раз лезть в поисковую систему и тратить время.&nbsp;</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Можно конечно добавить комментарий в коде, что это обработка нажатия клавиши ESC, но гораздо эффективнее было бы ввести константу, например, KEY_ESC = 27</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /></p>\r\n<h4 style="font-family: Verdana, sans-serif; font-size: 16.8px; margin: 0px; font-weight: 400; padding: 0px; background-color: #ffffff;">2. Получение идентификаторов</h4>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Часто возникает необходимость получить идентификатор элемента (комментария, поста, пользователя и т.п.), чтобы выполнить какие-нибудь действия. (например, оценить комментарий при помощи ajax). И часто можно встретить подобный подход:</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /></p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="javascript hljs" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;"><span class="hljs-keyword" style="font-weight: bold;">var</span> id = $(<span class="hljs-keyword" style="font-weight: bold;">this</span>).attr(<span class="hljs-string" style="color: #dd1144;">\'id\'</span>).substring(<span class="hljs-number" style="color: teal;">8</span>);</code></pre>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Как и в предыдущем примере разработчику приходится гадать &mdash; что же это за число 8. Лезть в html код и т.п.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Бывают примеры и хуже (строчка скопирована с реального проекта):</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /></p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="javascript hljs" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;"><span class="hljs-keyword" style="font-weight: bold;">var</span> last_id = $(<span class="hljs-string" style="color: #dd1144;">\'#answer_pid\'</span> + id + <span class="hljs-string" style="color: #dd1144;">\' li:first div\'</span>).attr(<span class="hljs-string" style="color: #dd1144;">\'id\'</span>).substr(<span class="hljs-number" style="color: teal;">7</span>);</code></pre>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Малейшее изменение верстки приведет к тому, что js код придется править.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Иногда бывает такое:</span></p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="html hljs xml" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;"><span class="hljs-tag" style="color: navy;">&lt;<span class="hljs-name">div</span> <span class="hljs-attr" style="color: teal;">class</span>=<span class="hljs-string" style="color: #dd1144;">"comment"</span> <span class="hljs-attr" style="color: teal;">id</span>=<span class="hljs-string" style="color: #dd1144;">"comment_123"</span>&gt;</span><span class="hljs-tag" style="color: navy;">&lt;/<span class="hljs-name">div</span>&gt;</span></code></pre>\r\n<p>&nbsp;</p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="javascript hljs" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;"><span class="hljs-keyword" style="font-weight: bold;">var</span> id = $(<span class="hljs-keyword" style="font-weight: bold;">this</span>).attr(<span class="hljs-string" style="color: #dd1144;">\'id\'</span>).substring(<span class="hljs-string" style="color: #dd1144;">"comment_"</span>.length);</code></pre>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Уже лучше (по крайней мере нет вшитых чисел), но все равно данный подход слишком сильно привязывает js код к html.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">На мой взгляд гораздо лучше использовать data-* параметры, например</span></p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="html hljs xml" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;"><span class="hljs-tag" style="color: navy;">&lt;<span class="hljs-name">div</span> <span class="hljs-attr" style="color: teal;">class</span>=<span class="hljs-string" style="color: #dd1144;">"comment"</span> <span class="hljs-attr" style="color: teal;">data-id</span>=<span class="hljs-string" style="color: #dd1144;">"123"</span>&gt;</span><span class="hljs-tag" style="color: navy;">&lt;/<span class="hljs-name">div</span>&gt;</span></code></pre>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">тогда получить идентификатор будет очень просто:</span></p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="javascript hljs" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;"><span class="hljs-keyword" style="font-weight: bold;">var</span> id = $(<span class="hljs-keyword" style="font-weight: bold;">this</span>).attr(<span class="hljs-string" style="color: #dd1144;">\'data-id\'</span>);</code></pre>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">или</span></p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="javascript hljs" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;"><span class="hljs-keyword" style="font-weight: bold;">var</span> id = $(<span class="hljs-keyword" style="font-weight: bold;">this</span>).data(<span class="hljs-string" style="color: #dd1144;">\'id\'</span>);</code></pre>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">(Про отличия в работе attr и data есть множество статей)</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /></p>\r\n<h4 style="font-family: Verdana, sans-serif; font-size: 16.8px; margin: 0px; font-weight: 400; padding: 0px; background-color: #ffffff;">3. $.post</h4>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Как известно &mdash; в jquery есть метод для работы с ajax &mdash; $.ajax. К нему есть несколько shorthand функций, таких как $.get, $.load, $.post и т.п. Данные функции были добавлены специально, чтобы облегчить часто выполняемые действия (подгрузить скрипт, json, выполнить post запрос), но в реализации все эти методы ссылаются на $.ajax.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Лично я никогда не использую shorthand функции, и вот почему:</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">В коде начинающих или малоопытных разработчиков можно встретить несколько разных стадий:</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">1. Начальный</span></p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="javascript hljs" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;">$.post(url, data, <span class="hljs-function"><span class="hljs-keyword" style="font-weight: bold;">function</span>(<span class="hljs-params">data</span>) </span>{\r\n            data = $.parseJSON(data);\r\n            <span class="hljs-comment" style="color: #999988; font-style: italic;">//...</span>\r\n});\r\n</code></pre>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">2. Добавляется try catch блок</span></p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="javascript hljs" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;">$.post(url, data, <span class="hljs-function"><span class="hljs-keyword" style="font-weight: bold;">function</span>(<span class="hljs-params">data</span>) </span>{\r\n	    <span class="hljs-keyword" style="font-weight: bold;">try</span> {\r\n                data = $.parseJSON(data);\r\n            } <span class="hljs-keyword" style="font-weight: bold;">catch</span> (e) {\r\n                <span class="hljs-keyword" style="font-weight: bold;">return</span>;\r\n            }\r\n            <span class="hljs-comment" style="color: #999988; font-style: italic;">//...</span>\r\n});\r\n</code></pre>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">3. Узнаем из документации, что в $.post последним параметром можно передать dataType (который пропадает в бездне кода, если success функция не влезает в экран).</span></p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="javascript hljs" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;">\r\n$.post(url, data, <span class="hljs-function"><span class="hljs-keyword" style="font-weight: bold;">function</span>(<span class="hljs-params">data</span>) </span>{\r\n    <span class="hljs-comment" style="color: #999988; font-style: italic;">//...</span>\r\n}, <span class="hljs-string" style="color: #dd1144;">\'json\'</span>);\r\n</code></pre>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Очень редко веб разработчики добавляют обработчики ошибочных ситуаций. В основном это происходит из-за лени, либо нежелании потратить лишние 5 минут времени, либо разработчики просто уверены, что ошибок никогда не будет.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Если же разработчик решил к $.post добавить обработчик ошибок, то получается нечто вроде:</span></p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="javascript hljs" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;">$.post(url, data, <span class="hljs-function"><span class="hljs-keyword" style="font-weight: bold;">function</span>(<span class="hljs-params">data</span>) </span>{\r\n    <span class="hljs-comment" style="color: #999988; font-style: italic;">//...</span>\r\n}, <span class="hljs-string" style="color: #dd1144;">\'json\'</span>).error(<span class="hljs-function"><span class="hljs-keyword" style="font-weight: bold;">function</span>() </span>{\r\n   <span class="hljs-comment" style="color: #999988; font-style: italic;">///</span>\r\n});</code></pre>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">На мой взгляд &mdash; это ужасно нечитабельно. Да и писать каждый раз обработчик ошибок &mdash; дело нудное, поэтому можно настроить обработчик ошибок по умолчанию для всех ajax запросов, например:</span></p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="javascript hljs" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;">\r\n$.ajaxSetup({\r\n    error: <span class="hljs-function"><span class="hljs-keyword" style="font-weight: bold;">function</span>() </span>{\r\n        <span class="hljs-comment" style="color: #999988; font-style: italic;">//Показать окошко о том, что произошла ошибка</span>\r\n    }\r\n});\r\n</code></pre>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Вернемся к $.post. Как показано выше &mdash; использование $.post делает код ужасным (особенно с dataType в непонятном месте). Перепишем последний пример на $.ajax. На мой взгляд данный подход читабельнее и проще в поддержке.</span></p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="javascript hljs" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;">\r\n$.ajax({\r\n    type: <span class="hljs-string" style="color: #dd1144;">"POST"</span>\r\n    url: url,\r\n    data: data,\r\n    dataType: <span class="hljs-string" style="color: #dd1144;">"json"</span>,\r\n    success: <span class="hljs-function"><span class="hljs-keyword" style="font-weight: bold;">function</span>(<span class="hljs-params">data</span>) </span>{\r\n        <span class="hljs-comment" style="color: #999988; font-style: italic;">//</span>\r\n    },\r\n    error: <span class="hljs-function"><span class="hljs-keyword" style="font-weight: bold;">function</span>() </span>{\r\n        <span class="hljs-comment" style="color: #999988; font-style: italic;">//</span>\r\n    }\r\n});\r\n</code></pre>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /></p>\r\n<h4 style="font-family: Verdana, sans-serif; font-size: 16.8px; margin: 0px; font-weight: 400; padding: 0px; background-color: #ffffff;">4. Обработчики событий к нескольким элементам</h4>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Часто бывает необходимость добавить обработчики событий к элементам страницы (например, кнопка &laquo;удалить сообщение&raquo;). И зачастую можно встретить подобный подход:</span></p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="javascript hljs" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;">\r\n$(<span class="hljs-string" style="color: #dd1144;">\'.comment a.delete\'</span>).click(<span class="hljs-function"><span class="hljs-keyword" style="font-weight: bold;">function</span>()</span>{\r\n    <span class="hljs-comment" style="color: #999988; font-style: italic;">//</span>\r\n});\r\n</code></pre>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Возникает проблема &mdash; добавить этот же обработчик к новому элементу (например к динамески подгруженному комментарию). И тут я видел множество решений, включая переопределение всех обработчиков заново (нередко копипастом содержимого обработчиков):</span></p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="javascript hljs" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;">\r\n$(<span class="hljs-string" style="color: #dd1144;">\'.comment a.delete\'</span>).unbind(<span class="hljs-string" style="color: #dd1144;">\'click\'</span>).click(<span class="hljs-function"><span class="hljs-keyword" style="font-weight: bold;">function</span>() </span>{\r\n    <span class="hljs-comment" style="color: #999988; font-style: italic;">//</span>\r\n});\r\n</code></pre>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Решение: в jQuery 1.7 есть метод on, который привязывает обработчики события, фильтруя элементы по селектору.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">пример:</span></p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="javascript hljs" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;">\r\n$(<span class="hljs-string" style="color: #dd1144;">\'body\'</span>).on(<span class="hljs-string" style="color: #dd1144;">\'click\'</span>, <span class="hljs-string" style="color: #dd1144;">\'a.external\'</span>, <span class="hljs-function"><span class="hljs-keyword" style="font-weight: bold;">function</span>(<span class="hljs-params">e</span>) </span>{\r\n	<span class="hljs-comment" style="color: #999988; font-style: italic;">//функция будет вызвана при клике на любую ссылку с классом external</span>\r\n});\r\n</code></pre>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">При этом важно, что данный обработчик работает и для динамически создаваемых объектов.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Стоит также заметить, что данный подход нужно применять с умом. Например следующий код может привести к снижению производительности и подтормаживаниям браузера:</span></p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="javascript hljs" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;">\r\n$(<span class="hljs-string" style="color: #dd1144;">\'body\'</span>).on(<span class="hljs-string" style="color: #dd1144;">\'mousemove\'</span>, selector, <span class="hljs-function"><span class="hljs-keyword" style="font-weight: bold;">function</span>() </span>{\r\n	<span class="hljs-comment" style="color: #999988; font-style: italic;">//</span>\r\n});\r\n</code></pre>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /></p>\r\n<h4 style="font-family: Verdana, sans-serif; font-size: 16.8px; margin: 0px; font-weight: 400; padding: 0px; background-color: #ffffff;">5. Namespaced events</h4>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Несмотря на то, что namespaced events были добавлены в jQuery 1.2 &mdash; ими мало кто пользуется (Мне кажется большинство людей просто не знают о них).&nbsp;</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Рассмотрим пример:</span></p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="javascript hljs" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;">\r\n$(<span class="hljs-string" style="color: #dd1144;">\'a\'</span>).on(<span class="hljs-string" style="color: #dd1144;">\'click\'</span>, <span class="hljs-function"><span class="hljs-keyword" style="font-weight: bold;">function</span>() </span>{\r\n	<span class="hljs-comment" style="color: #999988; font-style: italic;">//обработчик 1</span>\r\n});\r\n$(<span class="hljs-string" style="color: #dd1144;">\'a\'</span>).on(<span class="hljs-string" style="color: #dd1144;">\'click\'</span>, <span class="hljs-function"><span class="hljs-keyword" style="font-weight: bold;">function</span>() </span>{\r\n	<span class="hljs-comment" style="color: #999988; font-style: italic;">//обработчик 2</span>\r\n});\r\n</code></pre>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Теперь предположим, что нам нужно удалить второй обработчик от ссылок. Но вот ведь незадача &mdash; $(\'a\').off(\'click\') удалит оба обработчика. На помощь приходит namespaced events. Перепишем код выше:</span></p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="javascript hljs" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;">\r\n$(<span class="hljs-string" style="color: #dd1144;">\'a\'</span>).on(<span class="hljs-string" style="color: #dd1144;">\'click.namespace1\'</span>, <span class="hljs-function"><span class="hljs-keyword" style="font-weight: bold;">function</span>() </span>{\r\n	<span class="hljs-comment" style="color: #999988; font-style: italic;">//обработчик 1</span>\r\n});\r\n$(<span class="hljs-string" style="color: #dd1144;">\'a\'</span>).on(<span class="hljs-string" style="color: #dd1144;">\'click.namespace2\'</span>, <span class="hljs-function"><span class="hljs-keyword" style="font-weight: bold;">function</span>() </span>{\r\n	<span class="hljs-comment" style="color: #999988; font-style: italic;">//обработчик 2</span>\r\n});\r\n</code></pre>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Теперь становится возможным удалить второй обработчик при помощи вызова $(\'a\').off(\'click.namespace2\');</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Подробнее о namespaced events можно прочитать здесь:&nbsp;</span><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="http://docs.jquery.com/Namespaced_Events">docs.jquery.com/Namespaced_Events</a><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /></p>\r\n<h4 style="font-family: Verdana, sans-serif; font-size: 16.8px; margin: 0px; font-weight: 400; padding: 0px; background-color: #ffffff;">Вместо заключения</h4>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Это лишь небольшая часть тех проблем, с которыми я регулярно сталкиваюсь в чужом коде. Надеюсь что данный пост поможет улучшить качество кода.</span></p>', '2016-09-01 19:00:47', '2016-10-23 15:24:35', 4, 0, NULL),
	(6, 'Поддерживает-ли браузер пользователя CSS в необходимом объеме?', 'Поддерживает-ли браузер пользователя CSS в необходимом объеме?', '75a1341ffbbd2ff58f81980cd0f36820.png', 'podderzhivaet-li-brauzer-polizovatelya-css-v-neobhodimom-obъeme', '<p><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="http://www.modernizr.com/">Modernizr</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;&mdash; это небольшая простая JavaScript-библиотека, которая поможет получить ответ на вопрос поддерживает ли браузер пользователя такие технологии как:&nbsp;</span><a style="background-color: #ffffff; color: #6da3bd; font-family: Verdana, sans-serif; font-size: 14px;" name="habracut"></a></p>\r\n<ul style="margin: 0px 0px 0px 20px; padding: 0px; list-style-position: outside; list-style-image: initial; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">\r\n<li style="margin-left: 20px;">HTML5</li>\r\n<li style="margin-left: 20px;">Canvas</li>\r\n<li style="margin-left: 20px;">rgba()</li>\r\n<li style="margin-left: 20px;">hsla()</li>\r\n<li style="margin-left: 20px;">border-image</li>\r\n<li style="margin-left: 20px;">border-radius</li>\r\n<li style="margin-left: 20px;">box-shadow</li>\r\n<li style="margin-left: 20px;">Множественные фоновые изображения</li>\r\n<li style="margin-left: 20px;">Прозрачность</li>\r\n<li style="margin-left: 20px;">CSS-анимацию</li>\r\n<li style="margin-left: 20px;">Столбцы</li>\r\n<li style="margin-left: 20px;">Градиенты</li>\r\n<li style="margin-left: 20px;">Отражения</li>\r\n<li style="margin-left: 20px;">CSS-трансформацию</li>\r\n<li style="margin-left: 20px;">CSS-перехды</li>\r\n</ul>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Вы хотели бы упростить верстку, зная что браузер пользователя поддерживает такие возможности CSS, как, например, множественные фоновые изображения? С Modernizr этого добиться просто! Синтаксис очень понятен:</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><code style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 14px; color: #222222; background-color: #ffffff;">body.multiplebgs div p {<br />/* properties for browsers that<br />support multiple backgrounds */<br />}<br />body.no-multiplebgs div p {<br />/* optional fallback properties<br />for browsers that don\'t */<br />}</code></p>', '2016-09-01 19:00:47', '2016-10-23 15:20:30', 3, 4, NULL),
	(9, 'Валидация в HTML5', 'Валидация в HTML5', '9bd7f9c079a98ce4bb0830b98e5980ac.jpg', 'validatsiya-v-html5', '<p><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Интерактивные веб-сайты и приложения невозможно представить без форм, которые позволяют нам общаться с нашими пользователями и получать данные, необходимые для обеспечения гладких сделок с ними. В то время как мы можем улучшить удобство и простоту использования наших форм с удачно выбранным шаблоном проектирования UX. HTML5 также имеет собственный механизм для ограничения проверки, который позволяет нам поймать ошибки ввода прямо на фронт энде.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Проверка ввода имеет основную цель &mdash; безопасность. Когда речь идет о безопасности, это означает, что мы должны предотвратить инъекции вредоносного контента &mdash; будь то преднамеренные или случайные.При проверке внешнего интерфейса ввода, наша работа состоит в том, чтобы установить разумные ограничения на ввод данных пользователем.</span></p>\r\n<h3 style="font-family: Verdana, sans-serif; font-size: 19.25px; margin: 0px; font-weight: 400; padding: 0px; background-color: #ffffff;">Валидация в HTML5</h3>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">До появления HTML5 фронт-энд разработчики были ограничены в проверке пользовательского ввода использованием JavaScript. Это был утомительным и подверженный ошибкам процесс. Для улучшения проверки на стороне клиента, HTML5 ввел алгоритм проверки ограничений, который работает в современных браузерах, и проверяет правильность пользовательского ввода.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Благодаря функции проверки ограничений в HTML5, мы можем выполнить все стандартные задачи проверки входных данных на стороне клиента без JavaScript, исключительно с HTML5.&nbsp;</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Кроме тех типов входных данных, которые уже существовали до HTML5 (text, password, submit, reset, radio, checkbox, button, hidden), мы можем также использовать следующие смысловые HTML5 типы:&nbsp;</span><em style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">email, tel, url, number, time, date, datetime, datetime-local, month, week, range, search, color</em><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Мы можем безопасно использовать типы входных данных в формате HTML5 со старыми браузерами, так как они будут вести себя как поле в браузерах, которые не поддерживают их.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /></p>\r\n<h3 style="font-family: Verdana, sans-serif; font-size: 19.25px; margin: 0px; font-weight: 400; padding: 0px; background-color: #ffffff;">Пара примеров атрибутов для валидации</h3>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Использование следующих семантических атрибутов для валидации может быть очень полезным и даже может помочь нам больше, чем мы думаем:&nbsp;</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-weight: bold; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">1) required</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Required является самым известным атрибутом в валидации HTML. У него не может быть значения. Просто теги, которые использует этот атрибут, не должны быть пустыми.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /></p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="html hljs xml" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;"> <span class="hljs-tag" style="color: navy;">&lt;<span class="hljs-name">input</span> <span class="hljs-attr" style="color: teal;">type</span>=<span class="hljs-string" style="color: #dd1144;">"text"</span> <span class="hljs-attr" style="color: teal;">name</span>=<span class="hljs-string" style="color: #dd1144;">"text"</span> <span class="hljs-attr" style="color: teal;">class</span>=<span class="hljs-string" style="color: #dd1144;">&rdquo;mytext&rdquo;</span> <span class="hljs-attr" style="color: teal;">required</span>&gt;</span></code></pre>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Он может быть использован в следующих инпутах:&nbsp;</span><em style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">url, email, text, password, date, month, week, tel, search, select, textarea, file, checkbox, time, number</em><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">. Например, пользователь может забыть ввести значение в поле ввода. В этом случае сообщение об ошибке будет высвечивается до тех пор, пока это поле не будет заполнено правильно. Поэтому важно всегда визуально обозначать для пользователя поля, обязательные для заполнения.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-weight: bold; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">2) maxlength</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Этот атрибут позволяет установить максимальную длину вводимого текста для текстового поля ввода. Maxlength может быть использован в следующих инпутах: textarea, password, url, tel, text и search.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">В этом textarea лимит символов будет до 350.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /></p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="html hljs xml" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;"><span class="hljs-tag" style="color: navy;">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr" style="color: teal;">name</span>=<span class="hljs-string" style="color: #dd1144;">"message"</span> <span class="hljs-attr" style="color: teal;">id</span>=<span class="hljs-string" style="color: #dd1144;">"message"</span> <span class="hljs-attr" style="color: teal;">cols</span>=<span class="hljs-string" style="color: #dd1144;">"40"</span> <span class="hljs-attr" style="color: teal;">rows</span>=<span class="hljs-string" style="color: #dd1144;">"6"</span> <span class="hljs-attr" style="color: teal;">maxlength</span>=<span class="hljs-string" style="color: #dd1144;">"350"</span>&gt;</span><span class="hljs-tag" style="color: navy;">&lt;/<span class="hljs-name">textarea</span>&gt;</span></code></pre>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Maxlength не покажет ошибку, но браузер не позволит пользователю ввести больше указанного числа символов. Хорошим примером может быть тег tel &mdash; pole для телефонного номера, который не может иметь больше определенного количества символов, или формы обратной связи, где мы не хотим, чтобы пользователи писали сообщения больше определенной длины.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-weight: bold; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">3) max, min</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Атрибут min и max могут помочь указывать диапазон между минимальном и максимальном номером. Мы можем использовать эти атрибуты в следующих инпутах:&nbsp;</span><em style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">date, time, week, range, number и month</em><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">. В следующем примере мы можем видеть минимальную и максимальную разницу в возрасте от 18 до 65 лет.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /></p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="html hljs xml" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;"><span class="hljs-tag" style="color: navy;">&lt;<span class="hljs-name">input</span> <span class="hljs-attr" style="color: teal;">type</span>=<span class="hljs-string" style="color: #dd1144;">"age"</span> <span class="hljs-attr" style="color: teal;">name</span>=<span class="hljs-string" style="color: #dd1144;">"age"</span> <span class="hljs-attr" style="color: teal;">min</span>=<span class="hljs-string" style="color: #dd1144;">"18"</span> <span class="hljs-attr" style="color: teal;">max</span>=<span class="hljs-string" style="color: #dd1144;">"65"</span>&gt;</span></code></pre>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Если пользователь введет возраст до 17 лет или после 66 лет, то он получит сообщение об ошибке, при том что этот запрос не будет отправлен на сервер.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-weight: bold; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">4) step</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Атрибут step можно использовать для числового интервала. В следующем примере есть input number где мы указываем минимальный и максимальный год, но мы добавляем&nbsp;</span><em style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">step=&rdquo;4&rdquo;</em><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">. Это означает, что при каждом изменении значение будет меняться с шагом 4 года.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /></p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="html hljs xml" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;"><span class="hljs-tag" style="color: navy;">&lt;<span class="hljs-name">input</span> <span class="hljs-attr" style="color: teal;">type</span>=<span class="hljs-string" style="color: #dd1144;">"number"</span> <span class="hljs-attr" style="color: teal;">name</span>=<span class="hljs-string" style="color: #dd1144;">"leapyear"</span> <span class="hljs-attr" style="color: teal;">min</span>=<span class="hljs-string" style="color: #dd1144;">"1972"</span> <span class="hljs-attr" style="color: teal;">max</span>=<span class="hljs-string" style="color: #dd1144;">"2016"</span> <span class="hljs-attr" style="color: teal;">step</span>=<span class="hljs-string" style="color: #dd1144;">"4"</span>&gt;</span></code></pre>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Пользователь может также ввести значение вручную в поле ввода, но в этом случае, если оно не соответствует ограничениям, браузер выдаст сообщение об ошибке.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-weight: bold; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">5) pattern</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Атрибут паттерн использует регулярное выражение для валидаций этого поля. Регулярное выражение представляет собой заранее определенный набор символов, которые образуют определенный шаблон. Мы можем использовать его либо для поиска строк, которые следуют шаблону, либо для обеспечения определенного формата, определенного шаблона.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Приведенный ниже пример требует от пользователей ввести пароль, который содержит минимально 8 символов, и включает по крайней мере одну букву и одну цифру:</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /></p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="html hljs xml" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;"><span class="hljs-tag" style="color: navy;">&lt;<span class="hljs-name">input</span> <span class="hljs-attr" style="color: teal;">type</span>=<span class="hljs-string" style="color: #dd1144;">"password"</span> <span class="hljs-attr" style="color: teal;">name</span>=<span class="hljs-string" style="color: #dd1144;">"password"</span> <span class="hljs-attr" style="color: teal;">required</span> <span class="hljs-attr" style="color: teal;">pattern</span>=<span class="hljs-string" style="color: #dd1144;">"^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{8,}$"</span>&gt;</span></code></pre>\r\n<p>&nbsp;</p>\r\n<h3 style="font-family: Verdana, sans-serif; font-size: 19.25px; margin: 0px; font-weight: 400; padding: 0px; background-color: #ffffff;">Заключение</h3>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">В этой статье мы рассмотрели то, как использовать предоставляемый браузером алгоритм проверки форм и ограничений в HTML5. Обычно мы можем это делать с помощью JavaScript или PHP, но для начала, чтобы оптимизировать обращение к базе данных или посторонним скриптам, мы можем использовать HTML5.</span></p>', '2016-09-01 19:00:47', '2016-10-23 15:17:30', 3, 1, NULL),
	(11, 'Promises 101', 'Promises 101', '279e4309bbc88ad6899435a9fdee8f07.png', 'promises-101', '<p style="margin: 0px; padding: 0px; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Перевод первой части отличной&nbsp;<a style="background-color: transparent; color: #990099; text-decoration: none;" href="https://bitsofco.de/javascript-promises-101/">статьи</a>&nbsp;про промисы. Базовые приемы создания и управления промисами.</p>\r\n<p>&nbsp;</p>\r\n<p style="margin: 0px; padding: 0px; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Промисы используются для операций, вычисление которых занимает неопределенное время. Примером подобной операции может быть сетевой запрос, когда мы запрашиваем данные у API и не можем точно определить, когда будет получен ответ.</p>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><a style="background-color: #ffffff; color: #6da3bd; font-family: Verdana, sans-serif; font-size: 14px;" name="habracut"></a></p>\r\n<p style="margin: 0px; padding: 0px; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Если есть другие операции, выполнение которых зависит от этого сетевого запроса, то вырисовывается проблема. Без промисов нам придётся использовать вереницу колбэков(callbacks), чтобы выстроить последовательность операций. Это нормально, если у нас одно асинхронное действие. Но если нужно сделать несколько последовательных асинхронных шагов, колбэки становятся неуправляемыми и результат печально известен как&nbsp;<a style="background-color: transparent; color: #990099; text-decoration: none;" href="http://callbackhell.com/">лапша колбеков (callback hell)</a></p>\r\n<p>&nbsp;</p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="hljs lisp" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;">doSomething(<span class="hljs-name" style="color: navy;">function</span>(<span class="hljs-name" style="color: navy;">responseOne</span>) {  \r\n    doSomethingElse(<span class="hljs-name" style="color: navy;">responseOne</span>, function(<span class="hljs-name" style="color: navy;">responseTwo</span>, err) {\r\n        if (<span class="hljs-name" style="color: navy;">err</span>) { handleError(<span class="hljs-name" style="color: navy;">err</span>)<span class="hljs-comment" style="color: #999988; font-style: italic;">; }</span>\r\n        doMoreStuff(<span class="hljs-name" style="color: navy;">responseTwo</span>, function(<span class="hljs-name" style="color: navy;">responseThree</span>, err) {\r\n            if (<span class="hljs-name" style="color: navy;">err</span>) { handleAnotherError(<span class="hljs-name" style="color: navy;">err</span>)<span class="hljs-comment" style="color: #999988; font-style: italic;">; }</span>\r\n            doFinalThing(<span class="hljs-name" style="color: navy;">responseThree</span>, function(<span class="hljs-name" style="color: navy;">err</span>) {\r\n                if (<span class="hljs-name" style="color: navy;">err</span>) { handleAnotherError(<span class="hljs-name" style="color: navy;">err</span>)<span class="hljs-comment" style="color: #999988; font-style: italic;">; }</span>\r\n                // Выполнено\r\n            })<span class="hljs-comment" style="color: #999988; font-style: italic;">; // конец doFinalThing</span>\r\n        })<span class="hljs-comment" style="color: #999988; font-style: italic;">; // конец doMoreStuff</span>\r\n    })<span class="hljs-comment" style="color: #999988; font-style: italic;">; // конец doSomethingElse</span>\r\n})<span class="hljs-comment" style="color: #999988; font-style: italic;">; // конец doSomething</span></code></pre>\r\n<p>&nbsp;</p>\r\n<p style="margin: 0px; padding: 0px; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Промисы предоставляют стандартизированный и понятный метод решения задач, которые должны выполняться последовательно.</p>\r\n<p>&nbsp;</p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="hljs erlang" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;"><span class="hljs-function"><span class="hljs-title" style="color: #990000; font-weight: bold;">doSomething</span><span class="hljs-params">()</span>  \r\n  .<span class="hljs-title" style="color: #990000; font-weight: bold;">then</span><span class="hljs-params">(doSomethingElse)</span>\r\n  .<span class="hljs-title" style="color: #990000; font-weight: bold;">catch</span><span class="hljs-params">(handleError)</span>\r\n  .<span class="hljs-title" style="color: #990000; font-weight: bold;">then</span><span class="hljs-params">(doMoreStuff)</span>\r\n  .<span class="hljs-title" style="color: #990000; font-weight: bold;">then</span><span class="hljs-params">(doFinalThing)</span>\r\n  .<span class="hljs-title" style="color: #990000; font-weight: bold;">catch</span><span class="hljs-params">(handleAnotherError)</span></span></code></pre>\r\n<p>&nbsp;</p>\r\n<h3 id="sozdanie-promisov" style="font-family: Verdana, sans-serif; font-size: 19.25px; margin: 0px; font-weight: 400; padding: 0px; background-color: #ffffff;">Создание промисов</h3>\r\n<p>&nbsp;</p>\r\n<p style="margin: 0px; padding: 0px; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Промисы создаются при помощи конструктора промисов. Он представляет собой функцию с двумя аргументами (<code style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 1em; color: #222222;">resolve</code>&nbsp;&amp;&nbsp;<code style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 1em; color: #222222;">reject</code>) в качесте параметров.</p>\r\n<p>&nbsp;</p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="hljs javascript" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;"><span class="hljs-keyword" style="font-weight: bold;">var</span> promise = <span class="hljs-keyword" style="font-weight: bold;">new</span> <span class="hljs-built_in" style="color: #0086b3;">Promise</span>(<span class="hljs-function"><span class="hljs-keyword" style="font-weight: bold;">function</span>(<span class="hljs-params">resolve, reject</span>) </span>{ <span class="hljs-comment" style="color: #999988; font-style: italic;">/* Содержимое промиса */</span> } ) </code></pre>\r\n<p>&nbsp;</p>\r\n<p style="margin: 0px; padding: 0px; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;"><img style="border-style: none; max-width: 100%; vertical-align: middle;" src="https://bitsofco.de/content/images/2016/06/Creating-Promises.png" alt="Конструктор Промисов" /><br />Внутри этой функции мы можем выполнять любые асинхронные задачи. Чтобы отметить промис как&nbsp;<span style="font-weight: bold;">исполненный</span>, мы вызываем&nbsp;<code style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 1em; color: #222222;">resolve()</code>, передавая ему значение, которое мы хотим возвратить. Что бы отметить промис как&nbsp;<span style="font-weight: bold;">отклонённый</span>&nbsp;или неудачный, мы вызываем&nbsp;<code style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 1em; color: #222222;">reject()</code>, передавая ему сообщение ошибки. До того, как промис станет исполненным или отклоненным, он находится в состоянии&nbsp;<span style="font-weight: bold;">ожидания</span>.</p>\r\n<p>&nbsp;</p>\r\n<p style="margin: 0px; padding: 0px; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Вот промис версия XMLHttpRequest -</p>\r\n<p>&nbsp;</p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="hljs javascript" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;"><span class="hljs-comment" style="color: #999988; font-style: italic;">/* CREDIT - Jake Archibald, http://www.html5rocks.com/en/tutorials/es6/promises/ */</span>\r\n\r\n<span class="hljs-function"><span class="hljs-keyword" style="font-weight: bold;">function</span> <span class="hljs-title" style="color: #990000; font-weight: bold;">get</span>(<span class="hljs-params">url</span>) </span>{  \r\n  <span class="hljs-keyword" style="font-weight: bold;">return</span> <span class="hljs-keyword" style="font-weight: bold;">new</span> <span class="hljs-built_in" style="color: #0086b3;">Promise</span>(<span class="hljs-function"><span class="hljs-keyword" style="font-weight: bold;">function</span>(<span class="hljs-params">resolve, reject</span>) </span>{\r\n\r\n    <span class="hljs-keyword" style="font-weight: bold;">var</span> req = <span class="hljs-keyword" style="font-weight: bold;">new</span> XMLHttpRequest();\r\n    req.open(<span class="hljs-string" style="color: #dd1144;">\'GET\'</span>, url);\r\n\r\n    req.onload = <span class="hljs-function"><span class="hljs-keyword" style="font-weight: bold;">function</span>() </span>{\r\n      <span class="hljs-keyword" style="font-weight: bold;">if</span> (req.status == <span class="hljs-number" style="color: teal;">200</span>) { \r\n          resolve(req.response); <span class="hljs-comment" style="color: #999988; font-style: italic;">/* ПРОМИС ВЫПОЛНЕН */</span>\r\n      } <span class="hljs-keyword" style="font-weight: bold;">else</span> { \r\n          reject(<span class="hljs-built_in" style="color: #0086b3;">Error</span>(req.statusText)); <span class="hljs-comment" style="color: #999988; font-style: italic;">/* ПРОМИС ОТКЛОНЁН */</span>\r\n      }\r\n    };\r\n\r\n    req.onerror = <span class="hljs-function"><span class="hljs-keyword" style="font-weight: bold;">function</span>() </span>{ reject(<span class="hljs-built_in" style="color: #0086b3;">Error</span>(<span class="hljs-string" style="color: #dd1144;">"Network Error"</span>)); };\r\n    req.send();\r\n  });\r\n}</code></pre>\r\n<p>&nbsp;</p>\r\n<h3 id="ispolzovanie-promisov" style="font-family: Verdana, sans-serif; font-size: 19.25px; margin: 0px; font-weight: 400; padding: 0px; background-color: #ffffff;">Использование промисов</h3>\r\n<p>&nbsp;</p>\r\n<p style="margin: 0px; padding: 0px; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Что бы выполнить промис, мы можем вызвать его как любую обычную функцию. Но, так как это промис, у нас есть доступ к&nbsp;<code style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 1em; color: #222222;">.then</code>&nbsp;методу, который мы можем добавить к функции и который будет исполнен когда промис выйдет из режима ожидания.</p>\r\n<p>&nbsp;</p>\r\n<p style="margin: 0px; padding: 0px; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;"><code style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 1em; color: #222222;">.then()</code>&nbsp;метод принимает два необязательных параметра. Первый &mdash; это функция, которая вызывается, когда промис исполнен(resolved). Второй &mdash; функция, которая выполняется если промис отклонён(rejected).</p>\r\n<p>&nbsp;</p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="hljs actionscript" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;"><span class="hljs-keyword" style="font-weight: bold;">get</span>(url)  \r\n.then(<span class="hljs-function"><span class="hljs-keyword" style="font-weight: bold;">function</span><span class="hljs-params">(response)</span> </span>{\r\n    <span class="hljs-comment" style="color: #999988; font-style: italic;">/* successFunction */</span>\r\n}, <span class="hljs-function"><span class="hljs-keyword" style="font-weight: bold;">function</span><span class="hljs-params">(err)</span> </span>{\r\n    <span class="hljs-comment" style="color: #999988; font-style: italic;">/* errorFunction */</span>\r\n})</code></pre>\r\n<p>&nbsp;</p>\r\n<p style="margin: 0px; padding: 0px; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;"><img style="border-style: none; max-width: 100%; vertical-align: middle;" src="https://bitsofco.de/content/images/2016/06/Using-Promises.png" alt=".then" /></p>\r\n<p>&nbsp;</p>\r\n<h3 id="obrabotka-oshibok" style="font-family: Verdana, sans-serif; font-size: 19.25px; margin: 0px; font-weight: 400; padding: 0px; background-color: #ffffff;">Обработка ошибок</h3>\r\n<p>&nbsp;</p>\r\n<p style="margin: 0px; padding: 0px; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Так как оба параметра (successFunction и errorFunction) опциональны, мы можем разделить их на два&nbsp;<code style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 1em; color: #222222;">.then()</code>&nbsp;для лучшей читаемости.</p>\r\n<p>&nbsp;</p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="hljs actionscript" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;"><span class="hljs-keyword" style="font-weight: bold;">get</span>(url)  \r\n.then(<span class="hljs-function"><span class="hljs-keyword" style="font-weight: bold;">function</span><span class="hljs-params">(response)</span> </span>{\r\n    <span class="hljs-comment" style="color: #999988; font-style: italic;">/* successFunction */</span>\r\n}, <span class="hljs-literal" style="color: teal;">undefined</span>)\r\n.then(<span class="hljs-literal" style="color: teal;">undefined</span>, <span class="hljs-function"><span class="hljs-keyword" style="font-weight: bold;">function</span><span class="hljs-params">(err)</span> </span>{\r\n    <span class="hljs-comment" style="color: #999988; font-style: italic;">/* errorFunction */</span>\r\n})</code></pre>\r\n<p>&nbsp;</p>\r\n<p style="margin: 0px; padding: 0px; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Что бы сделать код еще более понятным, мы можем использовать&nbsp;<code style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 1em; color: #222222;">.catch()</code>&nbsp;метод, который является сокращенным вариантом для&nbsp;<code style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 1em; color: #222222;">.then(undefined, errorFunction)</code></p>\r\n<p>&nbsp;</p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="hljs actionscript" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;"><span class="hljs-keyword" style="font-weight: bold;">get</span>(url)  \r\n.then(<span class="hljs-function"><span class="hljs-keyword" style="font-weight: bold;">function</span><span class="hljs-params">(response)</span> </span>{\r\n    <span class="hljs-comment" style="color: #999988; font-style: italic;">/* successFunction */</span>\r\n})\r\n.<span class="hljs-keyword" style="font-weight: bold;">catch</span>(<span class="hljs-function"><span class="hljs-keyword" style="font-weight: bold;">function</span><span class="hljs-params">(err)</span> </span>{\r\n    <span class="hljs-comment" style="color: #999988; font-style: italic;">/* errorFunction */</span>\r\n})</code></pre>\r\n<p>&nbsp;</p>\r\n<p style="margin: 0px; padding: 0px; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;"><img style="border-style: none; max-width: 100%; vertical-align: middle;" src="https://bitsofco.de/content/images/2016/06/Error-Handling.png" alt=".catch" /></p>\r\n<p>&nbsp;</p>\r\n<h3 id="formirovanie-cepi" style="font-family: Verdana, sans-serif; font-size: 19.25px; margin: 0px; font-weight: 400; padding: 0px; background-color: #ffffff;">Формирование цепи</h3>\r\n<p>&nbsp;</p>\r\n<p style="margin: 0px; padding: 0px; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Настоящая ценность промисов заключается в том, что мы можем выполнять несколько асинхронных функций по порядку. Мы можем объединить&nbsp;<code style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 1em; color: #222222;">.then()</code>&nbsp;и&nbsp;<code style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 1em; color: #222222;">.catch()</code>&nbsp;вместе для создания последовательности асинхронных функций.</p>\r\n<p>&nbsp;</p>\r\n<p style="margin: 0px; padding: 0px; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Мы можем сделать это, возвращая еще один промис после выполнения или отклонения предыдущего. Например -</p>\r\n<p>&nbsp;</p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="hljs actionscript" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;"><span class="hljs-keyword" style="font-weight: bold;">get</span>(url)  \r\n.then(<span class="hljs-function"><span class="hljs-keyword" style="font-weight: bold;">function</span><span class="hljs-params">(response)</span> </span>{\r\n    response = JSON.parse(response);\r\n    <span class="hljs-keyword" style="font-weight: bold;">var</span> secondURL = response.data.url\r\n    <span class="hljs-keyword" style="font-weight: bold;">return</span> <span class="hljs-keyword" style="font-weight: bold;">get</span>( secondURL ); <span class="hljs-comment" style="color: #999988; font-style: italic;">/* Возвращаем новый промис */</span>\r\n})\r\n.then(<span class="hljs-function"><span class="hljs-keyword" style="font-weight: bold;">function</span><span class="hljs-params">(response)</span> </span>{\r\n    response = JSON.parse(response);\r\n    <span class="hljs-keyword" style="font-weight: bold;">var</span> thirdURL = response.data.url\r\n    <span class="hljs-keyword" style="font-weight: bold;">return</span> <span class="hljs-keyword" style="font-weight: bold;">get</span>( thirdURL ); <span class="hljs-comment" style="color: #999988; font-style: italic;">/* Возвращаем новый промис */</span>\r\n})\r\n.<span class="hljs-keyword" style="font-weight: bold;">catch</span>(<span class="hljs-function"><span class="hljs-keyword" style="font-weight: bold;">function</span><span class="hljs-params">(err)</span> </span>{\r\n    handleError(err);\r\n});</code></pre>\r\n<p>&nbsp;</p>\r\n<p style="margin: 0px; padding: 0px; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Если промис исполнен(resolved), то вызовется ближайший&nbsp;<code style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 1em; color: #222222;">.then()</code>&nbsp;в последовательности. Если промис отклонён(rejected), то ближайший&nbsp;<code style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 1em; color: #222222;">.catch()</code>&nbsp;в последовательности.<br /><img style="border-style: none; max-width: 100%; vertical-align: middle;" src="https://bitsofco.de/content/images/2016/07/Chaining-Copy-1.png" alt="chaining" /></p>\r\n<p>&nbsp;</p>\r\n<h3 id="paralellnoe-vypolnenie-promisov" style="font-family: Verdana, sans-serif; font-size: 19.25px; margin: 0px; font-weight: 400; padding: 0px; background-color: #ffffff;">Паралелльное выполнение промисов</h3>\r\n<p>&nbsp;</p>\r\n<p style="margin: 0px; padding: 0px; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Может возникнуть ситуация, когда нам понадобится выполнить несколько промисов параллельно, и продолжать алгоритм только после того, как все промисы будут выполнены. Например, если мы хотим получить ряд изображений и только после этого отобразить их на странице.</p>\r\n<p>&nbsp;</p>\r\n<p style="margin: 0px; padding: 0px; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Чтобы это сделать, нам необходимо использовать два метода. Это&nbsp;<code style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 1em; color: #222222;">Array.map()</code>, для того, что бы применить промис для каждого элемента массива и сохранить результат в новый массив. И&nbsp;<code style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 1em; color: #222222;">Promise.all()</code>, который выполнит&nbsp;<code style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 1em; color: #222222;">resolve()</code>&nbsp;в случае исполнения всех промисов в массиве. Если хоть один промис в массиве будет отклонен,&nbsp;<code style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 1em; color: #222222;">Promise.all()</code>&nbsp;тоже будет отклонён.</p>\r\n<p>&nbsp;</p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="hljs actionscript" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;"><span class="hljs-keyword" style="font-weight: bold;">var</span> arrayOfURLs = [<span class="hljs-string" style="color: #dd1144;">\'one.json\'</span>, <span class="hljs-string" style="color: #dd1144;">\'two.json\'</span>, <span class="hljs-string" style="color: #dd1144;">\'three.json\'</span>, <span class="hljs-string" style="color: #dd1144;">\'four.json\'</span>];  \r\n<span class="hljs-keyword" style="font-weight: bold;">var</span> arrayOfPromises = arrayOfURLs.map(<span class="hljs-keyword" style="font-weight: bold;">get</span>);\r\n\r\nPromise.all(arrayOfPromises)  \r\n.then(<span class="hljs-function"><span class="hljs-keyword" style="font-weight: bold;">function</span><span class="hljs-params">(arrayOfResults)</span> </span>{\r\n    <span class="hljs-comment" style="color: #999988; font-style: italic;">/* Сделать что-нибудь, когда все промисы в массиве зарезолвятся */</span>\r\n})\r\n.<span class="hljs-keyword" style="font-weight: bold;">catch</span>(<span class="hljs-function"><span class="hljs-keyword" style="font-weight: bold;">function</span><span class="hljs-params">(err)</span> </span>{\r\n    <span class="hljs-comment" style="color: #999988; font-style: italic;">/* Выполняется, если хоть один промис в массиве отклонён */</span>\r\n})</code></pre>\r\n<p>&nbsp;</p>\r\n<p style="margin: 0px; padding: 0px; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;"><img style="border-style: none; max-width: 100%; vertical-align: middle;" src="https://bitsofco.de/content/images/2016/06/Parallel-.png" alt="Promise.all" /><br />Если мы посмотрим в сетевую панель (Network panel) инструментов разработки (Development tools), мы увидим, что все запросы случаются параллельно.</p>\r\n<p>&nbsp;</p>\r\n<p style="margin: 0px; padding: 0px; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;"><img style="border-style: none; max-width: 100%; vertical-align: middle;" src="https://bitsofco.de/content/images/2016/07/Network-Requests-in-Parallel.png" alt="Development Tools" /></p>\r\n<p>&nbsp;</p>\r\n<p style="margin: 0px; padding: 0px; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Если вам нужна поддержка IE и/или Opera Mini, используйте&nbsp;<a style="background-color: transparent; color: #990099; text-decoration: none;" href="https://github.com/taylorhakes/promise-polyfill">полифил</a>.<br />Спасибо за внимание!</p>', '2016-09-01 19:00:47', '2016-10-23 15:14:55', 4, 4, NULL),
	(13, 'Ежедневная работа с Git', 'Ежедневная работа с Git', 'fa4922d566f0aba9b64d8a09184a6d4c.png', 'ezhednevnaya-rabota-s-git', '<p><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Я совсем не долго изучаю и использую git практически везде, где только можно. Однако, за это время я успел многому научиться и хочу поделиться своим опытом с сообществом.&nbsp;</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Я постараюсь донести основные идеи, показать как эта VCS помогает разрабатывать проект. Надеюсь, что после прочтения вы сможете ответить на вопросы:&nbsp;</span></p>\r\n<ul style="margin: 0px 0px 0px 20px; padding: 0px; list-style-position: outside; list-style-image: initial; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">\r\n<li style="margin-left: 20px;">можно ли git &laquo;подстроить&raquo; под тот процесс разработки, который мне нужен?</li>\r\n<li style="margin-left: 20px;">будет ли менеджер и заказчик удовлетворён этим процессом?</li>\r\n<li style="margin-left: 20px;">будет ли легко работать разработчикам?</li>\r\n<li style="margin-left: 20px;">смогут ли новички быстро включиться в процесс?</li>\r\n<li style="margin-left: 20px;">можно ли процесс относительно легко и быстро изменить?</li>\r\n</ul>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Конечно, я попытаюсь рассказать обо всём по-порядку, начиная с основ. Поэтому, эта статья будет крайне полезна тем, кто только начинает или хочет разобраться с git. Более опытные читатели, возможно, найдут для себя что-то новое, укажут на ошибки или поделятся советом.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><a style="background-color: #ffffff; color: #6da3bd; font-family: Verdana, sans-serif; font-size: 14px;" name="habracut"></a><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /></p>\r\n<h4 style="font-family: Verdana, sans-serif; font-size: 16.8px; margin: 0px; font-weight: 400; padding: 0px; background-color: #ffffff;">Вместо плана</h4>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Очень часто, для того чтобы с чем-то начать я изучаю целую кучу материалов, а это &mdash; разные люди, разные компании, разные подходы. Всё это требует много времени на анализ и на понимание того, подойдёт ли что-нибудь мне? Позже, когда приходит понимание, что универсальное решение отсутствует, появляются совершенно другие требования к системе контроля версий и к разработке.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Итак, выделю основные шаги:</span></p>\r\n<ul style="margin: 0px 0px 0px 20px; padding: 0px; list-style-position: outside; list-style-image: initial; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">\r\n<li style="margin-left: 20px;"><a style="background-color: transparent; color: #990099; text-decoration: none;" href="https://habrahabr.ru/post/174467/#environment">Окружение</a></li>\r\n<li style="margin-left: 20px;"><a style="background-color: transparent; color: #990099; text-decoration: none;" href="https://habrahabr.ru/post/174467/#getstarted">Перестаём бояться экспериментировать</a></li>\r\n<li style="margin-left: 20px;"><a style="background-color: transparent; color: #990099; text-decoration: none;" href="https://habrahabr.ru/post/174467/#buildingrepo">Строим репозитории</a></li>\r\n<li style="margin-left: 20px;"><a style="background-color: transparent; color: #990099; text-decoration: none;" href="https://habrahabr.ru/post/174467/#gitbegin">Начало GIT</a></li>\r\n<li style="margin-left: 20px;"><a style="background-color: transparent; color: #990099; text-decoration: none;" href="https://habrahabr.ru/post/174467/#gotoproject">Включаемся в проект</a></li>\r\n<li style="margin-left: 20px;"><a style="background-color: transparent; color: #990099; text-decoration: none;" href="https://habrahabr.ru/post/174467/#typicalscenario">Типичные сценарии при работе над проектом</a></li>\r\n</ul>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /></p>\r\n<h4 style="font-family: Verdana, sans-serif; font-size: 16.8px; margin: 0px; font-weight: 400; padding: 0px; background-color: #ffffff;">Окружение</h4>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><a style="background-color: #ffffff; color: #6da3bd; font-family: Verdana, sans-serif; font-size: 14px;" name="environment"></a><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Для работы нам нужно:</span></p>\r\n<ol style="margin: 0px 0px 0px 20px; padding: 0px; list-style-position: outside; list-style-image: initial; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">\r\n<li style="margin-left: 20px;">Git</li>\r\n<li style="margin-left: 20px;">Консоль</li>\r\n<li style="margin-left: 20px;">Человек по ту сторону монитора, который сумеет это всё поставить под свою любимую ось</li>\r\n</ol>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">На текущим момент моё окружение это Debian + KDE + Git + Bash + GitK + KDiff3.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Если вы обнаружили на своём компьютере Windows, то у вас скорее всего будет Windows + msysgit (git-bash) + TortoiseGit и т.д.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Если вы открываете консоль, пишите&nbsp;</span><code style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 14px; color: #222222; background-color: #ffffff;">git</code><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;и получаете вот это:</span></p>\r\n<div class="spoiler" style="overflow: hidden; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;"><span class="spoiler_title" style="color: #6da3bd; cursor: pointer; border-bottom: 1px dashed;">справка git</span></div>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Значит вы готовы.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /></p>\r\n<h4 style="font-family: Verdana, sans-serif; font-size: 16.8px; margin: 0px; font-weight: 400; padding: 0px; background-color: #ffffff;">Перестаём бояться экспериментировать</h4>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><a style="background-color: #ffffff; color: #6da3bd; font-family: Verdana, sans-serif; font-size: 14px;" name="getstarted"></a><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Наверняка, большинство команд уже где-то подсмотрено, какие-то статьи прочитаны, вы хотите приступить но боитесь ввести не ту команду или что-то поломать. А может ещё ничего и не изучено. Тогда просто помните вот это:</span></p>\r\n<blockquote style="padding-left: 15px; margin: 0.83em 0px; clear: both; border-left: 2px solid #bbbbbb; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Вы можете делать всё что угодно, выполнять любые команды, ставить эксперименты, удалять, менять. Главное не делайте&nbsp;<code style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 1em; color: #222222;">git push</code>.<br />Только эта команда передаёт изменения в другой репозиторий. Только так можно что-то сломать.</blockquote>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Строго говоря, даже неудачный git push можно исправить.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Поэтому, спокойно можете клонировать любой репозиторий и начать изучение.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /></p>\r\n<h4 style="font-family: Verdana, sans-serif; font-size: 16.8px; margin: 0px; font-weight: 400; padding: 0px; background-color: #ffffff;">Строим репозитории</h4>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><a style="background-color: #ffffff; color: #6da3bd; font-family: Verdana, sans-serif; font-size: 14px;" name="buildingrepo"></a><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">В первую очередь нужно понять что такое git-репозиторий? Ответ очень прост: это набор файлов. Папка `.git`. Важно понимать, что это только набор файлов и ничего больше. Раз 20 наблюдал проблему у коллег с авторизацией в github/gitlab. Думая, что это часть git-системы, они пытались искать проблему в конфигруации git, вызывать какие-то git-команды.&nbsp;</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">А если это просто файлы, то к ним нужно как-то получить доступ, иметь возможность оттуда читать и туда писать? Да! Я называю это &laquo;транспортом&raquo;. Это может и некорректно, но мне так было удобно запомнить. Более правильный вариант: &laquo;Протокол передачи данных&raquo;. Самые распространённые варианты:</span></p>\r\n<ol style="margin: 0px 0px 0px 20px; padding: 0px; list-style-position: outside; list-style-image: initial; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">\r\n<li style="margin-left: 20px;">FILE &mdash; мы имеем прямой доступ к файлам репозитория.</li>\r\n<li style="margin-left: 20px;">SSH &mdash; мы имеем доступ к файлам на сервере через ssh.</li>\r\n<li style="margin-left: 20px;">HTTP(S) &mdash; используем http в качестве приёма/передачи.</li>\r\n</ol>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Вариантов намного больше. Не важно какой транспорт будет использован, важно чтобы был доступ на чтение или чтение/запись к файлам.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Поэтому, если вы никак не можете клонировать репозиторий с github, и нет в логах никаких подсказок, возможно у вас проблема с транспортом.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">В частности, при клонировании вот так:</span></p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="bash hljs" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;">git <span class="hljs-built_in" style="color: #0086b3;">clone</span> git@github.com:user/repo.git\r\n</code></pre>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">урл &laquo;превращается&raquo; в&nbsp;</span></p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="bash hljs" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;">git <span class="hljs-built_in" style="color: #0086b3;">clone</span> ssh://git@github.com:user/repo.git\r\n</code></pre>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Т.е. используется SSH и проблемы нужно искать в нём. Как правило, это неправильно настроенный или не найденный ssh-ключ. Гуглить надо в сторону &laquo;SSH Auth Key git&raquo; или, если совсем по взрослому, проверить, что же происходит:</span></p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="bash hljs" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;">ssh -vvv git@github.com\r\n</code></pre>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Какие протоколы поддерживаются поможет справка (раздел GIT URLS):</span></p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="bash hljs" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;">git <span class="hljs-built_in" style="color: #0086b3;">clone</span> --help\r\n</code></pre>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Репозиторий можно клонировать, но для начала поиграемся со своими:</span></p>\r\n<ol style="margin: 0px 0px 0px 20px; padding: 0px; list-style-position: outside; list-style-image: initial; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">\r\n<li style="margin-left: 20px;">Придумаем свой удалённый репозиторий</li>\r\n<li style="margin-left: 20px;">Сделаем два клона с него, от имени разработчиков (dev1 и dev2)</li>\r\n</ol>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><img style="border-style: none; max-width: 100%; vertical-align: middle; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" src="https://habrastorage.org/storage2/a88/da1/333/a88da133358dbf445d4c319d4ee0c65e.png" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Кроме самого репозитория есть ещё и&nbsp;</span><span style="font-weight: bold; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">workspace</span><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">, где хранятся файлы с которыми вы работаете. Именно в этой папке лежит сам репозиторий (папка .git ). На серверах рабочие файлы не нужны, поэтому там хранятся только голые репозитории (bare-repo).</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Сделаем себе один (будет нашим главным тестовым репозиторием):</span></p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="bash hljs" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;">$ mkdir git-habr    <span class="hljs-comment" style="color: #999988; font-style: italic;">#создадим папку, чтоб не мусорить</span>\r\n$ <span class="hljs-built_in" style="color: #0086b3;">cd</span> git-habr\r\n$ git init --bare origin\r\nInitialized empty Git repository <span class="hljs-keyword" style="font-weight: bold;">in</span> /home/sirex/proj/git-habr/origin/\r\n</code></pre>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Теперь клонируем его от имени разработчиков. Тут есть только один нюанс, которого не будет при работе с сервером: git, понимая, что репозитории локальные и находятся на одном разделе, будет создавать ссылки, а не делать полную копию. А нам для изучения нужна полная копия. Для этого можно воспользоваться ключом&nbsp;</span><code style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 14px; color: #222222; background-color: #ffffff;">--no-hardlinks</code><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;или явно указать протокол:</span></p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="bash hljs" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;">$ git <span class="hljs-built_in" style="color: #0086b3;">clone</span> --no-hardlinks origin dev1\r\nCloning into <span class="hljs-string" style="color: #dd1144;">\'dev1\'</span>...\r\nwarning: You appear to have cloned an empty repository.\r\ndone.\r\n$ git <span class="hljs-built_in" style="color: #0086b3;">clone</span> --no-hardlinks origin dev2\r\nCloning into <span class="hljs-string" style="color: #dd1144;">\'dev2\'</span>...                                                                                                                                                                                                                                                         \r\nwarning: You appear to have cloned an empty repository.                                                                                                                                                                                                                        \r\ndone.\r\n</code></pre>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Итог: у нас есть 3 репозитория. Там ничего нет, зато они готовы к работе.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /></p>\r\n<h4 style="font-family: Verdana, sans-serif; font-size: 16.8px; margin: 0px; font-weight: 400; padding: 0px; background-color: #ffffff;">Начало GIT</h4>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><a style="background-color: #ffffff; color: #6da3bd; font-family: Verdana, sans-serif; font-size: 14px;" name="gitbegin"></a><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /></p>\r\n<h5 style="padding: 0px; margin: 0px; font-family: Verdana, sans-serif; font-weight: 400; font-size: 15.4px; background-color: #ffffff;">Скандалы! Интриги! Расследования!</h5>\r\n<p>&nbsp;</p>\r\n<ul style="margin: 0px 0px 0px 20px; padding: 0px; list-style-position: outside; list-style-image: initial; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">\r\n<li style="margin-left: 20px;">Git не хранит папки</li>\r\n<li style="margin-left: 20px;">Git не хранит файлы</li>\r\n<li style="margin-left: 20px;">Ревизии (Revision) не имеют порядкового номера</li>\r\n<li style="margin-left: 20px;">Редакции (правки, commits) могут идти не по-порядку</li>\r\n<li style="margin-left: 20px;">В Git нет веток*&nbsp;<em>(с небольшой оговоркой)</em></li>\r\n</ul>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Можно дальше продолжить список, но и этого уже достаточно, чтобы задать вполне закономерные вопросы:</span></p>\r\n<blockquote style="padding-left: 15px; margin: 0.83em 0px; clear: both; border-left: 2px solid #bbbbbb; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Как это всё работает?<br />Как это всё можно понять и запомнить?</blockquote>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Для этого нужно заглянуть под капот. Рассмотрим всё в общих чертах.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /></p>\r\n<h5 style="padding: 0px; margin: 0px; font-family: Verdana, sans-serif; font-weight: 400; font-size: 15.4px; background-color: #ffffff;">Git. Почти под капотом</h5>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Git сохраняет в commit содержимое всех файлов (делает слепки содержимого каждого файла и сохраняет в objects). Если файл не менялся, то будет использован старый object. Таким образом, в commit в виде новых объектов попадут только&nbsp;</span><span style="font-weight: bold; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">изменённые файлы</span><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">, что позволит хорошо экономить место на диске и даст возможность быстро переключиться на любой commit.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Это позволяет понять, почему работают вот такие вот забавные штуки:</span></p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="bash hljs" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;">$ git init /tmp/<span class="hljs-built_in" style="color: #0086b3;">test</span>\r\nInitialized empty Git repository <span class="hljs-keyword" style="font-weight: bold;">in</span> /tmp/<span class="hljs-built_in" style="color: #0086b3;">test</span>/.git/ \r\n$ <span class="hljs-built_in" style="color: #0086b3;">cd</span> /tmp/<span class="hljs-built_in" style="color: #0086b3;">test</span>\r\n$ cp ~/debian.iso .    <span class="hljs-comment" style="color: #999988; font-style: italic;"># iso весит 168 метров</span>\r\n$ du -sh .git   <span class="hljs-comment" style="color: #999988; font-style: italic;">#считаем размер папки .git</span>\r\n92K     .git\r\n$ git add debian.iso\r\n$ git commit -m <span class="hljs-string" style="color: #dd1144;">"Added iso"</span>\r\n[master (root-commit) 0fcc821] added iso\r\n 1 file changed, 0 insertions(+), 0 deletions(-)\r\n create mode 100644 debian.iso\r\n$ du -sh .git   <span class="hljs-comment" style="color: #999988; font-style: italic;">#опять считаем</span>\r\n163M    .git \r\n<span class="hljs-comment" style="color: #999988; font-style: italic;"># Добавилось. Копируем файлы под другим именем (но то же содержание)</span>\r\n$ cp debian.iso debian2.iso\r\n$ cp debian.iso debian3.iso\r\n$ git add debian2.iso debian3.iso\r\n$ git commit -m <span class="hljs-string" style="color: #dd1144;">"Copied iso"</span>\r\n[master f700ab5] copied iso\r\n 2 files changed, 0 insertions(+), 0 deletions(-)\r\n create mode 100644 debian2.iso\r\n create mode 100644 debian3.iso\r\n$ du -sh .git  <span class="hljs-comment" style="color: #999988; font-style: italic;">#опять считаем</span>\r\n163M    .git  <span class="hljs-comment" style="color: #999988; font-style: italic;">#место почти не изменилось. Это всё тот же объект, просто у него разные имена.</span>\r\n</code></pre>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Да, не стоит хранить &laquo;тяжёлые&raquo; файлы, бинарники и прочее без явной необходимости. Они там останутся навсегда и будут в каждом клоне репозитория.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Каждый коммит может имеет несколько коммитов-предков и несколько дочерних-коммитов:</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><img style="border-style: none; max-width: 100%; vertical-align: middle; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" src="https://habrastorage.org/storage2/704/6ab/9e7/7046ab9e7b5a8da800763ba268880dbf.png" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Мы можем переходить (восстанавливать любое состояние) в любую точку этого дерева, а точнее, графа. Для этого используется git checkout:</span></p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="bash hljs" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;">git checkout &lt;commit&gt;\r\n</code></pre>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Каждое слияние двух и более коммитов в один &mdash; это merge (объединение двух и более наборов изменений).&nbsp;</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Каждое разветвление &mdash; это появление нескольких вариантов изменений.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /></p>\r\n<blockquote style="padding-left: 15px; margin: 0.83em 0px; clear: both; border-left: 2px solid #bbbbbb; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Кстати, тут хочется отметить, что нельзя сделать тэг на файл/папку, на часть проекта и т.д. Состояние восстанавливается только целиком. Поэтому, рекомендуется держать проекты в отдельном репозитории, а не складывать Project1, Project2 и т.д. просто в корень.</blockquote>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Теперь к веткам. Выше я написал:</span></p>\r\n<blockquote style="padding-left: 15px; margin: 0.83em 0px; clear: both; border-left: 2px solid #bbbbbb; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">В Git нет веток*&nbsp;<em>(с небольшой оговоркой)</em></blockquote>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Получается, что так и есть: у нас есть много коммитов, которые образуют граф. Выбираем любой путь от parent-commit к любому child-commit и получаем состояние проекта на этот коммит. Чтобы коммит &laquo;запомнить&raquo; можно создать на него именованный указатель.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Такой именованный указатель и есть ветка (branch). Так же и с тэгом (tag). `HEAD` работает по такому же принципу &mdash; показывает, где мы есть сейчас. Новые коммиты являются продолжением текущей ветки (туда же куда и смотрит HEAD).</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Указатели можно свободно перемещать на любой коммит, если это не tag. Tag для того и сделан, чтобы раз и навсегда запомнить коммит и никуда не двигаться. Но его можно удалить.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Вот, пожалуй, и всё, что нужно знать из теории на первое время при работе с git. Остальные вещи должны показаться теперь более понятными.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /></p>\r\n<h5 style="padding: 0px; margin: 0px; font-family: Verdana, sans-serif; font-weight: 400; font-size: 15.4px; background-color: #ffffff;">Терминология</h5>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-weight: bold; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">index</span><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;&mdash; область зафиксированных изменений, т.е. всё то, что вы подготовили к сохранению в репозиторий.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-weight: bold; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">commit</span><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;&mdash; изменения, отправленные в репозиторий.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-weight: bold; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">HEAD</span><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;&mdash; указатель на commit, в котором мы находимся.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-weight: bold; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">master</span><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;&mdash; имя ветки по-умолчанию, это тоже указатель на определённый коммит</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-weight: bold; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">origin</span><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;&mdash; имя удалённого репозитория по умолчанию (можно дать другое)</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-weight: bold; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">checkout</span><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;&mdash; взять из репозитория какое-либо его состояние.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /></p>\r\n<h5 style="padding: 0px; margin: 0px; font-family: Verdana, sans-serif; font-weight: 400; font-size: 15.4px; background-color: #ffffff;">Простые правки</h5>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Есть две вещи которые должны быть у вас под рукой всегда:</span></p>\r\n<ol style="margin: 0px 0px 0px 20px; padding: 0px; list-style-position: outside; list-style-image: initial; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">\r\n<li style="margin-left: 20px;">git status</li>\r\n<li style="margin-left: 20px;">gitk</li>\r\n</ol>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Если вы сделали что-то не так, запутались, не знаете, что происходит &mdash; эти две команды вам помогут.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><code style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 14px; color: #222222; background-color: #ffffff;">git status</code><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;&mdash; показывает состояние вашего репозитория (рабочей копии) и где вы находитесь.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><code style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 14px; color: #222222; background-color: #ffffff;">gitk</code><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;&mdash; графическая утилита, которая показывает наш граф. В качестве ключей передаём имена веток или&nbsp;</span><code style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 14px; color: #222222; background-color: #ffffff;">--all</code><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">, чтобы показать все.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Вернёмся к нашим репозиториям, которые создали раньше. Далее обозначу, что один разработчик работает в dev1$, а второй в dev2$.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Добавим README.md:</span></p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="bash hljs" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;">dev1$ vim README.md\r\ndev1$ git add README.md\r\ndev1$ git commit -m <span class="hljs-string" style="color: #dd1144;">"Init Project"</span>\r\n[master (root-commit) e30cde5] Init Project\r\n 1 file changed, 4 insertions(+)\r\n create mode 100644 README.md\r\ndev1$ git status\r\n<span class="hljs-comment" style="color: #999988; font-style: italic;"># On branch master</span>\r\nnothing to commit (working directory clean)\r\n</code></pre>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Поделимся со всеми. Но поскольку мы клонировали пустой репозиторий, то git по умолчанию не знает в какое место добавить коммит.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Он нам это подскажет:</span></p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="bash hljs" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;">dev1$ git push origin\r\nNo refs <span class="hljs-keyword" style="font-weight: bold;">in</span> common and none specified; doing nothing.\r\nPerhaps you should specify a branch such as <span class="hljs-string" style="color: #dd1144;">\'master\'</span>.\r\nfatal: The remote end hung up unexpectedly\r\nerror: failed to push some refs to <span class="hljs-string" style="color: #dd1144;">\'/home/sirex/proj/git-habr/origin\'</span>\r\ndev1$ git push origin master \r\nCounting objects: 3, done.\r\nWriting objects: 100% (3/3), 239 bytes, done.\r\nTotal 3 (delta 0), reused 0 (delta 0)\r\nUnpacking objects: 100% (3/3), done.\r\nTo /home/sirex/proj/git-habr/origin\r\n * [new branch]      master -&gt; master\r\n</code></pre>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Второй разработчик может получить эти изменения, сделав pull:</span></p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="bash hljs" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;">dev2$ git pull\r\nremote: Counting objects: 3, done.\r\nremote: Total 3 (delta 0), reused 0 (delta 0)\r\nUnpacking objects: 100% (3/3), done.\r\nFrom /home/sirex/proj/git-habr/origin\r\n * [new branch]      master     -&gt; origin/master\r\n</code></pre>\r\n<p>&nbsp;</p>', '2016-09-01 19:00:47', '2016-10-23 14:42:30', 9, 5, NULL),
	(14, 'Темная сторона TypeScript — @декораторы на примерах', 'Темная сторона TypeScript — @декораторы на примерах', 'f50dea7044599c2becd645cfb70847a0.jpg', 'temnaya-storona-typescript-dekoratori-na-primerah', '<p style="margin: 0px; padding: 0px; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Декораторы &mdash; это невероятно круто. Они позволяют описывать мета информацию прямо в объявлении класса, группируя все в одном месте и избегая дублирования. Ужасно удобно. Однажды попробовав, вы уже никогда не согласитесь писать по-старому.</p>\r\n<p>&nbsp;</p>\r\n<p style="margin: 0px; padding: 0px; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Однако, несмотря на всю полезность, декораторы в TypeScript (<a style="background-color: transparent; color: #990099; text-decoration: none;" href="https://github.com/tc39/proposal-decorators">заявлены</a>&nbsp;также на стандарт) не так просты, как хотелось бы. Работа с ними требует навыков джедая, так как необходимо разбираться в&nbsp;<a style="background-color: transparent; color: #990099; text-decoration: none;" href="https://habrahabr.ru/company/enterra/blog/153365/">объектной модели JavaScript</a>&nbsp;(ну, вы поняли, о чем я), API несколько запутанный и, к тому же, еще не стабильный. В этой статье я немного расскажу об устройстве декораторов и покажу несколько конкретных приемов, как поставить эту темную силу на благо front-end разработки.</p>\r\n<p>&nbsp;</p>\r\n<p style="margin: 0px; padding: 0px; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Помимо TypeScript, декораторы&nbsp;<a style="background-color: transparent; color: #990099; text-decoration: none;" href="https://habrahabr.ru/post/277021/">доступны в Babel</a>. В этой статье рассматривается только реализация в TypeScript.</p>\r\n<p>&nbsp;</p>\r\n<div style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff; text-align: center;"><img style="border-style: none; max-width: 100%; vertical-align: middle;" src="https://habrastorage.org/files/e86/fb8/fbc/e86fb8fbcba9404c9262c30e6f96e5a6.jpg" /></div>\r\n<p><a style="background-color: #ffffff; color: #6da3bd; font-family: Verdana, sans-serif; font-size: 14px;" name="habracut"></a><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /></p>\r\n<h2 style="font-family: Verdana, sans-serif; font-size: 21px; margin: 0px; font-weight: 400; padding: 0px; background-color: #ffffff;"><img style="border-style: none; max-width: 100%; vertical-align: middle;" src="https://habrastorage.org/files/efd/9ed/36a/efd9ed36aaf84c0abdd461d6bdf5ae5b.png" width="64" height="64" />&nbsp;&nbsp;Основы</h2>\r\n<p>&nbsp;</p>\r\n<p style="margin: 0px; padding: 0px; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Декорировать в TypeScript можно классы, методы, параметры метода, методы доступа свойства (accessors) и поля.</p>\r\n<p>&nbsp;</p>\r\n<div class="spoiler" style="overflow: hidden; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;"><span class="spoiler_title" style="color: #6da3bd; cursor: pointer; border-bottom: 1px dashed;">Почему я использую термин \'поле\', а не \'свойство\' как в официальной документации</span></div>\r\n<p>&nbsp;</p>\r\n<p style="margin: 0px; padding: 0px; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">В общем случае, декоратор &mdash; это&nbsp;<span style="font-weight: bold;">выражение</span>, предваренное символом "@", которое возвращает функцию определенного вида (<a style="background-color: transparent; color: #990099; text-decoration: none;" href="https://habrahabr.ru/company/docsvision/blog/310870/#decorator-types">разного в каждом случае</a>). Собственно, можно просто объявить такую функцию и использовать&nbsp;<span style="font-weight: bold;"><em>ее имя</em></span>&nbsp;в качестве выражения декоратора:</p>\r\n<p>&nbsp;</p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="hljs less" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;"><span class="hljs-selector-tag" style="font-weight: bold;">function</span> <span class="hljs-selector-tag" style="font-weight: bold;">MyDecorator</span>(target, propertyKey, descriptor) {\r\n    <span class="hljs-comment" style="color: #999988; font-style: italic;">// ...</span>\r\n}\r\n<span class="hljs-selector-tag" style="font-weight: bold;">class</span> <span class="hljs-selector-tag" style="font-weight: bold;">MyClass</span> {\r\n    <span class="hljs-variable" style="color: teal;">@MyDecorator</span>\r\n    myMethod() {\r\n    }\r\n}</code></pre>\r\n<p>&nbsp;</p>\r\n<p style="margin: 0px; padding: 0px; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Однако можно использовать любое другое выражение, которое вернет такую функцию. Например, можно объявить другую функцию, которая будет принимать параметрами дополнительную информацию, и возвращать соответствующую лямбду. Тогда в качестве декоратора будем использовать выражение "<span style="font-weight: bold;">вызов функции MyAdvancedDecorator</span>".</p>\r\n<p>&nbsp;</p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="hljs zephir" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;"><span class="hljs-function"><span class="hljs-keyword" style="font-weight: bold;">function</span> <span class="hljs-title" style="color: #990000; font-weight: bold;">MyAdvancedDecorator</span><span class="hljs-params">(info?: string)</span> </span>{\r\n   <span class="hljs-keyword" style="font-weight: bold;">return</span> (target, propertyKey, descriptor) =&gt; {\r\n        <span class="hljs-comment" style="color: #999988; font-style: italic;">// ..</span>\r\n   };\r\n}\r\n<span class="hljs-class"><span class="hljs-keyword" style="font-weight: bold;">class</span> <span class="hljs-title" style="color: #445588; font-weight: bold;">MyClass</span> </span>{\r\n    @MyAdvancedDecorator(<span class="hljs-string" style="color: #dd1144;">"advanced info"</span>)\r\n    myMethod() {\r\n    }\r\n}</code></pre>\r\n<p>&nbsp;</p>\r\n<p style="margin: 0px; padding: 0px; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Здесь самый обычный вызов функции, поэтому, даже если мы не передаем параметры, все равно нужно писать скобки "@MyAdvancedDecorator()". Собственно, это два основных способа объявления декораторов.</p>\r\n<p>&nbsp;</p>\r\n<p style="margin: 0px; padding: 0px; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">В процессе компиляции объявление декоратора приводит к появлению вызова нашей функции в определении класса. То есть там, где вызываются&nbsp;<code style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 1em; color: #222222;">Object.defineProperty</code>, заполняется прототип класса и все такое. Как именно это происходит &mdash; важно знать, т.к. это объясняет, когда вызывается декоратор, что представляют собой параметры нашей функции, почему они именно такие, а также что и как в декораторе можно сделать. Ниже приведен упрощенный код, в который компилируется наш класс с декоратором:</p>\r\n<p>&nbsp;</p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="hljs javascript" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;"><span class="hljs-keyword" style="font-weight: bold;">var</span> __decorateMethod = <span class="hljs-function"><span class="hljs-keyword" style="font-weight: bold;">function</span> (<span class="hljs-params">decorators, target, key</span>) </span>{\r\n    <span class="hljs-keyword" style="font-weight: bold;">var</span> descriptor = <span class="hljs-built_in" style="color: #0086b3;">Object</span>.getOwnPropertyDescriptor(target, key);\r\n    <span class="hljs-keyword" style="font-weight: bold;">for</span> (<span class="hljs-keyword" style="font-weight: bold;">var</span> i = decorators.length - <span class="hljs-number" style="color: teal;">1</span>; i &gt;= <span class="hljs-number" style="color: teal;">0</span>; i--) {\r\n        <span class="hljs-keyword" style="font-weight: bold;">var</span> decorator = decorators[i];\r\n        descriptor = decorator(target, key, descriptor) || descriptor; <span class="hljs-comment" style="color: #999988; font-style: italic;">// Вызов функции декоратора</span>\r\n    }\r\n    <span class="hljs-built_in" style="color: #0086b3;">Object</span>.defineProperty(target, key, descriptor);\r\n};\r\n\r\n<span class="hljs-comment" style="color: #999988; font-style: italic;">// Объявление класса MyClass</span>\r\n<span class="hljs-keyword" style="font-weight: bold;">var</span> MyClass = (<span class="hljs-function"><span class="hljs-keyword" style="font-weight: bold;">function</span> () </span>{\r\n    <span class="hljs-function"><span class="hljs-keyword" style="font-weight: bold;">function</span> <span class="hljs-title" style="color: #990000; font-weight: bold;">MyClass</span>() </span>{} <span class="hljs-comment" style="color: #999988; font-style: italic;">// Конструктор</span>\r\n    MyClass.prototype.myMethod = <span class="hljs-function"><span class="hljs-keyword" style="font-weight: bold;">function</span> () </span>{ }; <span class="hljs-comment" style="color: #999988; font-style: italic;">// метод myMethod</span>\r\n\r\n    <span class="hljs-comment" style="color: #999988; font-style: italic;">// Вызов декораторов</span>\r\n    __decorateMethod([\r\n        MyAdvancedDecorator(<span class="hljs-string" style="color: #dd1144;">"advanced info"</span>) <span class="hljs-comment" style="color: #999988; font-style: italic;">// Вычисление выражения декоратора, и получение функции </span>\r\n    ], MyClass.prototype, <span class="hljs-string" style="color: #dd1144;">"myMethod"</span>);\r\n    <span class="hljs-keyword" style="font-weight: bold;">return</span> MyClass;\r\n}());</code></pre>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><a style="background-color: #ffffff; color: #6da3bd; font-family: Verdana, sans-serif; font-size: 14px;" name="decorator-types"></a></p>\r\n<p style="margin: 0px; padding: 0px; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">В таблице ниже приведено описание функции для каждого вида декораторов, а также ссылки на примеры в&nbsp;<a style="background-color: transparent; color: #990099; text-decoration: none;" href="http://www.typescriptlang.org/play/">TypeScript Playground</a>, где можно посмотреть, во что точно компилируются декораторы и попробовать их в действии.</p>\r\n<p>&nbsp;</p>\r\n<table style="width: 779px; margin: 1.5em 0px; clear: both; border: 1px solid #cccccc; border-collapse: collapse; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">\r\n<tbody>\r\n<tr>\r\n<th style="padding: 0.3em; word-break: break-word; border: 1px solid #cccccc; vertical-align: top; line-height: normal;">Вид декоратора</th>\r\n<th style="padding: 0.3em; word-break: break-word; border: 1px solid #cccccc; vertical-align: top; line-height: normal;">Сигнатура функции</th>\r\n</tr>\r\n<tr>\r\n<td style="padding: 0.3em; word-break: break-word; border: 1px solid #cccccc; vertical-align: top; line-height: normal;"><a style="background-color: transparent; color: #990099; text-decoration: none;" href="http://www.typescriptlang.org/docs/handbook/decorators.html#class-decorators"><span style="font-weight: bold;">Декоратор класса</span></a><br /><a style="background-color: transparent; color: #990099; text-decoration: none;" href="http://www.typescriptlang.org/play/index.html#src=%40MyClassDecorator%0D%0Aclass%20MyClass%20%7B%0D%0A%09constructor()%20%7B%0D%0A%09%09console.info(\'it%20is%20ctor\')%3B%0D%0A%09%7D%0D%0A%7D%0D%0A%0D%0Afunction%20MyClassDecorator(target%3A%20Function)%3A%20any%20%7B%0D%0A%09console.log(target)%3B%0D%0A%09return%20target%3B%0D%0A%7D)"><em>Пример в playground</em></a><br /><br />\r\n<pre style="font-family: monospace, monospace; font-size: 1em; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px;">@MyDecorator \r\nclass MyClass {}\r\n</pre>\r\n</td>\r\n<td style="padding: 0.3em; word-break: break-word; border: 1px solid #cccccc; vertical-align: top; line-height: normal;"><span style="font-weight: bold;">function</span>&nbsp;MyDecorator&lt;TFunction extends Function&gt;(target: TFunction): TFunction {&nbsp;<br />&nbsp;&nbsp;return target;<br />}<br />\r\n<ul style="margin: 0px 0px 0px 20px; padding: 0px; list-style-position: outside; list-style-image: initial;">\r\n<li style="margin-left: 20px;"><span style="font-weight: bold;">target</span>&nbsp;&mdash; конструктор класса</li>\r\n<li style="margin-left: 20px;"><span style="font-weight: bold;">returns</span>&nbsp;&mdash; конструктор класса или null. Если вернуть конструктор, то он заменит оригинальный. При этом необходимо также настроить прототип в новом конструкторе.</li>\r\n</ul>\r\n</td>\r\n</tr>\r\n<tr>\r\n<td style="padding: 0.3em; word-break: break-word; border: 1px solid #cccccc; vertical-align: top; line-height: normal;"><a style="background-color: transparent; color: #990099; text-decoration: none;" href="http://www.typescriptlang.org/docs/handbook/decorators.html#method-decorators"><span style="font-weight: bold;">Декоратор метода</span></a><br /><a style="background-color: transparent; color: #990099; text-decoration: none;" href="http://www.typescriptlang.org/play/index.html#src=class%20MyClass%20%7B%0D%0A%09%40MyMethodDecorator%0D%0A%09myMethod()%20%7B%0D%0A%09%7D%0D%0A%7D%0D%0A%0D%0Afunction%20MyMethodDecorator(target%3A%20Object%2C%20propertyKey%3A%20string%2C%20descriptor%3A%20TypedPropertyDescriptor%3Cany%3E)%3A%20TypedPropertyDescriptor%3Cany%3E%20%7B%0D%0A%09console.log(target)%3B%0D%0A%09console.log(propertyKey)%3B%0D%0A%09console.log(descriptor)%3B%0D%0A%09return%20descriptor%3B%0D%0A%7D"><em>Пример в playground</em></a><br /><br />\r\n<pre style="font-family: monospace, monospace; font-size: 1em; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px;">class MyClass {\r\n  @MyDecorator\r\n  myMethod(){}\r\n}\r\n</pre>\r\n</td>\r\n<td style="padding: 0.3em; word-break: break-word; border: 1px solid #cccccc; vertical-align: top; line-height: normal;"><span style="font-weight: bold;">function</span>&nbsp;MyDecorator(target: Object, propertyKey: string | symbol, descriptor: TypedPropertyDescriptor&lt;any&gt;): TypedPropertyDescriptor&lt;any&gt; {&nbsp;<br />&nbsp;&nbsp;return descriptor;<br />}<br />\r\n<ul style="margin: 0px 0px 0px 20px; padding: 0px; list-style-position: outside; list-style-image: initial;">\r\n<li style="margin-left: 20px;"><span style="font-weight: bold;">target</span>&nbsp;&mdash; прототип класса</li>\r\n<li style="margin-left: 20px;"><span style="font-weight: bold;">propertyKey</span>&nbsp;&mdash; имя метода (сохраняется при минификации); в текущей реализации тип &mdash; string</li>\r\n<li style="margin-left: 20px;"><span style="font-weight: bold;">descriptor</span>&nbsp;&mdash;&nbsp;<a style="background-color: transparent; color: #990099; text-decoration: none;" href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty">дескриптор</a>&nbsp;метода<a style="background-color: transparent; color: #990099; text-decoration: none;" href="https://habrahabr.ru/company/docsvision/blog/310870/#target-es3-bug">*</a></li>\r\n<li style="margin-left: 20px;"><span style="font-weight: bold;">returns</span>&nbsp;&mdash; дескриптор метода<a style="background-color: transparent; color: #990099; text-decoration: none;" href="https://habrahabr.ru/company/docsvision/blog/310870/#target-es3-bug">*</a>&nbsp;или null</li>\r\n</ul>\r\n</td>\r\n</tr>\r\n<tr>\r\n<td style="padding: 0.3em; word-break: break-word; border: 1px solid #cccccc; vertical-align: top; line-height: normal;"><a style="background-color: transparent; color: #990099; text-decoration: none;" href="http://www.typescriptlang.org/docs/handbook/decorators.html#method-decorators"><span style="font-weight: bold;">Декоратор статического метода</span></a><br /><a style="background-color: transparent; color: #990099; text-decoration: none;" href="http://www.typescriptlang.org/play/index.html#src=class%20MyClass%20%7B%0D%0A%09%40MyStaticMethodDecorator%0D%0A%09static%20myStaticMethod()%20%7B%20%7D%0D%0A%7D%0D%0A%0D%0Afunction%20MyStaticMethodDecorator(target%3A%20Object%2C%20propertyKey%3A%20string%2C%20descriptor%3A%20TypedPropertyDescriptor%3Cany%3E)%3A%20TypedPropertyDescriptor%3Cany%3E%20%7B%0D%0A%09console.log(target)%3B%0D%0A%09console.log(propertyKey)%3B%0D%0A%09console.log(descriptor)%3B%0D%0A%09return%20descriptor%3B%0D%0A%7D"><em>Пример в playground</em></a><br /><br />\r\n<pre style="font-family: monospace, monospace; font-size: 1em; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px;">class MyClass {\r\n  @MyDecorator\r\n  static myMethod(){}\r\n}\r\n</pre>\r\n</td>\r\n<td style="padding: 0.3em; word-break: break-word; border: 1px solid #cccccc; vertical-align: top; line-height: normal;"><span style="font-weight: bold;">function</span>&nbsp;MyDecorator(target: Function, propertyKey: string | symbol, descriptor: TypedPropertyDescriptor&lt;any&gt;): TypedPropertyDescriptor&lt;any&gt; {&nbsp;<br />&nbsp;&nbsp;return descriptor;<br />}<br />\r\n<ul style="margin: 0px 0px 0px 20px; padding: 0px; list-style-position: outside; list-style-image: initial;">\r\n<li style="margin-left: 20px;"><span style="font-weight: bold;">target</span>&nbsp;&mdash; конструктор класса</li>\r\n<li style="margin-left: 20px;"><span style="font-weight: bold;">propertyKey</span>&nbsp;&mdash; имя метода (сохраняется при минификации); в текущей реализации тип &mdash; string</li>\r\n<li style="margin-left: 20px;"><span style="font-weight: bold;">descriptor</span>&nbsp;&mdash;&nbsp;<a style="background-color: transparent; color: #990099; text-decoration: none;" href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty">дескриптор</a>&nbsp;метода<a style="background-color: transparent; color: #990099; text-decoration: none;" href="https://habrahabr.ru/company/docsvision/blog/310870/#target-es3-bug">*</a></li>\r\n<li style="margin-left: 20px;"><span style="font-weight: bold;">returns</span>&nbsp;&mdash; дескриптор метода<a style="background-color: transparent; color: #990099; text-decoration: none;" href="https://habrahabr.ru/company/docsvision/blog/310870/#target-es3-bug">*</a>&nbsp;или null</li>\r\n</ul>\r\n</td>\r\n</tr>\r\n<tr>\r\n<td style="padding: 0.3em; word-break: break-word; border: 1px solid #cccccc; vertical-align: top; line-height: normal;"><a style="background-color: transparent; color: #990099; text-decoration: none;" href="http://www.typescriptlang.org/docs/handbook/decorators.html#accessor-decorators"><span style="font-weight: bold;">Декоратор методов доступа</span></a><br /><a style="background-color: transparent; color: #990099; text-decoration: none;" href="http://www.typescriptlang.org/play/index.html#src=class%20MyClass%20%7B%0D%0A%09private%20mMyProperty%3A%20number%3B%0D%0A%0D%0A%09%40MyPropertyDecorator%0D%0A%09get%20myProperty()%3A%20number%20%7B%0D%0A%09%09return%20this.mMyProperty%3B%0D%0A%09%7D%0D%0A%09set%20myProperty(val%3A%20number)%20%7B%0D%0A%09%09this.mMyProperty%20%3D%20val%3B%0D%0A%09%7D%0D%0A%7D%0D%0A%0D%0Afunction%20MyPropertyDecorator(target%3A%20Object%2C%20propertyKey%3A%20string%2C%20descriptor%3A%20TypedPropertyDescriptor%3Cany%3E)%3A%20TypedPropertyDescriptor%3Cany%3E%20%7B%0D%0A%09console.log(target)%3B%0D%0A%09console.log(propertyKey)%3B%0D%0A%09console.log(descriptor)%3B%0D%0A%09return%20descriptor%3B%0D%0A%7D"><em>Пример в playground</em></a><br /><br />\r\n<pre style="font-family: monospace, monospace; font-size: 1em; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px;">class MyClass {\r\n  @MyDecorator\r\n  get myProperty(){}\r\n}\r\n</pre>\r\n</td>\r\n<td style="padding: 0.3em; word-break: break-word; border: 1px solid #cccccc; vertical-align: top; line-height: normal;">Аналогично методу. Декоратор следует применять к первому методу доступа (get или set), в порядке объявления в классе.</td>\r\n</tr>\r\n<tr>\r\n<td style="padding: 0.3em; word-break: break-word; border: 1px solid #cccccc; vertical-align: top; line-height: normal;"><a style="background-color: transparent; color: #990099; text-decoration: none;" href="http://www.typescriptlang.org/docs/handbook/decorators.html#parameter-decorators"><span style="font-weight: bold;">Декоратор параметра</span></a><br /><a style="background-color: transparent; color: #990099; text-decoration: none;" href="http://www.typescriptlang.org/play/index.html#src=class%20MyClass%20%7B%0D%0A%09myMethod(%0D%0A%09%09%40MyParamDecorator%20param1%3A%20number%2C%0D%0A%09%09%40MyParamDecorator%20param2%3A%20number)%20%7B%0D%0A%09%7D%0D%0A%7D%0D%0A%0D%0Afunction%20MyParamDecorator(target%3A%20Object%2C%20propertyKey%3A%20string%2C%20index%3A%20number)%20%7B%0D%0A%09console.log(target)%3B%0D%0A%09console.log(propertyKey)%3B%0D%0A%09console.log(index)%3B%0D%0A%7D"><em>Пример в playground</em></a><br /><br />\r\n<pre style="font-family: monospace, monospace; font-size: 1em; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px;">class MyClass {\r\n  myMethod(\r\n    @MyDecorator val){\r\n    }\r\n}\r\n</pre>\r\n</td>\r\n<td style="padding: 0.3em; word-break: break-word; border: 1px solid #cccccc; vertical-align: top; line-height: normal;"><span style="font-weight: bold;">function</span>&nbsp;MyDecorator(target: Object, propertyKey: string | symbol, index: number): void { }<br />\r\n<ul style="margin: 0px 0px 0px 20px; padding: 0px; list-style-position: outside; list-style-image: initial;">\r\n<li style="margin-left: 20px;"><span style="font-weight: bold;">target</span>&nbsp;&mdash; прототип класса</li>\r\n<li style="margin-left: 20px;"><span style="font-weight: bold;">propertyKey</span>&nbsp;&mdash; имя метода (сохраняется при минификации); в текущей реализации тип &mdash; string</li>\r\n<li style="margin-left: 20px;"><span style="font-weight: bold;">index</span>&nbsp;&mdash; индекс параметра в списке параметров</li>\r\n<li style="margin-left: 20px;"><span style="font-weight: bold;">returns</span>&nbsp;&mdash; void</li>\r\n</ul>\r\n</td>\r\n</tr>\r\n<tr>\r\n<td style="padding: 0.3em; word-break: break-word; border: 1px solid #cccccc; vertical-align: top; line-height: normal;"><a style="background-color: transparent; color: #6da3bd;" name="field-decorator"></a><br /><a style="background-color: transparent; color: #990099; text-decoration: none;" href="http://www.typescriptlang.org/docs/handbook/decorators.html#property-decorators"><span style="font-weight: bold;">Декоратор поля (свойства)</span></a><br /><a style="background-color: transparent; color: #990099; text-decoration: none;" href="http://www.typescriptlang.org/play/index.html#src=class%20MyClass%20%7B%0D%0A%09%40MyFieldDecorator%0D%0A%09myField%3A%20number%3B%0D%0A%7D%0D%0A%0D%0Afunction%20MyFieldDecorator(target%3A%20Object%2C%20propertyKey%3A%20string)%20%7B%0D%0A%09console.log(target)%3B%0D%0A%09console.log(propertyKey)%3B%0D%0A%7D"><em>Пример в playground</em></a><br /><br />\r\n<pre style="font-family: monospace, monospace; font-size: 1em; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px;">class MyClass {\r\n  @MyDecorator\r\n  myField: number;\r\n}\r\n</pre>\r\n</td>\r\n<td style="padding: 0.3em; word-break: break-word; border: 1px solid #cccccc; vertical-align: top; line-height: normal;"><span style="font-weight: bold;">function</span>&nbsp;MyDecorator(target: Object, propertyKey: string | symbol): TypedPropertyDescriptor&lt;any&gt; {<br />return null;<br />}<br />\r\n<ul style="margin: 0px 0px 0px 20px; padding: 0px; list-style-position: outside; list-style-image: initial;">\r\n<li style="margin-left: 20px;"><span style="font-weight: bold;">target</span>&nbsp;&mdash; прототип класса</li>\r\n<li style="margin-left: 20px;"><span style="font-weight: bold;">propertyKey</span>&nbsp;&mdash; имя поля (сохраняется при минификации); в текущей реализации тип &mdash; string</li>\r\n<li style="margin-left: 20px;"><span style="font-weight: bold;">returns</span>&nbsp;&mdash; null или&nbsp;<a style="background-color: transparent; color: #990099; text-decoration: none;" href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty">дескриптор</a>&nbsp;свойства; если вернуть дескриптор, то он будет использован для вызова Object.defineProperty; однако, при подключении библиотеки reflect-metadata этого не происходит (это&nbsp;<a style="background-color: transparent; color: #990099; text-decoration: none;" href="https://github.com/rbuckton/ReflectDecorators/issues/48">баг в reflect-metadata</a>)</li>\r\n</ul>\r\n</td>\r\n</tr>\r\n<tr>\r\n<td style="padding: 0.3em; word-break: break-word; border: 1px solid #cccccc; vertical-align: top; line-height: normal;"><a style="background-color: transparent; color: #990099; text-decoration: none;" href="http://www.typescriptlang.org/docs/handbook/decorators.html#property-decorators"><span style="font-weight: bold;">Декоратор статического поля (свойства)</span></a><br /><a style="background-color: transparent; color: #990099; text-decoration: none;" href="http://www.typescriptlang.org/play/index.html#src=class%20MyClass%20%7B%0D%0A%09%40MyFieldDecorator%0D%0A%09static%20myField%3A%20number%3B%0D%0A%7D%0D%0A%0D%0Afunction%20MyFieldDecorator(target%3A%20Function%2C%20propertyKey%3A%20string)%20%7B%0D%0A%09console.log(target)%3B%0D%0A%09console.log(propertyKey)%3B%0D%0A%7D"><em>Пример в playground</em></a><br /><br />\r\n<pre style="font-family: monospace, monospace; font-size: 1em; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px;">class MyClass {\r\n  @MyDecorator\r\n  static myField;\r\n}\r\n</pre>\r\n</td>\r\n<td style="padding: 0.3em; word-break: break-word; border: 1px solid #cccccc; vertical-align: top; line-height: normal;"><span style="font-weight: bold;">function</span>&nbsp;MyDecorator(target: Function, propertyKey: string | symbol): TypedPropertyDescriptor&lt;any&gt; {<br />return null;<br />}<br />\r\n<ul style="margin: 0px 0px 0px 20px; padding: 0px; list-style-position: outside; list-style-image: initial;">\r\n<li style="margin-left: 20px;"><span style="font-weight: bold;">target</span>&nbsp;&mdash; конструктор класса</li>\r\n<li style="margin-left: 20px;"><span style="font-weight: bold;">propertyKey</span>&nbsp;&mdash; имя поля (сохраняется при минификации); в текущей реализации тип &mdash; string</li>\r\n<li style="margin-left: 20px;"><span style="font-weight: bold;">returns</span>&nbsp;&mdash; null или&nbsp;<a style="background-color: transparent; color: #990099; text-decoration: none;" href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty">дескриптор</a>&nbsp;свойства; если вернуть дескриптор, то он будет использован для вызова Object.defineProperty; однако при подключении библиотеки reflect-metadata этого не происходит (это&nbsp;<a style="background-color: transparent; color: #990099; text-decoration: none;" href="https://github.com/rbuckton/ReflectDecorators/issues/48">баг в reflect-metadata</a>)</li>\r\n</ul>\r\n</td>\r\n</tr>\r\n<tr>\r\n<td style="padding: 0.3em; word-break: break-word; border: 1px solid #cccccc; vertical-align: top; line-height: normal;">Интерфейсы</td>\r\n<td style="padding: 0.3em; word-break: break-word; border: 1px solid #cccccc; vertical-align: top; line-height: normal;">Декораторы интерфейсов и их членов не поддерживаются.</td>\r\n</tr>\r\n<tr>\r\n<td style="padding: 0.3em; word-break: break-word; border: 1px solid #cccccc; vertical-align: top; line-height: normal;">Объявления типов</td>\r\n<td style="padding: 0.3em; word-break: break-word; border: 1px solid #cccccc; vertical-align: top; line-height: normal;">Декораторы в объявлениях типов (ambient declarations) не поддерживаются.</td>\r\n</tr>\r\n<tr>\r\n<td style="padding: 0.3em; word-break: break-word; border: 1px solid #cccccc; vertical-align: top; line-height: normal;">Функции и переменные вне класса</td>\r\n<td style="padding: 0.3em; word-break: break-word; border: 1px solid #cccccc; vertical-align: top; line-height: normal;">Декораторы вне класса не поддерживаются.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<p>&nbsp;</p>\r\n<p style="margin: 0px; padding: 0px; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Интерфейс TypedPropertyDescriptor&lt;T&gt;, фигурирующий в сигнатуре декораторов методов и свойств объявлен следующим образом:</p>\r\n<p>&nbsp;</p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="javascript hljs" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;">interface TypedPropertyDescriptor&lt;T&gt; {\r\n    enumerable?: boolean;\r\n    configurable?: boolean;\r\n    writable?: boolean;\r\n    value?: T;\r\n    get?: () =&gt; T;\r\n    set?: (value: T) =&gt; <span class="hljs-keyword" style="font-weight: bold;">void</span>;\r\n}</code></pre>\r\n<p>&nbsp;</p>\r\n<p style="margin: 0px; padding: 0px; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Если указать в объявлении декоратора конкретный тип T для TypedPropertyDescriptor, то можно ограничить тип свойств, к которым декоратор применим. Что означают члены этого интерфейса &mdash; можно посмотреть&nbsp;<a style="background-color: transparent; color: #990099; text-decoration: none;" href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty">здесь</a>. Если коротко, для метода value содержит собственно сам метод, для поля &mdash; значение, для свойства &mdash; get и set содержат соответствующие методы доступа.</p>\r\n<p>&nbsp;</p>\r\n<h3 id="img-width30-height30-srchttpshabrastorageorgfiles6df9cc1946df9cc19467c40f682e6926085e4230apng-nastroyka-sredy" style="font-family: Verdana, sans-serif; font-size: 19.25px; margin: 0px; font-weight: 400; padding: 0px; background-color: #ffffff;"><img style="border-style: none; max-width: 100%; vertical-align: middle;" src="https://habrastorage.org/files/6df/9cc/194/6df9cc19467c40f682e6926085e4230a.png" width="30" height="30" />&nbsp;Настройка среды</h3>\r\n<p>&nbsp;</p>\r\n<p style="margin: 0px; padding: 0px; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Поддержка декораторов экспериментальная и может измениться в будущих релизах (в&nbsp;<a style="background-color: transparent; color: #990099; text-decoration: none;" href="http://www.typescriptlang.org/docs/release-notes/typescript-2.0.html">TypeScript 2.0</a>&nbsp;не изменилась). Поэтому необходимо добавить experimentalDecorators: true в tsconfig.json. Кроме того, декораторы доступны только если target: es5 или выше.</p>\r\n<p>&nbsp;</p>\r\n<div class="spoiler" style="overflow: hidden; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;"><span class="spoiler_title" style="color: #6da3bd; cursor: pointer; border-bottom: 1px dashed;">tsconfig.json</span></div>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><a style="background-color: #ffffff; color: #6da3bd; font-family: Verdana, sans-serif; font-size: 14px;" name="target-es3-bug"></a></p>\r\n<blockquote style="padding-left: 15px; margin: 0.83em 0px; clear: both; border-left: 2px solid #bbbbbb; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">\r\n<h4 style="font-size: 16.8px; margin: 0px; font-weight: 400; padding: 0px;"><img style="border-style: none; max-width: 100%; vertical-align: middle;" src="https://habrastorage.org/files/64c/0a5/99d/64c0a599d2f3406987c186dce2b0aa4d.png" width="20" height="20" />&nbsp;&nbsp;<span style="font-weight: bold;">Важно!!!</span>&nbsp;&mdash;&nbsp;<em>о target: ES3 и JSFiddle</em></h4>\r\n<br />Важно не забыть указать опцию target &mdash; ES5 при работе с декораторами. Если этого не сделать, то код скомпилируется без ошибок, но работать будет по-другому (<a style="background-color: transparent; color: #990099; text-decoration: none;" href="https://github.com/Microsoft/TypeScript/issues/11658">это баг в компиляторе TypeScript</a>). В частности, декораторам методов и свойств не будет передаваться третий параметр, а их возвращаемое значение будет игнорироваться.<br /><br />Эти феномены можно наблюдать в JSFiddle (это уже&nbsp;<a style="background-color: transparent; color: #990099; text-decoration: none;" href="https://github.com/jsfiddle/jsfiddle-issues/issues/906">баг в JSFiddle</a>), поэтому в данной статье я не размещаю примеры в JSFiddle.<br /><br />Тем не менее, есть обходное решение для этих багов. Нужно просто самим получать дескриптор, и самим же его обновлять. Например, вот&nbsp;<a style="background-color: transparent; color: #990099; text-decoration: none;" href="https://jsfiddle.net/PFight/msac244r/">реализация декоратора @safe</a>, которая работает как с target ES3, так и с ES5.</blockquote>\r\n<p style="margin: 0px; padding: 0px; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Для использования информации о типах необходимо также добавить emitDecoratorMetadata: true.</p>\r\n<p>&nbsp;</p>\r\n<div class="spoiler" style="overflow: hidden; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;"><span class="spoiler_title" style="color: #6da3bd; cursor: pointer; border-bottom: 1px dashed;">tsconfig.json</span></div>\r\n<p>&nbsp;</p>\r\n<p style="margin: 0px; padding: 0px; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Для использования класса&nbsp;<a style="background-color: transparent; color: #990099; text-decoration: none;" href="https://www.npmjs.com/package/reflect-metadata#api">Reflect</a>&nbsp;необходимо установить дополнительный пакет&nbsp;<a style="background-color: transparent; color: #990099; text-decoration: none;" href="https://github.com/rbuckton/ReflectDecorators">reflect-metadata</a>:</p>\r\n<p>&nbsp;</p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="hljs sql" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;">npm <span class="hljs-keyword" style="font-weight: bold;">install</span> reflect-metadata <span class="hljs-comment" style="color: #999988; font-style: italic;">--save</span></code></pre>\r\n<p>&nbsp;</p>\r\n<p style="margin: 0px; padding: 0px; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">И в коде:</p>\r\n<p>&nbsp;</p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="hljs xl" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;"><span class="hljs-keyword" style="font-weight: bold;">import</span> <span class="hljs-string" style="color: #dd1144;">"reflect-metadata"</span>;</code></pre>\r\n<p>&nbsp;</p>\r\n<p style="margin: 0px; padding: 0px; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Однако если вы используете Angular 2, то ваша система сборки уже может содержать в себе реализацию Reflect, и после установки пакета reflect-metadata вы можете получить runtime ошибку&nbsp;<code style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 1em; color: #222222;">Unexpected value \'YourComponent\' exported by the module \'YourModule\'</code>. В этом случае лучше установить только&nbsp;<a style="background-color: transparent; color: #990099; text-decoration: none;" href="https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/reflect-metadata">typings</a>.</p>\r\n<p>&nbsp;</p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="hljs x86asm" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;">typings install <span class="hljs-built_in" style="color: #0086b3;">dt</span>~reflect-metadata --<span class="hljs-meta" style="color: #999999; font-weight: bold;">global</span> --save</code></pre>\r\n<p>&nbsp;</p>\r\n<p style="margin: 0px; padding: 0px; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Итак, перейдем к практике. Рассмотрим несколько примеров, демонстрирующих возможности декораторов.</p>\r\n<p>&nbsp;</p>\r\n<h2 id="safe---avtomaticheskaya-obrabotka-oshibok-vnutri-funkcii" style="font-family: Verdana, sans-serif; font-size: 21px; margin: 0px; font-weight: 400; padding: 0px; background-color: #ffffff;"><span style="font-weight: bold;">@safe</span>&nbsp;&mdash;&nbsp;<em>автоматическая обработка ошибок внутри функции</em></h2>\r\n<p>&nbsp;</p>\r\n<div style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff; text-align: center;"><img style="border-style: none; max-width: 100%; vertical-align: middle;" src="https://habrastorage.org/files/727/0cb/2ab/7270cb2abbfc41c9af6f18213ea39947.jpg" /></div>\r\n<p>&nbsp;</p>\r\n<p style="margin: 0px; padding: 0px; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Допустим, у нас часто встречаются второстепенные функции, ошибки внутри которых мы хотели бы игнорировать. Писать каждый раз try/catch громоздко, на помощь приходит декоратор:</p>\r\n<p>&nbsp;</p>\r\n<div class="spoiler" style="overflow: hidden; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;"><span class="spoiler_title" style="color: #6da3bd; cursor: pointer; border-bottom: 1px dashed;">Реализация декоратора</span></div>\r\n<p>&nbsp;</p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="javascript hljs" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;"><span class="hljs-class"><span class="hljs-keyword" style="font-weight: bold;">class</span> <span class="hljs-title" style="color: #445588; font-weight: bold;">MyClass</span> </span>{\r\n    @safe public foo(str: string): boolean {\r\n     <span class="hljs-keyword" style="font-weight: bold;">return</span> str.length &gt; <span class="hljs-number" style="color: teal;">0</span>; <span class="hljs-comment" style="color: #999988; font-style: italic;">// если str == null, будет ошибка</span>\r\n  }\r\n}\r\n<span class="hljs-keyword" style="font-weight: bold;">var</span> test = <span class="hljs-keyword" style="font-weight: bold;">new</span> MyClass();\r\n<span class="hljs-built_in" style="color: #0086b3;">console</span>.info(<span class="hljs-string" style="color: #dd1144;">"Starting..."</span>);\r\ntest.foo(<span class="hljs-literal" style="color: teal;">null</span>); \r\n<span class="hljs-built_in" style="color: #0086b3;">console</span>.info(<span class="hljs-string" style="color: #dd1144;">"Continue execution"</span>);</code></pre>\r\n<p>&nbsp;</p>\r\n<p style="margin: 0px; padding: 0px; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Результат выполнения:</p>\r\n<p>&nbsp;</p>\r\n<blockquote style="padding-left: 15px; margin: 0.83em 0px; clear: both; border-left: 2px solid #bbbbbb; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;"><img style="border-style: none; max-width: 100%; vertical-align: middle;" src="https://habrastorage.org/files/c7d/e25/f8e/c7de25f8e6094ad39c7c8c44e14cd45a.png" /></blockquote>\r\n<p style="margin: 0px; padding: 0px; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;"><a style="background-color: transparent; color: #990099; text-decoration: none;" href="https://embed.plnkr.co/hJIvnIYCdmnvJlUZZUCw/">Попробовать в действии в Plunker</a><br /><a style="background-color: transparent; color: #990099; text-decoration: none;" href="http://www.typescriptlang.org/play/index.html#src=class%20MyClass%20%7B%0D%0A%09%0D%0A%09%40safe%20public%20foo(str%3A%20string%2C%20data%3A%20any)%3A%20boolean%20%7B%0D%0A%20%20%20%20return%20str.length%20%3E%200%3B%0D%0A%20%20%7D%0D%0A%7D%0D%0A%0D%0Afunction%20safe(target%3A%20Object%2C%20propertyKey%3A%20string)%20%7B%0D%0A%20%20var%20descriptor%20%3D%20Object.getOwnPropertyDescriptor(target%2C%20propertyKey)%3B%0D%0A%20%20var%20originalMethod%20%3D%20descriptor.value%3B%0D%0A%20%20descriptor.value%20%3D%20function%20NoErrorWrapper%20()%20%7B%0D%0A%20%20%20%20try%20%7B%0D%0A%20%20%20%20%20%20originalMethod.apply(this%2C%20arguments)%3B%0D%0A%20%20%20%20%7D%20catch(ex)%20%7B%0D%0A%20%20%20%20%20%20var%20message%20%3D%20ex.name%20%2B%20%22%20occured%20in%20call%20of%20%22%20%2B%20%0D%0A%20%20%20%20%20%20%20%20%20%20target.constructor.name%20%2B%20%22.%22%20%2B%20propertyKey%20%2B%20%22%3A%20%22%20%2B%20ex.message%20%2B%20%22%5Cn%22%3B%0D%0A%20%20%20%20%20%20message%20%2B%3D%20%22Arguments%3A%5Cn%22%3B%0D%0A%20%20%20%20%20%20%5B%5D.forEach.call(arguments%2C%20(x%2C%20i)%20%3D%3E%20%0D%0A%20%20%20%20%20%20%20%20%20message%20%2B%3D%20%22%20%20%20%5B%22%20%2B%20i%20%2B%20%22%5D%3A%20%22%20%2B%20JSON.stringify(x)%20%2B%20%22%20%5Cn%22)%3B%0D%0A%20%20%20%20%20%20message%20%2B%3D%20%22Callstack%3A%22%20%2B%20ex.stack%3B%0D%0A%20%20%20%20%20%20console.error(message)%3B%0D%0A%20%20%20%20%20%20document.body.innerHTML%20%2B%3D%20%22%3Cbr%3E%3Cpre%20style%3D\'color%3A%20red\'%3E%22%20%2B%20message%20%2B%20%22%3C%2Fpre%3E%22%3B%0D%0A%20%20%20%20%7D%0D%0A%20%20%7D%3B%0D%0A%20%20Object.defineProperty(target%2C%20propertyKey%2C%20descriptor)%3B%0D%0A%20%20return%20descriptor%3B%0D%0A%7D%0D%0A%0D%0Aconsole.info(%22Starting...%22)%3B%0D%0Adocument.body.innerHTML%20%2B%3D%20%22Starting...%3Cbr%3E%22%3B%0D%0Avar%20my%20%3D%20new%20MyClass()%3B%0D%0Amy.foo(null%2C%20%7B%20answer%3A%2042%20%7D)%3B%0D%0Aconsole.info(%22Continue%20execution%22)%3B%0D%0Adocument.body.innerHTML%20%2B%3D%20%22%3Cbr%3EContinue%20execution%22%3B">Посмотреть в Playground</a></p>', '2016-09-01 19:00:47', '2016-10-23 15:11:34', 4, 5, NULL),
	(15, 'Что такое User CSS?', 'Quo repellendus sunt et sint tenetur. Optio voluptatem in eum ex similique laudantium. Consectetur adipisci et neque expedita.', 'ebf616fbed67ddd8323e30cf99f4eb36.jpg', 'chto-takoe-user-css', '<p><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">User&nbsp;</span><acronym style="cursor: help; border-bottom: 0.1em dotted; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">CSS</acronym><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;&mdash; это пользовательские каскадные таблицы стилей. То есть CSS, подключаемые пользователем в браузере. С помощью них можно менять отображение страницы, например, блокировать баннеры, изменять цвета текста или фона, тестировать HTML-вёрстку.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><a style="background-color: #ffffff; color: #6da3bd; font-family: Verdana, sans-serif; font-size: 14px;" name="habracut"></a><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Вот несколько моих User CSS:</span></p>\r\n<ul style="margin: 0px 0px 0px 20px; padding: 0px; list-style-position: outside; list-style-image: initial; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">\r\n<li style="margin-left: 20px;">Баннерорезки&nbsp;<a style="background-color: transparent; color: #990099; text-decoration: none;" href="http://usercss.ru/styles/url-block/">URL-block.css</a>&nbsp;и&nbsp;<a style="background-color: transparent; color: #990099; text-decoration: none;" href="http://usercss.ru/styles/hidecertainsizes/">Hidecertainsizes.css<br /><br /><img style="border-style: none; max-width: 100%; vertical-align: middle;" src="https://habrastorage.org/getpro/habr/post_images/db4/416/9b5/db44169b5ae65545e6c76249697c29dc.png" alt="Hidecertainsizes.css" /></a><br /><br /></li>\r\n<li style="margin-left: 20px;">Стиль,&nbsp;<a style="background-color: transparent; color: #990099; text-decoration: none;" href="http://usercss.ru/styles/colored-links/">перекрашивающий ссылки</a>&nbsp;и добавляющий перед ними&nbsp;<a style="background-color: transparent; color: #990099; text-decoration: none;" href="http://usercss.ru/styles/links-with-icons/">иконки<br /><br /><img style="border-style: none; max-width: 100%; vertical-align: middle;" src="https://habrastorage.org/getpro/habr/post_images/a87/8e5/da3/a878e5da34c5143e44d3f87c981e07fa.png" alt="Links-with-icons.css" /></a></li>\r\n</ul>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /></p>\r\n<h2 style="font-family: Verdana, sans-serif; font-size: 21px; margin: 0px; font-weight: 400; padding: 0px; background-color: #ffffff;">Какие браузеры поддерживают User CSS?</h2>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Это&nbsp;</span><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="http://usercss.ru/how-to-install/#opera">Opera</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">,&nbsp;</span><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="http://usercss.ru/how-to-install/#firefox">Firefox</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;и&nbsp;</span><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="http://usercss.ru/how-to-install/#safari">Safari</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;и даже&nbsp;</span><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="http://usercss.ru/how-to-install/#ie">Internet Explorer</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">. Про остальные я не в курсе, если вы что-то знаете, то я с удовольствием выслушаю.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /></p>\r\n<h2 style="font-family: Verdana, sans-serif; font-size: 21px; margin: 0px; font-weight: 400; padding: 0px; background-color: #ffffff;">Где можно найти готовые User CSS?</h2>\r\n<ol style="margin: 0px 0px 0px 20px; padding: 0px; list-style-position: outside; list-style-image: initial; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">\r\n<li style="margin-left: 20px;"><a style="background-color: transparent; color: #990099; text-decoration: none;" href="http://usercss.ru/">UserCSS.ru</a></li>\r\n<li style="margin-left: 20px;"><a style="background-color: transparent; color: #990099; text-decoration: none;" href="http://userstyles.org/">userstyles.org</a></li>\r\n<li style="margin-left: 20px;"><a style="background-color: transparent; color: #990099; text-decoration: none;" href="http://mystylesheet.org/">mystylesheet.org</a></li>\r\n</ol>', '2016-09-01 19:00:47', '2016-10-23 14:46:36', 3, 2, NULL),
	(16, 'Webpack для Single Page App', 'Error ut ex quo hic incidunt corrupti repellat. Molestias suscipit ex neque sed. Et eligendi sed et est corporis non. Id incidunt aliquid soluta odio provident qui. Consequuntur facilis quis voluptatem.', '78f382d56da957cce47a8af7d534a199.png', 'webpack-dlya-single-page-app', '<p><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Отгремели фанфары, прошел звон в&nbsp;ушах от&nbsp;истязаний &laquo;евангелистов&raquo;, модников в&nbsp;сфере фронтенд разработки. Кто-то ушел на&nbsp;</span><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="https://github.com/sstephenson/sprockets">sprockets</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">, кто-то пустился во все тяжкие и стал писать свои велосипеды или расширять функционал&nbsp;</span><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="http://gulpjs.com/">gulp</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;или&nbsp;</span><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="http://gruntjs.com/">grunt</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">. Но статей по поводу популярных инструментов автоматизации процесса сборки &ndash; стало существенно меньше и это факт! Пора бы заполнить освободившееся пространство чем-то существенно иным.&nbsp;</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Уверен многие слышали о&nbsp;</span><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="http://webpack.github.io/">webpack</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">. Кто-то подумал &laquo;он&nbsp;слишком много на&nbsp;себя берет&raquo; и&nbsp;не&nbsp;стал дочитывать даже вводную статью на&nbsp;оффициальном сайте проекта. Некоторые решили попробовать, но&nbsp;столкнувшись с&nbsp;небольшим количеством примеров настройки&nbsp;&mdash; отверг инструмент решив подождать пару лет. Но&nbsp;в&nbsp;целом, разговоров &laquo;вокруг&raquo; ходит масса. В&nbsp;этой статье&nbsp;&mdash; хочу развенчать некоторые сомнения. Может быть, кто-то заинтересуется и&nbsp;перейдет на&nbsp;&laquo;светлую сторону&raquo;. Вообщем желающие под кат.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><a style="background-color: #ffffff; color: #6da3bd; font-family: Verdana, sans-serif; font-size: 14px;" name="habracut"></a><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Честно сказать, активно работать с этим мощным инструментом, я начал в начале этого года. Сначала конечно же &ldquo;wow&rdquo; эффект. Который достаточно быстро сменился болью от жутко неудобной документации. Но пересилив этот этап &ndash; честно забыл о многих типичных проблемах, был поражен скоростью и удобством. Не буду утомлять, разберемся с&hellip;</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /></p>\r\n<h4 style="font-family: Verdana, sans-serif; font-size: 16.8px; margin: 0px; font-weight: 400; padding: 0px; background-color: #ffffff;">Механика</h4>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Логика работы очень простая, но эффективная</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Webpack принимает один или несколько файлов, так называемых (entry points) используя пути из конфигурационного файла, далее загружает его.&nbsp;</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Сборщик &ndash; во время обработки, встречая знакомую ему функцию&nbsp;</span><span style="font-weight: bold; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">require()</span><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;&ndash; оборачивает содержимое вызываемого файла в функцию. Которая возвращает его контекст.&nbsp;</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">При этом не нужно заботиться о &laquo;гонке загрузки&raquo;. Все что вы потребуете, будет доставлено в нужной последовательности!</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Важно отметить, что во время разработки, когда запущен&nbsp;</span><span style="font-weight: bold; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">webpack-dev-server</span><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;&ndash;&nbsp;промежуточные файлы&nbsp;</span><span style="font-weight: bold; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">(chunks)</span><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;попадают в оперативную память RAM. Браузер же, получает их по протоколу&nbsp;</span><span style="font-weight: bold; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">webpack://</span><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">прямо из контейнера.&nbsp;</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Так же&nbsp;</span><span style="font-weight: bold; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">dev-server</span><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;&ndash; поднимает простейший веб сервер на порт 8080, к которому можно достучаться по адресу&nbsp;</span><span style="font-weight: bold; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;"><em>localhost:8080</em></span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Этот подход управления содержимым, как Вы понимаете ускоряет время промежуточной сборки, на значимое количество секунд. Что в рамках рабочего дня &ndash; экономит уйму Вашего времени.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Что касается окончательной сборки, то webpack используя тот же конфиг выполняет лишь этап, когда файлы раскладываются по папкам в файловой системе, готовые работать на Ваше благо.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><img style="border-style: none; max-width: 100%; vertical-align: middle; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" src="https://habrastorage.org/files/312/baa/19d/312baa19d81e43a58116e1f357b894e3.png" alt="image" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><em style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">source: jlongster.com/Backend-Apps-with-Webpack--Part-III</em><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /></p>\r\n<h4 style="font-family: Verdana, sans-serif; font-size: 16.8px; margin: 0px; font-weight: 400; padding: 0px; background-color: #ffffff;">Подготовка</h4>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Тут все достаточно тривиально. Все что нам нужно это&nbsp;</span><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="https://nodejs.org/">node.js</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;и&nbsp;</span><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="https://www.npmjs.com/">npm</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">. Далее просто следуйте простым командам:</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /></p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="bash hljs" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;">$ mkdir app\r\n$ <span class="hljs-built_in" style="color: #0086b3;">cd</span> <span class="hljs-variable" style="color: teal;">$_</span> \r\n$ npm init\r\n&amp; npm i webpack webpack-dev-server --save-dev <span class="hljs-comment" style="color: #999988; font-style: italic;"># важно поставить именно в dev dependencies</span>\r\n</code></pre>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Как бы это не звучало, но больше половины Вы уже сделали. Давайте перейдем к конфигурации проекта.&nbsp;</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Для этого нужно определить что именно Вы хотите видеть и какие инструменты использовать. Условимся на этом:</span></p>\r\n<ul style="margin: 0px 0px 0px 20px; padding: 0px; list-style-position: outside; list-style-image: initial; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">\r\n<li style="margin-left: 20px;">Common JS</li>\r\n<li style="margin-left: 20px;">Stylus</li>\r\n<li style="margin-left: 20px;">Jade</li>\r\n<li style="margin-left: 20px;">Autoprefixer</li>\r\n</ul>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Остальное поставим по необходимости.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /></p>\r\n<h4 style="font-family: Verdana, sans-serif; font-size: 16.8px; margin: 0px; font-weight: 400; padding: 0px; background-color: #ffffff;">Настройка</h4>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">По умолчанию, webpack принимает конфигурационный файл выполненный в формате JSON. Находиться он должен в директории проекта и называться&nbsp;</span><span style="font-weight: bold; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">webpack.config.js</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Для более удобной работы с запуском задач, а их будет две:</span></p>\r\n<ul style="margin: 0px 0px 0px 20px; padding: 0px; list-style-position: outside; list-style-image: initial; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">\r\n<li style="margin-left: 20px;"><span style="font-weight: bold;">Сборка готового проекта</span></li>\r\n<li style="margin-left: 20px;"><span style="font-weight: bold;">Режим разработки</span></li>\r\n</ul>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Воспользуемся&nbsp;</span><span style="font-weight: bold; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;"><em>script</em></span><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;секцией package.json файла, добавив следующие строчки:</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /></p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="hljs xquery" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;"><span class="hljs-string" style="color: #dd1144;">"scripts"</span>: {\r\n  <span class="hljs-string" style="color: #dd1144;">"dev"</span>: <span class="hljs-string" style="color: #dd1144;">"NODE_ENV=development webpack-dev-server --progress"</span>,\r\n  <span class="hljs-string" style="color: #dd1144;">"build"</span>: <span class="hljs-string" style="color: #dd1144;">"NODE_ENV=production webpack --progress"</span>\r\n}\r\n</code></pre>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">После этого, находясь в директории проекта, Вам будут доступны следующие команды:</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /></p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="bash hljs" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;">$ npm run dev <span class="hljs-comment" style="color: #999988; font-style: italic;"># режим разработки http://localhost:8080</span>\r\n$ npm run build <span class="hljs-comment" style="color: #999988; font-style: italic;"># сборка готовых ассетов и файлов в ./dist</span>\r\n</code></pre>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Создадим файлы конфигурации терминальной магией:</span></p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="bash hljs" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;">$ touch webpack.config.js <span class="hljs-comment" style="color: #999988; font-style: italic;"># корневой файл конфигурации обрабатываемый webpack</span>\r\n$ mkdir config <span class="hljs-comment" style="color: #999988; font-style: italic;"># директория с конфигурациями</span>\r\n$ <span class="hljs-built_in" style="color: #0086b3;">cd</span> <span class="hljs-variable" style="color: teal;">$_</span> <span class="hljs-comment" style="color: #999988; font-style: italic;"># перейдем</span>\r\n$ touch global.js <span class="hljs-comment" style="color: #999988; font-style: italic;"># общие настройки инструментов, загрузчиков и плагинов</span>\r\n$ mkdir env &amp;&amp; <span class="hljs-built_in" style="color: #0086b3;">cd</span> <span class="hljs-variable" style="color: teal;">$_</span>\r\n$ touch development.js <span class="hljs-comment" style="color: #999988; font-style: italic;"># файл с \'тонкой\' настройкой webpack для режима разработки</span>\r\n$ touch production.js <span class="hljs-comment" style="color: #999988; font-style: italic;"># аналогичный файл для конечной сборки</span>\r\n</code></pre>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Перейдем к настройке окружения, для этого откроем файл&nbsp;</span><span style="font-weight: bold; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">./webpack.config.js</span><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;и заполним следующим содержимым:</span></p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="javascript hljs" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;"><span class="hljs-meta" style="color: #999999; font-weight: bold;">\'use strict\'</span>;\r\n\r\n<span class="hljs-keyword" style="font-weight: bold;">var</span> _ = <span class="hljs-built_in" style="color: #0086b3;">require</span>(<span class="hljs-string" style="color: #dd1144;">\'lodash\'</span>);\r\n<span class="hljs-keyword" style="font-weight: bold;">var</span> _configs = {\r\n  global: <span class="hljs-built_in" style="color: #0086b3;">require</span>(__dirname + <span class="hljs-string" style="color: #dd1144;">\'/config/global\'</span>),\r\n  production: <span class="hljs-built_in" style="color: #0086b3;">require</span>(__dirname + <span class="hljs-string" style="color: #dd1144;">\'/config/env/production\'</span>),\r\n  development: <span class="hljs-built_in" style="color: #0086b3;">require</span>(__dirname + <span class="hljs-string" style="color: #dd1144;">\'/config/env/development\'</span>)\r\n};\r\n\r\n<span class="hljs-keyword" style="font-weight: bold;">var</span> _load = <span class="hljs-function"><span class="hljs-keyword" style="font-weight: bold;">function</span>(<span class="hljs-params">environment</span>) </span>{\r\n  <span class="hljs-comment" style="color: #999988; font-style: italic;">// Проверяем окружение</span>\r\n  <span class="hljs-keyword" style="font-weight: bold;">if</span> (!environment) <span class="hljs-keyword" style="font-weight: bold;">throw</span> <span class="hljs-string" style="color: #dd1144;">\'Can\\\'t find local environment variable via process.env.NODE_ENV\'</span>;\r\n  <span class="hljs-keyword" style="font-weight: bold;">if</span> (!_configs[environment]) <span class="hljs-keyword" style="font-weight: bold;">throw</span> <span class="hljs-string" style="color: #dd1144;">\'Can\\\'t find environments see _config object\'</span>;\r\n\r\n  <span class="hljs-comment" style="color: #999988; font-style: italic;">// load config file by environment</span>\r\n  <span class="hljs-keyword" style="font-weight: bold;">return</span> _configs &amp;&amp; _.merge(\r\n    _configs[environment](__dirname),\r\n    _configs[<span class="hljs-string" style="color: #dd1144;">\'global\'</span>](__dirname)\r\n  );\r\n};\r\n\r\n<span class="hljs-comment" style="color: #999988; font-style: italic;">/**\r\n * Export WebPack config\r\n * @type {[type]}\r\n */</span>\r\n<span class="hljs-built_in" style="color: #0086b3;">module</span>.exports = _load(process.env.NODE_ENV);\r\n\r\n</code></pre>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Как вы заметили&nbsp;</span><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="https://lodash.com/">lodash</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">, исправим его отсутствие выполнением следующей команды:</span></p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="bash hljs" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;">$ npm i lodash --save-dev\r\n</code></pre>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Немного схитрив, мы сможем используя метод&nbsp;</span><em style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;"><span style="font-weight: bold;">merge</span></em><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;&ndash; библитеки lodash, \'склеить\' нужную нам исходную конфигурацию, используя для этого 2 файла. В качестве аргумента функции принимая&nbsp;</span><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="https://nodejs.org/api/process.html#process_process_env">process.env</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /></p>\r\n<h4 style="font-family: Verdana, sans-serif; font-size: 16.8px; margin: 0px; font-weight: 400; padding: 0px; background-color: #ffffff;"><span style="font-weight: bold;">./config/global.js</span></h4>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Файл содержит&nbsp;</span><s style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">ненормативную лексику</s><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;почти всю логику работы сборщика, следовательно к его содержимому нужно отнестись более ответственно:</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /></p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="javascript hljs" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;"><span class="hljs-meta" style="color: #999999; font-weight: bold;">\'use strict\'</span>\r\n\r\n<span class="hljs-keyword" style="font-weight: bold;">var</span> path        = <span class="hljs-built_in" style="color: #0086b3;">require</span>(<span class="hljs-string" style="color: #dd1144;">\'path\'</span>);\r\n<span class="hljs-keyword" style="font-weight: bold;">var</span> webpack     = <span class="hljs-built_in" style="color: #0086b3;">require</span>(<span class="hljs-string" style="color: #dd1144;">\'webpack\'</span>);\r\n<span class="hljs-keyword" style="font-weight: bold;">var</span> Manifest    = <span class="hljs-built_in" style="color: #0086b3;">require</span>(<span class="hljs-string" style="color: #dd1144;">\'manifest-revision-webpack-plugin\'</span>);\r\n<span class="hljs-keyword" style="font-weight: bold;">var</span> TextPlugin  = <span class="hljs-built_in" style="color: #0086b3;">require</span>(<span class="hljs-string" style="color: #dd1144;">\'extract-text-webpack-plugin\'</span>);\r\n<span class="hljs-keyword" style="font-weight: bold;">var</span> HtmlPlugin    = <span class="hljs-built_in" style="color: #0086b3;">require</span>(<span class="hljs-string" style="color: #dd1144;">\'html-webpack-plugin\'</span>);\r\n\r\n<span class="hljs-built_in" style="color: #0086b3;">module</span>.exports = <span class="hljs-function"><span class="hljs-keyword" style="font-weight: bold;">function</span>(<span class="hljs-params">_path</span>) </span>{\r\n\r\n  <span class="hljs-comment" style="color: #999988; font-style: italic;">//define local variables</span>\r\n  <span class="hljs-keyword" style="font-weight: bold;">var</span> dependencies  = <span class="hljs-built_in" style="color: #0086b3;">Object</span>.keys(<span class="hljs-built_in" style="color: #0086b3;">require</span>(_path + <span class="hljs-string" style="color: #dd1144;">\'/package\'</span>).dependencies);\r\n  <span class="hljs-keyword" style="font-weight: bold;">var</span> rootAssetPath = _path + <span class="hljs-string" style="color: #dd1144;">\'app\'</span>;\r\n\r\n  <span class="hljs-keyword" style="font-weight: bold;">return</span> {\r\n    <span class="hljs-comment" style="color: #999988; font-style: italic;">// точки входа</span>\r\n    entry: {\r\n      application: _path + <span class="hljs-string" style="color: #dd1144;">\'/app/app.js\'</span>,\r\n      vendors: dependencies\r\n    },\r\n\r\n    <span class="hljs-comment" style="color: #999988; font-style: italic;">// то, что получим на выходе</span>\r\n    output: {\r\n      path: path.join(_path, <span class="hljs-string" style="color: #dd1144;">\'dist\'</span>),\r\n      filename: path.join(<span class="hljs-string" style="color: #dd1144;">\'assets\'</span>, <span class="hljs-string" style="color: #dd1144;">\'js\'</span>, <span class="hljs-string" style="color: #dd1144;">\'[name].bundle.[chunkhash].js\'</span>),\r\n      chunkFilename: <span class="hljs-string" style="color: #dd1144;">\'[id].bundle.[chunkhash].js\'</span>,\r\n      publicPath: <span class="hljs-string" style="color: #dd1144;">\'/\'</span>\r\n    },\r\n\r\n    <span class="hljs-comment" style="color: #999988; font-style: italic;">// Небольшие настройки связанные с тем, где искать сторонние библиотеки</span>\r\n    resolve: {\r\n      extensions: [<span class="hljs-string" style="color: #dd1144;">\'\'</span>, <span class="hljs-string" style="color: #dd1144;">\'.js\'</span>],\r\n      modulesDirectories: [<span class="hljs-string" style="color: #dd1144;">\'node_modules\'</span>],\r\n      <span class="hljs-comment" style="color: #999988; font-style: italic;">// Алиасы - очень важный инструмент для определения области видимости ex. require(\'_modules/test/index\')</span>\r\n      alias: {\r\n        _svg:         path.join(_path, <span class="hljs-string" style="color: #dd1144;">\'app\'</span>, <span class="hljs-string" style="color: #dd1144;">\'assets\'</span>, <span class="hljs-string" style="color: #dd1144;">\'svg\'</span>),\r\n        _data:        path.join(_path, <span class="hljs-string" style="color: #dd1144;">\'app\'</span>, <span class="hljs-string" style="color: #dd1144;">\'data\'</span>),\r\n        _fonts:       path.join(_path, <span class="hljs-string" style="color: #dd1144;">\'app\'</span>, <span class="hljs-string" style="color: #dd1144;">\'assets\'</span>, <span class="hljs-string" style="color: #dd1144;">\'fonts\'</span>),\r\n        _modules:     path.join(_path, <span class="hljs-string" style="color: #dd1144;">\'app\'</span>, <span class="hljs-string" style="color: #dd1144;">\'modules\'</span>),\r\n        _images:      path.join(_path, <span class="hljs-string" style="color: #dd1144;">\'app\'</span>, <span class="hljs-string" style="color: #dd1144;">\'assets\'</span>, <span class="hljs-string" style="color: #dd1144;">\'images\'</span>),\r\n        _stylesheets: path.join(_path, <span class="hljs-string" style="color: #dd1144;">\'app\'</span>, <span class="hljs-string" style="color: #dd1144;">\'assets\'</span>, <span class="hljs-string" style="color: #dd1144;">\'stylesheets\'</span>),\r\n        _templates:   path.join(_path, <span class="hljs-string" style="color: #dd1144;">\'app\'</span>, <span class="hljs-string" style="color: #dd1144;">\'assets\'</span>, <span class="hljs-string" style="color: #dd1144;">\'templates\'</span>)\r\n      }\r\n    },\r\n    <span class="hljs-comment" style="color: #999988; font-style: italic;">// Настройка загрузчиков, они выполняют роль обработчика исходного файла в конечный</span>\r\n    <span class="hljs-built_in" style="color: #0086b3;">module</span>: {\r\n      loaders: [\r\n        { test: <span class="hljs-regexp" style="color: #009926;">/\\.jade$/</span>, loader: <span class="hljs-string" style="color: #dd1144;">\'jade-loader\'</span> },\r\n        { test: <span class="hljs-regexp" style="color: #009926;">/\\.(css|ttf|eot|woff|woff2|png|ico|jpg|jpeg|gif|svg)$/i</span>, loaders: [<span class="hljs-string" style="color: #dd1144;">\'file?context=\'</span> + rootAssetPath + <span class="hljs-string" style="color: #dd1144;">\'&amp;name=assets/static/[ext]/[name].[hash].[ext]\'</span>] },\r\n        { test: <span class="hljs-regexp" style="color: #009926;">/\\.styl$/</span>, loader: TextPlugin.extract(<span class="hljs-string" style="color: #dd1144;">\'style-loader\'</span>, <span class="hljs-string" style="color: #dd1144;">\'css-loader!autoprefixer-loader?browsers=last 5 version!stylus-loader\'</span>) }\r\n      ]\r\n    },\r\n\r\n    <span class="hljs-comment" style="color: #999988; font-style: italic;">// загружаем плагины</span>\r\n    plugins: [\r\n      <span class="hljs-keyword" style="font-weight: bold;">new</span> webpack.optimize.CommonsChunkPlugin(<span class="hljs-string" style="color: #dd1144;">\'vendors\'</span>, <span class="hljs-string" style="color: #dd1144;">\'assets/js/vendors.[hash].js\'</span>),\r\n      <span class="hljs-keyword" style="font-weight: bold;">new</span> TextPlugin(<span class="hljs-string" style="color: #dd1144;">\'assets/css/[name].[hash].css\'</span>),\r\n      <span class="hljs-keyword" style="font-weight: bold;">new</span> Manifest(path.join(_path + <span class="hljs-string" style="color: #dd1144;">\'/config\'</span>, <span class="hljs-string" style="color: #dd1144;">\'manifest.json\'</span>), {\r\n        rootAssetPath: rootAssetPath\r\n      }),\r\n      <span class="hljs-comment" style="color: #999988; font-style: italic;">// Этот файл будет являться "корневым" index.html</span>\r\n      <span class="hljs-keyword" style="font-weight: bold;">new</span> HtmlPlugin({\r\n        title: <span class="hljs-string" style="color: #dd1144;">\'Test APP\'</span>,\r\n        chunks: [<span class="hljs-string" style="color: #dd1144;">\'application\'</span>, <span class="hljs-string" style="color: #dd1144;">\'vendors\'</span>],\r\n        filename: <span class="hljs-string" style="color: #dd1144;">\'index.html\'</span>,\r\n        template: path.join(_path, <span class="hljs-string" style="color: #dd1144;">\'app\'</span>, <span class="hljs-string" style="color: #dd1144;">\'index.html\'</span>)\r\n      })\r\n    ]\r\n  }\r\n};\r\n</code></pre>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-weight: bold; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Аттеншен господа!</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Появились новые зависимости &ndash;&nbsp;которые нужно доставить в проект следующей командой:</span></p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="bash hljs" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;">$ npm i path manifest-revision-webpack-plugin extract-text-webpack-plugin html-webpack-plugin --save-dev\r\n</code></pre>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /></p>\r\n<h4 style="font-family: Verdana, sans-serif; font-size: 16.8px; margin: 0px; font-weight: 400; padding: 0px; background-color: #ffffff;">Разработка</h4>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Методом проб и ошибок, оптимальный для меня конфиг режима разработки &ndash; стал выглядеть следующим образом:</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /></p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="javascript hljs" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;"><span class="hljs-meta" style="color: #999999; font-weight: bold;">\'use strict\'</span>;\r\n\r\n<span class="hljs-comment" style="color: #999988; font-style: italic;">/**\r\n * Development config\r\n */</span>\r\n<span class="hljs-built_in" style="color: #0086b3;">module</span>.exports = <span class="hljs-function"><span class="hljs-keyword" style="font-weight: bold;">function</span>(<span class="hljs-params">_path</span>) </span>{\r\n\r\n  <span class="hljs-keyword" style="font-weight: bold;">return</span> {\r\n    context: _path,\r\n    debug: <span class="hljs-literal" style="color: teal;">true</span>,\r\n    devtool: <span class="hljs-string" style="color: #dd1144;">\'eval\'</span>,\r\n    devServer: {\r\n      contentBase: <span class="hljs-string" style="color: #dd1144;">\'./dist\'</span>,\r\n      info: <span class="hljs-literal" style="color: teal;">true</span>,\r\n      hot: <span class="hljs-literal" style="color: teal;">false</span>,\r\n      inline: <span class="hljs-literal" style="color: teal;">true</span>\r\n    }\r\n  }\r\n};\r\n</code></pre>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /></p>\r\n<h4 style="font-family: Verdana, sans-serif; font-size: 16.8px; margin: 0px; font-weight: 400; padding: 0px; background-color: #ffffff;">Окончательная сборка</h4>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">А вот настройка конечное сборки все еще в стадии &laquo;изменений&raquo;. Хотя работает на 5+</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /></p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="javascript hljs" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;"><span class="hljs-meta" style="color: #999999; font-weight: bold;">\'use strict\'</span>;\r\n\r\n<span class="hljs-comment" style="color: #999988; font-style: italic;">/**\r\n * Production config\r\n */</span>\r\n<span class="hljs-built_in" style="color: #0086b3;">module</span>.exports = <span class="hljs-function"><span class="hljs-keyword" style="font-weight: bold;">function</span>(<span class="hljs-params">_path</span>) </span>{\r\n  <span class="hljs-keyword" style="font-weight: bold;">return</span> {\r\n    context: _path,\r\n    debug: <span class="hljs-literal" style="color: teal;">false</span>,\r\n    devtool: <span class="hljs-string" style="color: #dd1144;">\'cheap-source-map\'</span>,\r\n    output: {\r\n      publicPath: <span class="hljs-string" style="color: #dd1144;">\'/\'</span>\r\n    }\r\n  }\r\n}\r\n</code></pre>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /></p>\r\n<h4 style="font-family: Verdana, sans-serif; font-size: 16.8px; margin: 0px; font-weight: 400; padding: 0px; background-color: #ffffff;">index.html</h4>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Этот шаблон, мы положим в папку&nbsp;</span><span style="font-weight: bold; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">./app/index.html</span><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;&ndash; именно он будет отдавать правильные пути до хешированной статики, после конечной сборки.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /></p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="html hljs xml" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;"><span class="hljs-meta" style="color: #999999; font-weight: bold;">&lt;!DOCTYPE html&gt;</span>\r\n<span class="hljs-tag" style="color: navy;">&lt;<span class="hljs-name">html{%</span> <span class="hljs-attr" style="color: teal;">if</span>(<span class="hljs-attr" style="color: teal;">o.htmlWebpackPlugin.files.manifest</span>) { %} <span class="hljs-attr" style="color: teal;">manifest</span>=<span class="hljs-string" style="color: #dd1144;">"{%= o.htmlWebpackPlugin.files.manifest %}"</span><span class="hljs-string" style="color: #dd1144;">{%</span> } %}&gt;</span>\r\n  <span class="hljs-tag" style="color: navy;">&lt;<span class="hljs-name">head</span>&gt;</span>\r\n    <span class="hljs-tag" style="color: navy;">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr" style="color: teal;">charset</span>=<span class="hljs-string" style="color: #dd1144;">"UTF-8"</span>&gt;</span>\r\n    <span class="hljs-tag" style="color: navy;">&lt;<span class="hljs-name">title</span>&gt;</span>{%=o.htmlWebpackPlugin.options.title || \'Webpack App\'%}<span class="hljs-tag" style="color: navy;">&lt;/<span class="hljs-name">title</span>&gt;</span>\r\n    {% for (var css in o.htmlWebpackPlugin.files.css) { %}\r\n      <span class="hljs-tag" style="color: navy;">&lt;<span class="hljs-name">link</span> <span class="hljs-attr" style="color: teal;">href</span>=<span class="hljs-string" style="color: #dd1144;">"{%=o.htmlWebpackPlugin.files.css[css] %}"</span> <span class="hljs-attr" style="color: teal;">rel</span>=<span class="hljs-string" style="color: #dd1144;">"stylesheet"</span>&gt;</span>\r\n    {% } %}\r\n  <span class="hljs-tag" style="color: navy;">&lt;/<span class="hljs-name">head</span>&gt;</span>\r\n  <span class="hljs-tag" style="color: navy;">&lt;<span class="hljs-name">body</span>&gt;</span>\r\n    {% for (var chunk in o.htmlWebpackPlugin.files.chunks) { %}\r\n    <span class="hljs-tag" style="color: navy;">&lt;<span class="hljs-name">script</span> <span class="hljs-attr" style="color: teal;">src</span>=<span class="hljs-string" style="color: #dd1144;">"{%=o.htmlWebpackPlugin.files.chunks[chunk].entry %}"</span>&gt;</span><span class="hljs-tag" style="color: navy;">&lt;/<span class="hljs-name">script</span>&gt;</span>\r\n    {% } %}\r\n  <span class="hljs-tag" style="color: navy;">&lt;/<span class="hljs-name">body</span>&gt;</span>\r\n<span class="hljs-tag" style="color: navy;">&lt;/<span class="hljs-name">html</span>&gt;</span>\r\n</code></pre>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /></p>\r\n<h4 style="font-family: Verdana, sans-serif; font-size: 16.8px; margin: 0px; font-weight: 400; padding: 0px; background-color: #ffffff;">В заключении</h4>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Хотелось бы поблагодарить разработчиков webpack за столь мощный инструмент.&nbsp;</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Скорость его работы действительно поражает, даже на больших объемах исходных файлов.&nbsp;</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Ах, да. Для того чтобы в своем проекте использовать например&nbsp;</span><span style="font-weight: bold; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">underscore</span><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;достаточно установить его привычной npm командой</span></p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="bash hljs" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;">$ npm i underscore --save\r\n</code></pre>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">После выполнения, библиотека попадет в dependencies &ndash; следовательно webpack, поместит его содержимое в файл vendors.[hash].js при этом захеширует название файла полученное от md5 размера исходников + время последнего их изменения.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Для чего это надо, объяснять не буду.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">На этом все, пробуйте, пишите комменты.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Спасибо.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /></p>\r\n<h4 style="font-family: Verdana, sans-serif; font-size: 16.8px; margin: 0px; font-weight: 400; padding: 0px; background-color: #ffffff;">Ссылки</h4>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="https://github.com/rambler-digital-solutions/rambler-webpack-boilerplate">Тут</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;можно посмотреть код приведенный в статье</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">А&nbsp;</span><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="https://webpack.github.io/">тут</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;ознакомиться с документацией по проекту</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Ну и тут&nbsp;</span><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="http://jlongster.com/Backend-Apps-with-Webpack--Part-III">статья</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">, которая поможет разложить все еще раз.</span></p>', '2016-09-01 19:00:47', '2016-10-23 14:35:20', 8, 5, NULL),
	(17, '10 потенциальных SQL ошибок, которые делают программисты', '10-potentsialinih-sql-oshibok-kotorie-delayut-programmisti', 'f17913c6c4ac4541d589c0ff96672fc0.jpg', '10-potentsialinih-sql-oshibok-kotorie-delayut-programmisti', '<p><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Java программисты мешают объектно-ориентированное и императивное мышление в зависимости от их уровня:</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&mdash; мастерства (каждый может программировать императивно)</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&mdash; догмы (шаблон для применения шаблонов где-либо и их именование)</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&mdash; настроения (применять истинный объектный подход немного сложнее чем императивный)</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Но всё меняется, когда Java разработчики пишут SQL код.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><a style="background-color: #ffffff; color: #6da3bd; font-family: Verdana, sans-serif; font-size: 14px;" name="habracut"></a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">SQL &mdash; это декларативный язык, который не имеет ничего общего с объектно-ориентированным или императивным мышлением. Очень легко выразить запрос в SQ, но довольно трудно выразить его корректно и оптимально. Разработчикам не только необходимо переосмыслить их парадигму программирования, им нужно ещё и думать в рамках теории множеств (set theory).</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Ниже перечислены общие ошибки, которые делают Java разработчики, использующие SQL в JDBC или jOOQ (без определённого порядка). Для&nbsp;</span><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="http://blog.jooq.org/2013/08/12/10-more-common-mistakes-java-developers-make-when-writing-sql/">других 10 ошибок, смотрите эту статью</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /></p>\r\n<h4 style="font-family: Verdana, sans-serif; font-size: 16.8px; margin: 0px; font-weight: 400; padding: 0px; background-color: #ffffff;">1. Забыл о NULL</h4>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Непонимание NULL &mdash; это скорее всего самая большая ошибка, которую Java разработчик может сделать, когда пишет SQL. Это может быть потому, что NULL ещё называется UNKNOWN. Если бы он назывался просто UNKNOWN, его было бы проще понять. Другая причина в том, что при получении данных и связывании переменных JDBC отражает SQL NULL в Java null. Это может привести к тому, что NULL = NULL (SQL) будет вести себя так же, как и null == null (JAVA).</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Один из самых ярких примеров заблуждения о NULL &mdash; это когда&nbsp;</span><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="http://blog.jooq.org/2012/12/24/row-value-expressions-and-the-null-predicate/">NULL предикаты используются со строковым выражением (row value expression)</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Другая, более специфическая проблема появляется при отсутствии понимания&nbsp;</span><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="http://blog.jooq.org/2012/07/27/not-in-vs-not-exists-vs-left-join-is-null-mysql/">значения NULL в NOT IN anti-joins</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><em style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Лекарство:</em><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Тренируй себя. Ничего сложного &mdash; во время написания SQL всегда думай о NULL:</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&mdash; Этот предикат корректен относительно NULL?</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&mdash; Влияет ли NULL на результат этой функции?</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /></p>\r\n<h4 style="font-family: Verdana, sans-serif; font-size: 16.8px; margin: 0px; font-weight: 400; padding: 0px; background-color: #ffffff;">2. Обработка данных в памяти Java</h4>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Не многие Java программисты знают SQL очень хорошо. Случайный JOIN, странный UNION и ладно. А оконные функции? Группирующие наборы? Многие Java разработчики загружают SQL данные в память, трансформируют их в какую-нибудь подходящую коллекцию и выполняют нужные вычисления на этих коллекциях с многословными циклическими структурами (по-крайней мере до&nbsp;</span><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="http://blog.informatech.cr/2013/03/24/java-streams-preview-vs-net-linq/">улучшения коллекций в JAVA 8</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">).</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Но некоторые SQL базы данных поддерживают дополнительные (SQL стандарт!) OLAP функции, которые подходят для этого лучше и являются более простыми в написании. Один из примеров (не стандарт) &mdash; это отличный&nbsp;</span><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="http://stackoverflow.com/a/12245888/521799">оператор MODEL от Oracle</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">. Просто позволь БД сделать обработку и вытащить результаты в память Java. Потому что, в конце концов, какой-то умный парень уже оптимизировал эти дорогие продукты. Итак, используя OLAP в БД, ты получаешь две вещи:</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&mdash; Простоту. Скорее всего, проще писать правильно на SQL, чем на Java.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&mdash; Производительность. БД скорее всего будут быстрее чем твой алгоритм. И, что важнее, тебе не придётся тянуть миллионы записей по проводам.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><em style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Лекарство:</em><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Каждый раз когда ты пишешь ориентированный на данные алгоритм с помощью Java, спрашивай себя: &laquo;Есть ли возможность переложить эту работу на базу данных?&raquo;</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /></p>\r\n<h4 style="font-family: Verdana, sans-serif; font-size: 16.8px; margin: 0px; font-weight: 400; padding: 0px; background-color: #ffffff;">3. Использование UNION вместо UNION ALL</h4>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Позор тому, что UNION ALL требует дополнительного слова относительно UNION. Было бы намного лучше, если бы SQL стандарт был определён поддерживать:</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&mdash; UNION (позволяет дублирование)</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&mdash; UNION DISTINCT (убирает дублирование)</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Удаление дубликатов не только реже используется, оно ещё и довольно медленно на больших результатах выборки, т.к. два под запроса должны быть упорядочены, и каждый кортеж должен быть сравнен с его последующим кортежем.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Помни, что даже если SQL стандарт определяет INTERSECT ALL и EXCEPT ALL, не каждая БД может реализовывать эти мало используемые наборы операций.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><em style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Лекарство:</em><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Думай, хотел ли ты написать UNION ALL каждый раз, когда пишешь UNION.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /></p>\r\n<h4 style="font-family: Verdana, sans-serif; font-size: 16.8px; margin: 0px; font-weight: 400; padding: 0px; background-color: #ffffff;">4. Использование JDBC для постраничной разбивки большой выборки</h4>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Большинство БД поддерживают какие-то средства для постраничной разбивки через LIMIT&hellip; OFFSET, TOP&hellip; START AT, OFFSET&hellip; FETCH операторов. В отсутствии поддержки этих операторов всё ещё есть возможность наличия&nbsp;</span><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="http://stackoverflow.com/q/6033080/521799">ROWNUM (Oracle)</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;или&nbsp;</span><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="http://stackoverflow.com/q/7073263/521799">ROW_NUMBER() OVER() фильтрации (DB2, SQL Server 2008 и другие)</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">, которые намного быстрее разбивки в памяти. Это относится преимущественно к большим смещениям!</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><em style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Лекарство:</em><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Просто используйте эти операторы, или инструмент(такой, как jOOQ), который может имитировать эти операторы за вас.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /></p>\r\n<h4 style="font-family: Verdana, sans-serif; font-size: 16.8px; margin: 0px; font-weight: 400; padding: 0px; background-color: #ffffff;">5. Соединение данных в памяти Java</h4>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">С ранних дней SQL и до сих пор некоторые Java программисты с тяжелым сердцем пишут JOINы. У них есть устаревший страх того, что JOINы выполняются медленно. Это может быть так, если оптимизатор накладных расходов выбирает сделать вложенный цикл, загружая целые таблицы в память перед созданием ячеек присоединённой таблицы. Но это случается редко. С нормальными предикатами, ограничениями, индексами, MERGE JOIN или HASH JOIN операции выполняются очень быстро &mdash; всё зависит от корректных метаданных (</span><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="http://blog.jooq.org/2011/11/25/how-schema-meta-data-impacts-oracle-query-transformations/">Tom Kyte хорошо написал об этом</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">). Тем не менее, наверняка ещё остались немногие Java разработчики, которые загружают две таблицы двумя отдельными запросами и соединяют их в памяти Java тем или иным способом.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><em style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Лекарство:</em><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Если бы выбираете из разных таблиц на различных этапах, подумайте ещё раз, вдруг вы можете выразить ваши запросы одним.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /></p>\r\n<h4 style="font-family: Verdana, sans-serif; font-size: 16.8px; margin: 0px; font-weight: 400; padding: 0px; background-color: #ffffff;">6. Использование DISTINCT или UNION для удаления дубликатов из случайного декартова произведения</h4>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Из-за сложных соединений (JOIN) любой разработчик может потерять след в значащих связях SQL запроса. Если конкретнее, то при использовании связи с составными внешними ключами можно забыть добавить значащие предикаты в JOIN&hellip; ON утверждения. Это может привести к дублированию строк всегда или только в исключительных ситуациях. Тогда некоторые разработчики могут добавить оператор DISTINCT для прекращения дублирования данных. Это не правильно по трём причинам:</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&mdash; Это может излечить последствия, но не причину. А ещё это может не решить последствия при граничных условиях.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&mdash; Это медленно для больших выборок. DISTINCT выполняет ORDER BY операцию для удаления дублирования.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&mdash; Это медленно для больших декартовых произведений которые всё равно будут загружены в память.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><em style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Лекарство:</em><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Как правило, если Вы получаете нежелательные дубликаты, пересмотрите свои JOIN предикаты. Вероятно там где-то образовалось небольшое декартово произведение.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /></p>\r\n<h4 style="font-family: Verdana, sans-serif; font-size: 16.8px; margin: 0px; font-weight: 400; padding: 0px; background-color: #ffffff;">7. Избегание оператора MERGE</h4>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">На самом деле это не ошибка, но, возможно, это отсутствие знаний или страхи&nbsp;</span><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="http://blog.jooq.org/2011/11/29/arcane-magic-with-the-sql2003-merge-statement/">мощного оператора MERGE</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">. Некоторые БД знают другие формы UPSERT оператора, например MySQL ON DUPLICATE KEY UPDATE. На самом деле MERGE очень мощен, особенно в БД, которые сильно расширяют SQL стандарт, таких как&nbsp;</span><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="http://msdn.microsoft.com/de-de/library/bb510625.aspx">SQL Server</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><em style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Лекарство:</em><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Если Вы делаете UPSERT, выстраивая цепочку из INSERT и UPDATE или SELECT&hellip; FOR UPDATE и INSERT/UPDATE, задумайтесь ещё раз. Вместо риска гонки за ресурсами, вы можете написать более простое MERGE запрос.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /></p>\r\n<h4 style="font-family: Verdana, sans-serif; font-size: 16.8px; margin: 0px; font-weight: 400; padding: 0px; background-color: #ffffff;">8. Использование агрегатных функций вместо оконных функций</h4>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Перед появлением оконных функций, единственным средством для агрегации данных в SQL было использование GROUP BY вместе с агрегатными функциями в проекции. Это хорошо работает в большинстве случаев, и если агрегированные данные должны быть наполнены обычными данными, то сгруппированный запрос может быть написан в присоединённом под запросе.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Но SQL:2003 определяет оконные функции, которые реализованы многими поставщиками БД. Оконные функции могут агрегировать данные на не группированных выборках. По факту, каждая оконная функция поддерживает свою собственную, независимую PARTITION BY операцию, которая является отличным инструментом для построения отчётов.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Использование оконных функций позволит:</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&mdash; Построить более читаемый SQL (меньше выделенных GROUP BY выражений в под запросах)</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&mdash; Улучшить производительность т.к. RDBMS может легче оптимизировать оконные функции&nbsp;</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><em style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Лекарство:</em><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Когда вы пишите GROUP BY выражение в под запросе, задумайтесь, может ли он быть выражен оконной функцией?</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /></p>\r\n<h4 style="font-family: Verdana, sans-serif; font-size: 16.8px; margin: 0px; font-weight: 400; padding: 0px; background-color: #ffffff;">9. Использование сортировки в памяти при разных параметрах</h4>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Оператор ORDER BY поддерживает множество типов выражений, включая CASE, который может быть очень полезен при определении параметра сортировки. Вам никогда не следует сортировать данные в памяти Java только потому, что:</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&mdash; SQL сортировка слишком медленная.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&mdash; SQL сортировка не может сделать этого.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><em style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Лекарство:</em><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Если вы сортируете какие-либо SQL данные в памяти Java, задумайтесь, возможно ли перенести эту сортировку в БД? Это отлично сочетается со страничной разбивкой в БД.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /></p>\r\n<h4 style="font-family: Verdana, sans-serif; font-size: 16.8px; margin: 0px; font-weight: 400; padding: 0px; background-color: #ffffff;">10. Поочерёдная вставка множества записей</h4>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">JDBC знает, что такое пакет (batch), и Вам следует использовать это. Не делайте INSERT тысяч записей одной за другой, создавая новый PreparedStatement каждый раз. Если все ваши записи идут в одну таблицу, создайте партию INSERT запросов с одним SQL запросом и несколькими связываемыми наборами данных. В зависимости от вашей БД и её конфигурации, что бы сохранить UNDO лог чистым, Вам может потребоваться делать commit спустя какое-то количество вставленных записей.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><em style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Лекарство:</em><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Всегда используйте пакетную вставку больших наборов данных.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /></p>\r\n<h5 style="padding: 0px; margin: 0px; font-family: Verdana, sans-serif; font-weight: 400; font-size: 15.4px; background-color: #ffffff;">Несколько интересных книг на тему</h5>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&mdash;&nbsp;</span><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="http://pragprog.com/book/bksqla/sql-antipatterns">SQL Antipatterns by Bill Karwin</a><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&mdash;&nbsp;</span><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="http://winand.at/book/sql-performance-explained">SQL Performance Explained by Markus Winand</a></p>', '2016-09-01 19:00:47', '2016-10-23 14:33:42', 6, 5, NULL),
	(26, '25 Laravel Tips and Tricks', '25 Laravel Tips and Tricks', '395e214604f1fd31db05c9fd98cc6c8e.jpg', '25-laravel-tips-and-tricks', '<p><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Было время, достаточно недавно, когда PHP и его сообщество ненавидели. Главная шутка была про то, насколько ужасен PHP.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Да, к сожалению, сообщество и экосистема просто были ниже сообществ других современных языков по уровню. Казалось, что предназначение PHP было прожить большинство времени в форме беспорядочных тем для WordPress.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Но позже, на удивление, вещи начали меняться &mdash; и достаточно быстро. Как будто пока ведьма помешивала горшочек, из ниоткуда начали появляться новаторские проекты. Наверно, самый заметный проект был Composer: наиболее полный менеджер зависимостей для PHP (как Bundler для Ruby или NPM для Node.js). В прошлом PHP разработчики были вынуждены совладать с PEAR (что было страшным сном, на самом деле), сейчас, благодаря Composer, они могут просто обновить JSON файл, и немедленно подтянуть все нужные зависимости. Здесь &mdash; профайлер, там &mdash; фреймворк для тестирования. Это занимает секунды.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><a style="background-color: #ffffff; color: #6da3bd; font-family: Verdana, sans-serif; font-size: 14px;" name="habracut"></a><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">В переполненном мире PHP фреймворков, как раз, когда CodeIgniter начал выдыхаться, фреймворк Laravel Тэйлора Отвелла возник из пепла, чтобы стать любимцем общества. С таким простым и элегантным синтаксисом, создавать приложения с Laravel и PHP было абсолютной забавой! Далее, c четвертой версией фреймворка, полностью использовавшим Composer, наконец-то показалось, что для сообщества все вещи встают на места.</span></p>\r\n<p><img style="border-style: none; max-width: 100%; vertical-align: middle; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" src="https://habrastorage.org/getpro/habr/post_images/6a2/5a3/16d/6a25a316d47cae4ee286ffe974f860c4.png" alt="image" /></p>\r\n<p><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Хотите миграций (контроль версий базы данных)? Сделано! Как насчёт мощной реализации Active Record? Конечно, Eloquent сделает всё за вас. Как насчёт возможности тестировать? Безусловно! Маршрутизация (роутинг)? Непременно! Что насчёт хорошо протестированного HTTP слоя? Благодаря Composer, Laravel использует много превосходных Symfony компонентов. Когда доходит до дела, есть все шансы, что Laravel уже это может вам предложить!</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><img style="border-style: none; max-width: 100%; vertical-align: middle; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" src="https://habrastorage.org/getpro/habr/post_images/164/674/2cd/1646742cd2daded685e998e0269a7dae.png" alt="image" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Раньше PHP был похож на игру Дженга &mdash; в одном кубике от того, чтобы развалиться &mdash; вдруг, благодаря Laravel и Composer, загорелся свет в конце тоннеля. Так что уберем все намёки, и давайте пороемся во всем, что фреймворк может предложить!</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /></p>\r\n<h4 style="font-family: Verdana, sans-serif; font-size: 16.8px; margin: 0px; font-weight: 400; padding: 0px; background-color: #ffffff;">1. Красноречивые запросы*</h4>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Laravel предлагает одну из самых мощных реализаций Active Record в мире PHP. Скажем, у вас есть таблица orders вместе с Eloquent моделью Order.</span></p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="php hljs" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;"><span class="hljs-class"><span class="hljs-keyword" style="font-weight: bold;">class</span> <span class="hljs-title" style="color: #445588; font-weight: bold;">Order</span> <span class="hljs-keyword" style="font-weight: bold;">extends</span> <span class="hljs-title" style="color: #445588; font-weight: bold;">Eloquent</span> </span>{}\r\n</code></pre>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Мы с легкостью можем выполнить любое количество запросов в базу данных, используя простой и элегантый код PHP. Не надо разбрасываться беспорядочно SQL. Давайте получим все заказы.</span></p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="php hljs" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;">Order::all();\r\n</code></pre>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Готово! Или, может, эти заказы должны быть отсортированы по дате. Легко:</span></p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="php hljs" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;">$orders = Order::orderBy(<span class="hljs-string" style="color: #dd1144;">\'release_date\'</span>, <span class="hljs-string" style="color: #dd1144;">\'desc\'</span>)-&gt;get();\r\n</code></pre>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">А что, если вместо получения записи, нам надо сохранить новый заказ в базу. Мы, конечно, можем это сделать.</span></p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="php hljs" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;">$order = <span class="hljs-keyword" style="font-weight: bold;">new</span> Order;\r\n$order-&gt;title = <span class="hljs-string" style="color: #dd1144;">\'Xbox One\'</span>;\r\n$order-&gt;save();\r\n</code></pre>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Готово! С Laravel, задачи, которые раньше были громоздкими для выполнения, теперь до смеха просты.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">* &mdash; Eloquent &mdash; название реализации Active Record в Laravel, а также в переводе с английского красноречивый.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /></p>\r\n<h4 style="font-family: Verdana, sans-serif; font-size: 16.8px; margin: 0px; font-weight: 400; padding: 0px; background-color: #ffffff;">2. Гибкая маршрутизация (роутинг)</h4>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Laravel уникален тем, что может быть использован разными способами. Предпочитаете более простой и похожий на Sinatra роутинг? Laravel легко может это сделать, используя анонимные функции</span></p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="php hljs" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;">Route::get(<span class="hljs-string" style="color: #dd1144;">\'orders\'</span>, <span class="hljs-function"><span class="hljs-keyword" style="font-weight: bold;">function</span><span class="hljs-params">()</span>\r\n</span>{\r\n    <span class="hljs-keyword" style="font-weight: bold;">return</span> View::make(<span class="hljs-string" style="color: #dd1144;">\'orders.index\'</span>)\r\n        -&gt;with(<span class="hljs-string" style="color: #dd1144;">\'orders\'</span>, Order::all());\r\n});\r\n</code></pre>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Это может быть полезным для маленьких проектов и API, но есть большие шансы, что вам понадобятся контроллеры для большинства ваших проектов. Окей, Laravel это тоже умеет.</span></p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="php hljs" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;">Route::get(<span class="hljs-string" style="color: #dd1144;">\'orders\'</span>, <span class="hljs-string" style="color: #dd1144;">\'OrdersController@index\'</span>);\r\n</code></pre>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Готово! Заметили, как Laravel растет по мере ваших потребностей? Уровень приспособления &mdash; вот, что делает фреймворк таким популярным сегодня.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /></p>\r\n<h4 style="font-family: Verdana, sans-serif; font-size: 16.8px; margin: 0px; font-weight: 400; padding: 0px; background-color: #ffffff;">3. Отношения без проблем</h4>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Что мы делаем в объектах, когда нужно определить отношения? Например, задача точно принадлежит пользователю. Как это указать в Laravel? Предположив, что нужные таблицы в базе данных созданы, мы только должны обратиться к связанным Eloquent моделям.</span></p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="php hljs" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;"><span class="hljs-class"><span class="hljs-keyword" style="font-weight: bold;">class</span> <span class="hljs-title" style="color: #445588; font-weight: bold;">Task</span> <span class="hljs-keyword" style="font-weight: bold;">extends</span> <span class="hljs-title" style="color: #445588; font-weight: bold;">Eloquent</span> </span>{\r\n    <span class="hljs-keyword" style="font-weight: bold;">public</span> <span class="hljs-function"><span class="hljs-keyword" style="font-weight: bold;">function</span> <span class="hljs-title" style="color: #990000; font-weight: bold;">user</span><span class="hljs-params">()</span>\r\n    </span>{\r\n        <span class="hljs-keyword" style="font-weight: bold;">return</span> $this-&gt;belongsTo(<span class="hljs-string" style="color: #dd1144;">\'User\'</span>);\r\n    }\r\n}\r\n\r\n<span class="hljs-class"><span class="hljs-keyword" style="font-weight: bold;">class</span> <span class="hljs-title" style="color: #445588; font-weight: bold;">User</span> <span class="hljs-keyword" style="font-weight: bold;">extends</span> <span class="hljs-title" style="color: #445588; font-weight: bold;">Eloquent</span> </span>{\r\n    <span class="hljs-keyword" style="font-weight: bold;">public</span> <span class="hljs-function"><span class="hljs-keyword" style="font-weight: bold;">function</span> <span class="hljs-title" style="color: #990000; font-weight: bold;">tasks</span><span class="hljs-params">()</span>\r\n    </span>{\r\n        <span class="hljs-keyword" style="font-weight: bold;">return</span> $this-&gt;hasMany(<span class="hljs-string" style="color: #dd1144;">\'Task\'</span>);\r\n    }\r\n}\r\n</code></pre>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Всё готово! Давайте получим все задачи пользователя с id = 1. Для этого нам понадобится всего 2 строчки кода.</span></p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="php hljs" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;">$user = User::find(<span class="hljs-number" style="color: teal;">1</span>);\r\n$tasks = $user-&gt;tasks;\r\n</code></pre>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Впрочем, так как мы указали отношение с обеих сторон, если мы захотим получить пользователя, за которым закреплена данная задача, это также легко сделать.</span></p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="php hljs" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;">$task = Task::find(<span class="hljs-number" style="color: teal;">1</span>);\r\n$user = $task-&gt;user;\r\n</code></pre>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /></p>\r\n<h4 style="font-family: Verdana, sans-serif; font-size: 16.8px; margin: 0px; font-weight: 400; padding: 0px; background-color: #ffffff;">4. Связь формы с моделью</h4>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Очень часто, будет полезным связать форму с моделью. Очевидный пример &mdash; когда Вы хотите изменить какую-то запись в базе. Связав форму с моделью, мы можем моментально заполнить поля формы данными из базы.</span></p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="php hljs" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;">{{ Form::model($order) }}</code></pre>\r\n<div>{{ Form::label(<span class="hljs-string" style="color: #dd1144;">\'title\'</span>, <span class="hljs-string" style="color: #dd1144;">\'Title:\'</span>) }} {{ Form::text(<span class="hljs-string" style="color: #dd1144;">\'title\'</span>) }}</div>\r\n<div>{{ Form::label(<span class="hljs-string" style="color: #dd1144;">\'description\'</span>, <span class="hljs-string" style="color: #dd1144;">\'Description:\'</span>) }} {{ Form::textarea(<span class="hljs-string" style="color: #dd1144;">\'description\'</span>) }}</div>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="php hljs" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;">\r\n{{ Form::close() }}\r\n</code></pre>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Так как форма связана с объектом модели Order, в полях будет отображаться данные из таблицы. Вот так просто!</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /></p>\r\n<h4 style="font-family: Verdana, sans-serif; font-size: 16.8px; margin: 0px; font-weight: 400; padding: 0px; background-color: #ffffff;">5. Кеш запросов в базу</h4>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Слишком много запросов в базу, и достаточно быстро Ваше приложение может стать, как черная патока. К счастью, Laravel предоставляет простой механизм кеширования этих запросов, используя всего один вызов метода.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Давайте получим все вопросы из базы данных, но при этом закешируем запрос, так как вряд ли эта таблица будет часто изменяться.</span></p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="php hljs" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;">$questions = Question::remember(<span class="hljs-number" style="color: teal;">60</span>)-&gt;get();\r\n</code></pre>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Вот и всё! Теперь, в течение следующего часа, этот запрос будет храниться в кеше, и база будет нетронутой.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /></p>\r\n<h4 style="font-family: Verdana, sans-serif; font-size: 16.8px; margin: 0px; font-weight: 400; padding: 0px; background-color: #ffffff;">6. Композиторы шаблонов</h4>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Вы столкнётесь с ситуациями, когда несколько шаблонов потребуют некоторую переменную или кусок данных. Хороший пример этого &mdash; навигационное меню, которое отображает список тегов.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Чтобы контроллеры были с минимальным кодом, Laravel предлагает композиторы шаблонов (вьюшек), чтобы управлять такими вещами.</span></p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="php hljs" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;">View::composer(<span class="hljs-string" style="color: #dd1144;">\'layouts.nav\'</span>, <span class="hljs-function"><span class="hljs-keyword" style="font-weight: bold;">function</span><span class="hljs-params">($view)</span>\r\n</span>{\r\n    $view-&gt;with(<span class="hljs-string" style="color: #dd1144;">\'tags\'</span>, [<span class="hljs-string" style="color: #dd1144;">\'tag1\'</span>, <span class="hljs-string" style="color: #dd1144;">\'tag2\'</span>]);\r\n});\r\n</code></pre>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Использовав этот кусок кода, в любой момент, когда подгружен файл layouts/nav.blade.php, у него (у файла) будет доступ к переменной $tags.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /></p>\r\n<h4 style="font-family: Verdana, sans-serif; font-size: 16.8px; margin: 0px; font-weight: 400; padding: 0px; background-color: #ffffff;">7. Простая авторизация</h4>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Laravel использует очень простой подход к авторизации. Просто передайте массив данных, которые Вы, скорее всего, получили из формы логина, в Auth::attempt(). Если предоставленный массив соответствует тому, что сохранено в таблице users, пользователь моментально будет авторизован.</span></p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="php hljs" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;">$user = [\r\n    <span class="hljs-string" style="color: #dd1144;">\'email\'</span> =&gt; <span class="hljs-string" style="color: #dd1144;">\'email\'</span>,\r\n    <span class="hljs-string" style="color: #dd1144;">\'password\'</span> =&gt; <span class="hljs-string" style="color: #dd1144;">\'password\'</span>\r\n];\r\n \r\n<span class="hljs-keyword" style="font-weight: bold;">if</span> (Auth::attempt($user))\r\n{\r\n    <span class="hljs-comment" style="color: #999988; font-style: italic;">// пользователь авторизован</span>\r\n}\r\n</code></pre>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Что если надо произвести выход при переходе, например на /logout URI?</span></p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="php hljs" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;">Route::get(<span class="hljs-string" style="color: #dd1144;">\'logout\'</span>, <span class="hljs-function"><span class="hljs-keyword" style="font-weight: bold;">function</span><span class="hljs-params">()</span>\r\n</span>{\r\n    Auth::logout();\r\n     \r\n    <span class="hljs-keyword" style="font-weight: bold;">return</span> Redirect::home();\r\n});\r\n</code></pre>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /></p>\r\n<h4 style="font-family: Verdana, sans-serif; font-size: 16.8px; margin: 0px; font-weight: 400; padding: 0px; background-color: #ffffff;">8. Ресурсы</h4>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Работать RESTfully в Laravel также очень легко! Чтобы объявить контроллер ресурс, просто вызовите Route::resource() следующим образом.</span></p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="php hljs" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;">Route::resource(<span class="hljs-string" style="color: #dd1144;">\'orders\'</span>, <span class="hljs-string" style="color: #dd1144;">\'OrdersController\'</span>);\r\n</code></pre>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Этот код зарегистрирует 8 роутов.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /></p>\r\n<ul style="margin: 0px 0px 0px 20px; padding: 0px; list-style-position: outside; list-style-image: initial; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">\r\n<li style="margin-left: 20px;">GET /orders</li>\r\n<li style="margin-left: 20px;">GET /orders/:order</li>\r\n<li style="margin-left: 20px;">GET /orders/create</li>\r\n<li style="margin-left: 20px;">GET /orders/:order/edit</li>\r\n<li style="margin-left: 20px;">POST /orders</li>\r\n<li style="margin-left: 20px;">PUT /orders/:order</li>\r\n<li style="margin-left: 20px;">PATCH /orders/:order</li>\r\n<li style="margin-left: 20px;">DELETE /orders/:order</li>\r\n</ul>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Далее, OrdersController может быть сгенерирован из командной строки:</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><code style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 14px; color: #222222; background-color: #ffffff;">php artisan controller:make OrdersController</code><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">В этом контроллере, каждый метод будет соответствовать одному из роутов, описанных выше. Например, /orders вызовет метод index, /orders/create &mdash; метод create и так далее.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Теперь у нас есть необходимая сила, чтобы с легкостью строить RESTful приложения и API.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /></p>\r\n<h4 style="font-family: Verdana, sans-serif; font-size: 16.8px; margin: 0px; font-weight: 400; padding: 0px; background-color: #ffffff;">9. Шаблонизатор Blade</h4>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Да, PHP по натуре язык шаблонов, но он не стал слишком хорошим. Впрочем, ничего страшного. Laravel предлагает свой движок Blade, чтобы восполнить пробел. Просто назовите ваши шаблоны с расширением .blade.php, и они соответствующим образом будут парситься. Теперь мы можем делать следующее:</span></p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="php hljs" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;">@<span class="hljs-keyword" style="font-weight: bold;">if</span> ($orders-&gt;count())</code></pre>\r\n<ul>\r\n<ul>@</ul>\r\n</ul>\r\n<p><span class="hljs-keyword" style="font-weight: bold;">foreach</span></p>\r\n<ul>\r\n<ul>($orders</ul>\r\n</ul>\r\n<p><span class="hljs-keyword" style="font-weight: bold;">as</span></p>\r\n<ul>\r\n<ul>$order)\r\n<li>{{ $order-&gt;title }}</li>\r\n@</ul>\r\n</ul>\r\n<p><span class="hljs-keyword" style="font-weight: bold;">endforeach</span></p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="php hljs" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;">\r\n@<span class="hljs-keyword" style="font-weight: bold;">endif</span>\r\n</code></pre>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /></p>\r\n<h4 style="font-family: Verdana, sans-serif; font-size: 16.8px; margin: 0px; font-weight: 400; padding: 0px; background-color: #ffffff;">10. Средства для тестирования</h4>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Так как Laravel использует Composer, мы тотчас имеет поддержку PHPUnit &ldquo;из коробки&rdquo;. Установите фреймворк и запустите phpunit из командной строки, чтобы протестировать.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">В дополнение к этому Laravel предлагает некоторое количество хелперов для некоторых общих типов функциональных тестов</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Давайте проверим, что домашняя страница возвращает код ответа 200.</span></p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="php hljs" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;"><span class="hljs-keyword" style="font-weight: bold;">public</span> <span class="hljs-function"><span class="hljs-keyword" style="font-weight: bold;">function</span> <span class="hljs-title" style="color: #990000; font-weight: bold;">test_home_page</span><span class="hljs-params">()</span>\r\n</span>{\r\n    $this-&gt;call(<span class="hljs-string" style="color: #dd1144;">\'GET\'</span>, <span class="hljs-string" style="color: #dd1144;">\'/\'</span>);\r\n    $this-&gt;assertResponseOk();\r\n}\r\n</code></pre>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Или, может, мы хотим проверить, что, когда контактная форма отправлена на сервер, пользователь перенаправлен на домашнюю страницу с сообщением.</span></p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="php hljs" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;"><span class="hljs-keyword" style="font-weight: bold;">public</span> <span class="hljs-function"><span class="hljs-keyword" style="font-weight: bold;">function</span> <span class="hljs-title" style="color: #990000; font-weight: bold;">test_contact_page_redirects_user_to_home_page</span><span class="hljs-params">()</span>\r\n</span>{\r\n    $postData = [\r\n        <span class="hljs-string" style="color: #dd1144;">\'name\'</span> =&gt; <span class="hljs-string" style="color: #dd1144;">\'Joe Example\'</span>,\r\n        <span class="hljs-string" style="color: #dd1144;">\'email\'</span> =&gt; <span class="hljs-string" style="color: #dd1144;">\'email-address\'</span>,\r\n        <span class="hljs-string" style="color: #dd1144;">\'message\'</span> =&gt; <span class="hljs-string" style="color: #dd1144;">\'I love your website\'</span>\r\n    ];\r\n \r\n    $this-&gt;call(<span class="hljs-string" style="color: #dd1144;">\'POST\'</span>, <span class="hljs-string" style="color: #dd1144;">\'/contact\'</span>, $postData);\r\n \r\n    $this-&gt;assertRedirectedToRoute(<span class="hljs-string" style="color: #dd1144;">\'home\'</span>, <span class="hljs-keyword" style="font-weight: bold;">null</span>, [<span class="hljs-string" style="color: #dd1144;">\'flash_message\'</span>]);\r\n}\r\n</code></pre>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /></p>\r\n<h4 style="font-family: Verdana, sans-serif; font-size: 16.8px; margin: 0px; font-weight: 400; padding: 0px; background-color: #ffffff;">11. Компонент &ldquo;Дистанционное управление&rdquo;</h4>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Частью Laravel 4.1, который был выпущен в ноябре 2013, стала возможность написать консольную команду для Artisan, чтобы по SSH подключаться к серверу и выполнять любые действия. Просто используйте SSH фасад:</span></p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="php hljs" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;">SSH::into(<span class="hljs-string" style="color: #dd1144;">\'production\'</span>)-&gt;run([\r\n    <span class="hljs-string" style="color: #dd1144;">\'cd /var/www\'</span>,\r\n    <span class="hljs-string" style="color: #dd1144;">\'git pull origin master\'</span>\r\n]);\r\n</code></pre>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">В метод run() передайте массив команд, а Laravel займётся всем остальным! Теперь, так как есть смысл выполнять команды в качестве Artisan команд, вам всего лишь нужно выполнить&nbsp;</span><code style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 14px; color: #222222; background-color: #ffffff;">php artisan command:make DeployCommand</code><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;и в метод fire() написать нужный код для выполнения деплоя.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /></p>\r\n<h4 style="font-family: Verdana, sans-serif; font-size: 16.8px; margin: 0px; font-weight: 400; padding: 0px; background-color: #ffffff;">12. События</h4>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Laravel предлагает элегантную реализацию шаблона Observer, которую вы можете использовать где угодно в Вашем приложении. Подписывайтесь на нативные события, такие, как illuminate.query, или запускайте и слушайте свои собственные.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Продуманное использование событий даст вам много возможностей.</span></p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="php hljs" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;">Event::listen(<span class="hljs-string" style="color: #dd1144;">\'user.signUp\'</span>, <span class="hljs-function"><span class="hljs-keyword" style="font-weight: bold;">function</span><span class="hljs-params">()</span>\r\n</span>{\r\n    <span class="hljs-comment" style="color: #999988; font-style: italic;">// выполните то, что надо,</span>\r\n    <span class="hljs-comment" style="color: #999988; font-style: italic;">// когда пользователь регистрируется</span>\r\n});\r\n</code></pre>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Как и большинство вещей в Laravel, если вы предпочитаете указывать название класса, а не анонимную функцию, вы можете спокойно это сделать. Laravel разрулит всё, используя IoC контейнер.</span></p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="php hljs" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;">Event::listen(<span class="hljs-string" style="color: #dd1144;">\'user.signUp\'</span>, <span class="hljs-string" style="color: #dd1144;">\'UserEventHandler\'</span>);\r\n</code></pre>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /></p>\r\n<h4 style="font-family: Verdana, sans-serif; font-size: 16.8px; margin: 0px; font-weight: 400; padding: 0px; background-color: #ffffff;">13. Покажите маршруты</h4>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><img style="border-style: none; max-width: 100%; vertical-align: middle; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" src="https://habrastorage.org/getpro/habr/post_images/75b/245/7de/75b2457dedc13ba6a7cae386201605f2.png" alt="image" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Приложение растёт, и может стать тяжело посмотреть, какие роуты описаны. Особенно, если Вы не уделяли должного внимания файлу routes.php (например, излишния описания роутов).</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Laravel предлагает удобную команду routes, которая покажет все зарегистрированные роуты, наряду с методами контроллеров, которые эти роуты вызывают.</span></p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="php hljs" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;">php artisan routes\r\n</code></pre>\r\n<p>&nbsp;</p>\r\n<h4 style="font-family: Verdana, sans-serif; font-size: 16.8px; margin: 0px; font-weight: 400; padding: 0px; background-color: #ffffff;">14. Очереди</h4>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Подумайте о событии, когда пользователь регистрируется в Вашем приложении. Скорее всего, произойдет некоторое количество побочных событий. База данных должна быть обновлена, должен увеличиться счёт, письмо приветствия должно быть отправлено, и так далее. К сожалению, такие действия имеют тенденцию занимать много времени.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Зачем заставлять пользователей ждать, пока произойдут эти события, если мы можем отправить выполняться эти события в бекграунде?</span></p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="php hljs" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;">Queue::push(<span class="hljs-string" style="color: #dd1144;">\'SignUpService\'</span>, compact(<span class="hljs-string" style="color: #dd1144;">\'user\'</span>));\r\n</code></pre>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Наверно, самое замечательное, это то, что Laravel превосходно работает с Iron.io &ldquo;push&rdquo; очередями. Это значит, что даже не имея опыта работы с воркерами или демонами, мы всё равно можем использовать очереди. Просто опишите роут с помощью команды php artisan queue:subscribe, и Iron.io будет отправлять данные на этот урл каждый раз, когда задача отправлена в очередь. А этот роут в свою очередь выполнит нужные действия.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><img style="border-style: none; max-width: 100%; vertical-align: middle; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" src="https://habrastorage.org/getpro/habr/post_images/9a7/1ff/d67/9a71ffd6772983dd4c63178e3c4813c3.png" alt="image" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /></p>\r\n<h4 style="font-family: Verdana, sans-serif; font-size: 16.8px; margin: 0px; font-weight: 400; padding: 0px; background-color: #ffffff;">15. Простая валидация</h4>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Когда нужна валидация, Laravel снова приходит нам на помощь! Используя класс Validator как нельзя просто. Просто передайте объект для валидации вместе с правилами в метод make, а Laravel сделает всё остальное.</span></p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="php hljs" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;">$order = [\r\n    <span class="hljs-string" style="color: #dd1144;">\'title\'</span> =&gt; <span class="hljs-string" style="color: #dd1144;">\'Wii U\'</span>,\r\n    <span class="hljs-string" style="color: #dd1144;">\'description\'</span> =&gt; <span class="hljs-string" style="color: #dd1144;">\'Game console from Nintendo\'</span>\r\n];\r\n \r\n$rules = [\r\n    <span class="hljs-string" style="color: #dd1144;">\'title\'</span> =&gt; <span class="hljs-string" style="color: #dd1144;">\'required\'</span>,\r\n    <span class="hljs-string" style="color: #dd1144;">\'description\'</span> =&gt; <span class="hljs-string" style="color: #dd1144;">\'required\'</span>\r\n];\r\n \r\n$validator = Validator::make($order, $rules);\r\n \r\n<span class="hljs-keyword" style="font-weight: bold;">if</span> ($validator-&gt;fails())\r\n{\r\n    var_dump($validator-&gt;messages()); <span class="hljs-comment" style="color: #999988; font-style: italic;">// validation errors array</span>\r\n}\r\n\r\n</code></pre>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /></p>\r\n<h4 style="font-family: Verdana, sans-serif; font-size: 16.8px; margin: 0px; font-weight: 400; padding: 0px; background-color: #ffffff;">16. Tinker</h4>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><img style="border-style: none; max-width: 100%; vertical-align: middle; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" src="https://habrastorage.org/getpro/habr/post_images/53a/2e4/36a/53a2e436ac009eac7acf9712283d9a49.png" alt="image" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Особенно, если вы используете Laravel в первый раз, может быть полезным повозиться с ядром. Команда tinker поможет с этим.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Tinker использует популярный компонент Boris.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><code style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 14px; color: #222222; background-color: #ffffff;">$ php artisan tinker</code><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /></p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="php hljs" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;">&gt; $order = Order::find(<span class="hljs-number" style="color: teal;">1</span>);\r\n&gt; var_dump($order-&gt;toArray());\r\n&gt; <span class="hljs-keyword" style="font-weight: bold;">array</span>(...)\r\n</code></pre>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /></p>\r\n<h4 style="font-family: Verdana, sans-serif; font-size: 16.8px; margin: 0px; font-weight: 400; padding: 0px; background-color: #ffffff;">17. Миграции</h4>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Думайте о миграциях, как о контроле версий базы данных. В любой момент, вы можете &ldquo;откатить&rdquo; миграции, вернуть их, обновить, и так далее. Наверно, сила миграций таится в том, чтобы запушить приложение в продакшн и просто выполнить команду php artisan migrate, чтобы сконструировать базу данных.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Чтобы приготовить схема для новой таблицы users, мы можем выполнить:</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><code style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 14px; color: #222222; background-color: #ffffff;">php artisan migrate:make create_users_table</code><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Команда сгененерирует файл миграции, который вы наполните так, как вам нужно. Как будете готовы, команда php artisan migrate создаст таблицу. Вот и всё! Нужно откатить изменения? Легко! php artisan migrate:rollback.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Вот пример таблица для таблицы ЧаВО.</span></p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="php hljs" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;"><span class="hljs-keyword" style="font-weight: bold;">public</span> <span class="hljs-function"><span class="hljs-keyword" style="font-weight: bold;">function</span> <span class="hljs-title" style="color: #990000; font-weight: bold;">up</span><span class="hljs-params">()</span>\r\n</span>{\r\n    Schema::create(<span class="hljs-string" style="color: #dd1144;">\'faqs\'</span>, <span class="hljs-function"><span class="hljs-keyword" style="font-weight: bold;">function</span><span class="hljs-params">(Blueprint $table)</span> </span>{\r\n        $table-&gt;integer(<span class="hljs-string" style="color: #dd1144;">\'id\'</span>, <span class="hljs-keyword" style="font-weight: bold;">true</span>);\r\n        $table-&gt;text(<span class="hljs-string" style="color: #dd1144;">\'question\'</span>);\r\n        $table-&gt;text(<span class="hljs-string" style="color: #dd1144;">\'answer\'</span>);\r\n        $table-&gt;timestamps();\r\n    });\r\n}\r\n \r\n<span class="hljs-keyword" style="font-weight: bold;">public</span> <span class="hljs-function"><span class="hljs-keyword" style="font-weight: bold;">function</span> <span class="hljs-title" style="color: #990000; font-weight: bold;">down</span><span class="hljs-params">()</span>\r\n</span>{\r\n    Schema::drop(<span class="hljs-string" style="color: #dd1144;">\'faqs\'</span>);\r\n}\r\n</code></pre>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Обратите внимание, что метод drop() выполняет обратные действия метода up(). Это то, что позволяет &ldquo;откатить&rdquo; миграцию. Не правда ли, что это намного легче, чем мучаться с чистым SQL?</span></p>', '2016-09-17 12:31:56', '2016-10-23 14:25:39', 5, -10, NULL),
	(27, 'Телепатия на стероидах в js/node.js', 'awdawdawd', '6e256694d48c28ff2fac1bef4ea31673.jpg', 'telepatiya-na-steroidah-v-js-node-js', '<p><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Этап поддержки продуктов отнимает много сил и нервов. Путь от &laquo;я нажимаю а оно не работает&raquo; до решения проблемы, даже у первоклассного телепата, может занимать много времени. Времени, в течение которого клиент/начальник будет зол и недоволен.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Чтобы сократить время решения проблемы, нужно оперативно узнавать об ошибках, иметь как можно более точную информацию о том, что к ней привело и, желательно, собирать всё вместе.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">О своём решении я и расскажу под катом.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" clear="all" /><a style="background-color: #ffffff; color: #6da3bd; font-family: Verdana, sans-serif; font-size: 14px;" name="habracut"></a></p>\r\n<h1 style="font-family: Verdana, sans-serif; font-size: 22.75px; margin: 0px; font-weight: 400; padding: 0px; letter-spacing: -1px; background-color: #ffffff;">1. Задачи</h1>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">После обсуждения было принято решение создать механизм, собирающий с клиента и сервера информацию об ошибках, и позволяющий передавать или обрабатывать данные для последующего реагирования. Механизм должен давать возможность в будущем добавлять способы работы с данными без лишнего переписывания кода и позволять из конфига менять способы работы, порядок и т.п.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Ключевые точки:</span></p>\r\n<ul style="margin: 0px 0px 0px 20px; padding: 0px; list-style-position: outside; list-style-image: initial; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">\r\n<li style="margin-left: 20px;">Ловить ошибки как на frontend так и на backend</li>\r\n<li style="margin-left: 20px;">Возможность добавить несколько обработчиков ошибок в т.ч. в будущем</li>\r\n<li style="margin-left: 20px;">Большой объем отладочной информации</li>\r\n<li style="margin-left: 20px;">Гибкая настройка для каждого проекта</li>\r\n<li style="margin-left: 20px;">Высокая надёжность</li>\r\n</ul>\r\n<p>&nbsp;</p>\r\n<h1 style="font-family: Verdana, sans-serif; font-size: 22.75px; margin: 0px; font-weight: 400; padding: 0px; letter-spacing: -1px; background-color: #ffffff;">2. Решение</h1>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Было решено при запуске сервера производить загрузку специальных обработчиков ошибок &mdash; драйверов, порядок и приоритет которых будет загружен из конфига. Ошибки на frontend будут посылаться на сервер, где будут обрабатываться вместе с остальными.&nbsp;</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Основная идея в том, что при возникновении ошибки, и по мере отмотки стека до глобальной области, в класс ошибки будет добавляться отладочная информация при помощи расставленных сборщиков. При выпадении в глобальную область, ошибка будет перехватываться и обрабатываться при помощи драйвера ошибки.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /></p>\r\n<h3 style="font-family: Verdana, sans-serif; font-size: 19.25px; margin: 0px; font-weight: 400; padding: 0px; background-color: #ffffff;">2.1 Класс ошибки</h3>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Был написан свой класс ошибки, наследуемый от стандартного. С конструктором, принимающим ошибку, возможностью указать &laquo;уровень тревоги&raquo; и добавлением отладочных данных. Класс расположен в едином для front- и backend файле инструментов.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><em style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Здесь и далее, в коде использованы библиотеки co, socket.io и sugar.js</em></p>\r\n<div class="spoiler" style="overflow: hidden; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;"><span class="spoiler_title" style="color: #6da3bd; cursor: pointer; border-bottom: 1px dashed;">Полный код класса</span></div>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">И сразу пример использования для promise:</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /></p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="javascript hljs" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;">socket.on(fullName, <span class="hljs-function"><span class="hljs-keyword" style="font-weight: bold;">function</span> (<span class="hljs-params">values</span>) </span>{\r\n    &lt;...&gt;\r\n    method(values)<span class="hljs-comment" style="color: #999988; font-style: italic;">//Выполняем функцию api</span>\r\n        .then(<span class="xml"><span class="hljs-tag" style="color: navy;">&lt;<span class="hljs-name">...</span>&gt;</span>)</span>\r\n        .catch(<span class="hljs-function"><span class="hljs-keyword" style="font-weight: bold;">function</span> (<span class="hljs-params">error</span>) </span>{<span class="hljs-comment" style="color: #999988; font-style: italic;">//Ловим ошибку</span>\r\n               <span class="hljs-keyword" style="font-weight: bold;">throw</span> <span class="hljs-keyword" style="font-weight: bold;">new</span> app.Error(error)<span class="hljs-comment" style="color: #999988; font-style: italic;">//Оборачиваем в наш класс и пробрасываем дальше по стеку</span>\r\n                   .setFatal()<span class="hljs-comment" style="color: #999988; font-style: italic;">//Указываем "уровень тревоги"</span>\r\n                   .addClueData(<span class="hljs-string" style="color: #dd1144;">\'api\'</span>, {<span class="hljs-comment" style="color: #999988; font-style: italic;">//Добавляем отладочные данные</span>\r\n                       fullName,\r\n                       values,\r\n                       handshake: socket.handshake\r\n                   })\r\n           });\r\n});</code></pre>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Для try-catch поступаем аналогичным образом.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /></p>\r\n<h3 style="font-family: Verdana, sans-serif; font-size: 19.25px; margin: 0px; font-weight: 400; padding: 0px; background-color: #ffffff;">2.2 Frontend</h3>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Для frontend загвоздка в том, что ошибка может произойти ещё до того, как загрузится библиотека транспорта (socket.io в данном случае).</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Обходим эту проблему, собирая ошибки во временную переменную. Для перехвата ошибок из глобальной области используем window.onerror:</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /></p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="javascript hljs" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;">app.errorForSending=[];\r\napp.sendError = <span class="hljs-function"><span class="hljs-keyword" style="font-weight: bold;">function</span> (<span class="hljs-params">error</span>) </span>{<span class="hljs-comment" style="color: #999988; font-style: italic;">//Функция отправки ошибки на сервер</span>\r\n    app.io.emit(<span class="hljs-string" style="color: #dd1144;">\'server error send\'</span>, <span class="hljs-keyword" style="font-weight: bold;">new</span> app.Error(error));\r\n};\r\n\r\n<span class="hljs-built_in" style="color: #0086b3;">window</span>.onerror = <span class="hljs-function"><span class="hljs-keyword" style="font-weight: bold;">function</span> (<span class="hljs-params">message, source, lineno, colno, error</span>) </span>{<span class="hljs-comment" style="color: #999988; font-style: italic;">//Перехватываем ошибку из глобальной области</span>\r\n    app.errorForSending.push(<span class="hljs-comment" style="color: #999988; font-style: italic;">//Записываем в массив для ошибок. </span>\r\n        <span class="hljs-keyword" style="font-weight: bold;">new</span> app.Error(error)\r\n            .setFatal());<span class="hljs-comment" style="color: #999988; font-style: italic;">//Сразу присваиваем высокий уровень тревоги, ведь ошибка произошла во время загрузки</span>\r\n};\r\napp.events.on(<span class="hljs-string" style="color: #dd1144;">\'socket.io ready\'</span>, ()=&gt; {<span class="hljs-comment" style="color: #999988; font-style: italic;">//После готовности транспортной библиотеки</span>\r\n    <span class="hljs-built_in" style="color: #0086b3;">window</span>.onerror = <span class="hljs-function"><span class="hljs-keyword" style="font-weight: bold;">function</span> (<span class="hljs-params">message, source, lineno, colno, error</span>) </span>{<span class="hljs-comment" style="color: #999988; font-style: italic;">//Перезаписываем коллбек</span>\r\n        app.sendError(<span class="hljs-keyword" style="font-weight: bold;">new</span> app.Error(error).setFatal());\r\n    };\r\n\r\n    app.errorForSending.forEach((error)=&gt; {<span class="hljs-comment" style="color: #999988; font-style: italic;">//Отправляем все ошибки, собранные ранее</span>\r\n        app.sendError(error);\r\n    });\r\n    <span class="hljs-keyword" style="font-weight: bold;">delete</span> app.errorForSending;\r\n});\r\napp.events.on(<span class="hljs-string" style="color: #dd1144;">\'client ready\'</span>, ()=&gt; {<span class="hljs-comment" style="color: #999988; font-style: italic;">//после загрузки записываем окончательную версию обработчика</span>\r\n    <span class="hljs-built_in" style="color: #0086b3;">window</span>.onerror = <span class="hljs-function"><span class="hljs-keyword" style="font-weight: bold;">function</span> (<span class="hljs-params">message, source, lineno, colno, error</span>) </span>{\r\n        app.sendError(error);\r\n    };\r\n});\r\n</code></pre>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Остаётся проблема в том, что некоторые библиотеки любят не выбрасывать ошибки, а просто&nbsp;</span><s style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">гади</s><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">выводить в консоль. Перезапишем функции консоли для перехвата данных.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /></p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="javascript hljs" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;"><span class="hljs-function"><span class="hljs-keyword" style="font-weight: bold;">function</span> <span class="hljs-title" style="color: #990000; font-weight: bold;">wrapConsole</span>(<span class="hljs-params">name, action</span>) </span>{\r\n    <span class="hljs-built_in" style="color: #0086b3;">console</span>[<span class="hljs-string" style="color: #dd1144;">\'$\'</span> + name] = <span class="hljs-built_in" style="color: #0086b3;">console</span>[name];<span class="hljs-comment" style="color: #999988; font-style: italic;">//сохраняем исходный метод</span>\r\n    <span class="hljs-built_in" style="color: #0086b3;">console</span>[name] = <span class="hljs-function"><span class="hljs-keyword" style="font-weight: bold;">function</span> () </span>{\r\n        <span class="hljs-built_in" style="color: #0086b3;">console</span>[<span class="hljs-string" style="color: #dd1144;">\'$\'</span> + name](...arguments);<span class="hljs-comment" style="color: #999988; font-style: italic;">//вызываем исходный метод</span>\r\n        app.sendError(\r\n            <span class="hljs-keyword" style="font-weight: bold;">new</span> app.Error(<span class="hljs-string" style="color: #dd1144;">`From console.<span class="hljs-subst" style="color: #333333;">${name}</span>: `</span> + [].join.call(<span class="hljs-built_in" style="color: #0086b3;">arguments</span>, <span class="hljs-string" style="color: #dd1144;">\'\'</span> ),<span class="hljs-comment" style="color: #999988; font-style: italic;">//запишем в сообщение ошибки консольный вывод</span>\r\n                              <span class="hljs-built_in" style="color: #0086b3;">console</span>[name])<span class="hljs-comment" style="color: #999988; font-style: italic;">//Сократим стек до вызова этой функции(будет работать только в движке v8)</span>\r\n                .addClueData(<span class="hljs-string" style="color: #dd1144;">\'console\'</span>, {<span class="hljs-comment" style="color: #999988; font-style: italic;">//добавим данные о имени консоли и исходных аргументах</span>\r\n                    consoleMethod: name,\r\n                    arg          : <span class="hljs-built_in" style="color: #0086b3;">Array</span>.create(<span class="hljs-built_in" style="color: #0086b3;">arguments</span>)\r\n                })[action]());<span class="hljs-comment" style="color: #999988; font-style: italic;">//вызовем соответствующий уровню сеттер</span>\r\n    };\r\n}\r\nwrapConsole(<span class="hljs-string" style="color: #dd1144;">\'error\'</span>, <span class="hljs-string" style="color: #dd1144;">\'setTrivial\'</span>);\r\nwrapConsole(<span class="hljs-string" style="color: #dd1144;">\'warn\'</span>, <span class="hljs-string" style="color: #dd1144;">\'setWarning\'</span>);\r\nwrapConsole(<span class="hljs-string" style="color: #dd1144;">\'info\'</span>, <span class="hljs-string" style="color: #dd1144;">\'setWarning\'</span>);</code></pre>\r\n<p>&nbsp;</p>\r\n<h3 style="font-family: Verdana, sans-serif; font-size: 19.25px; margin: 0px; font-weight: 400; padding: 0px; background-color: #ffffff;">2.3 Server</h3>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Нам осталось самое интересное, для всех, кто дочитал до этого момента и не умер от усталости. Ведь осталось реализовать не просто инициализацию и выполнение драйверов, получающих ошибки,</span></p>\r\n<ul style="margin: 0px 0px 0px 20px; padding: 0px; list-style-position: outside; list-style-image: initial; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">\r\n<li style="margin-left: 20px;">Всё должно работать как можно быстрее, даже если каждому драйверу в процессе инициализации/обработки ошибки, нужно &laquo;поговорить по душам&raquo; с другим сервером или вычислить ответ на главный вопрос вселенной жизни и всего такого;</li>\r\n<li style="margin-left: 20px;">Гибкая система запасных и дублирующих драйверов;</li>\r\n<li style="margin-left: 20px;">Динамически запускать запасные драйвера, в случае отказа предыдущих;</li>\r\n<li style="margin-left: 20px;">Исключения, возникшие во время работы драйверов, отправлять по работающим драйверам;</li>\r\n<li style="margin-left: 20px;">Ловить и обрабатывать ошибки с frontend, а также выпадающие в глобальную область node.js.</li>\r\n</ul>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Весь код можно посмотреть на гитхабе (ссылка внизу), а сейчас пройдёмся по основным задачам:</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /></p>\r\n<ol style="margin: 0px 0px 0px 20px; padding: 0px; list-style-position: outside; list-style-image: initial; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">\r\n<li style="margin-left: 20px;"><em>Параллельный запуск</em>&nbsp;для скорости<br />Для этих целей используем yield [...](или Promise.all(...)) с учётом того, что каждая функция из массива&nbsp;<em>не должна выбрасывать ошибку</em>&nbsp;иначе, если функций с ошибками несколько, мы не сможем обработать их все</li>\r\n<li style="margin-left: 20px;"><em>Гибкая конфигурация</em><br />Все драйвера находятся в &laquo;пакете драйверов&raquo;, которые располагаются в массиве по приоритету. Ошибка рассылается сразу на весь пакет драйверов, если весь пакет не работает, система переходит к следующему и т.д.</li>\r\n<li style="margin-left: 20px;"><em>Динамический запуск</em><br />При инициализации помечаем все драйвера как &laquo;not started&raquo;.<br />При запуске первый пакет драйверов помечаем либо как &laquo;started&raquo;, либо как &laquo;bad&raquo;.<br />При отправке, в текущем пакете пропускаем &laquo;bad&raquo;, отправляем в &laquo;started&raquo; и запускаем &laquo;not started&raquo;. Драйвера, выкинувшие ошибку, помечаем как bad и идём дальше. Если все драйвера в текущем пакете помечены как bad переходим к следующему пакету.</li>\r\n<li style="margin-left: 20px;"><em>Отправка ошибок драйверов в ещё живых драйверах</em><br />При возникновении ошибок в самих драйверах ошибок(немного тавтологии), записываем их в специальный массив. После нахождения первого живого драйвера, отправляем через него ошибки драйверов и саму ошибку(если драйвера падали при отправке ошибки) и ошибки драйверов.</li>\r\n<li style="margin-left: 20px;"><em>Ловим ошибки с front/backend</em><br />Создаем специальный api для frontend и ловим исключения node.js через process.on(\'uncaughtException\',fn) и process.on(\'unhandledRejection\',fn)</li>\r\n</ol>\r\n<p>&nbsp;</p>\r\n<h1 style="font-family: Verdana, sans-serif; font-size: 22.75px; margin: 0px; font-weight: 400; padding: 0px; letter-spacing: -1px; background-color: #ffffff;">3. Заключение</h1>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Изложенный механизм сбора и отправки сообщений об ошибках позволит мгновенно реагировать на ошибки, ещё до того, как конечный пользователь, и обойтись без допроса конечного пользователя на предмет последних нажатых кнопок.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Если задуматься о развитии, то в будущем можно добавить несколько полезных фич:</span></p>\r\n<ul style="margin: 0px 0px 0px 20px; padding: 0px; list-style-position: outside; list-style-image: initial; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">\r\n<li style="margin-left: 20px;">Изменение политики отключения неработающих драйверов<br />Например, добавить возможность повторной проверки драйвера на работоспособность через некоторое время.</li>\r\n<li style="margin-left: 20px;">Возможность вставки кода драйверов на frontend<br />Можно использовать для сбора дополнительной информации.</li>\r\n<li style="margin-left: 20px;">Пресет логгирования<br /><abbr style="border-bottom: 0.1em dotted; cursor: help;" title="don\'t repeat yourself">DRY</abbr>&nbsp;для повторяющихся функций сбора общей информации(последние загруженные страницы, последние использованные api)</li>\r\n</ul>', '2016-09-17 12:58:18', '2016-10-23 14:13:25', 4, 5, NULL),
	(28, 'Дизайнь как верстальщик', 'Javascript-путешествие с шестью символами', '728f4f09d858c5cec9155609295381f3.jpg', 'dizaini-kak-verstalischik', '<p><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Ваш дизайнер &ndash; настоящий гений и его продукт идеален. Он доблестен в неравной борьбе с ТЗ и всегда выходит победителем. Но уже пятый по счету верстальщик, матерясь, делает из его макетов какую-то гадость? Не торопитесь искать шестого. Чаще всего причина легко устранима &ndash; достаточно лишь поведать вашему гению о нескольких приземленных правилах и попросить его им следовать.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">В этой статье я попробовал собрать некоторые рекомендации для дизайнеров, делающих мир чуть светлее. Спросите у верстальщика о его проблемах, отправьте эту статью дизайнеру. Ибо совершенству нет предела.&nbsp;</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><a style="background-color: #ffffff; color: #6da3bd; font-family: Verdana, sans-serif; font-size: 14px;" name="habracut"></a><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Проблема существовала всегда, сколько я себя помню айтишником. Когда проектирование интерфейсов было лишь красивым словосочетанием, смысл которого понимали только настоящие профи, дизайн отвечал минимум за две трети впечатления пользователя от сайта. Сейчас немного проще, UI-проектирование все чаще отделено от дизайна, хотя и делает его порой один и тот же человек. В любом случае, именно веб-дизайнер преобразует смутные образы или сухие прототипы в то, с чем потом взаимодействовать пользователю. И очень важно, чтобы верстальщик перенес этот дизайн в веб максимально точно. Желательно &ndash; вообще без изменений. Попиксельно. Спросите у любого дизайнера, насколько часто финальная верстка полностью его устраивает? Уверен, ответ будет печальным, если не резким.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">О причинах этого говорить можно долго, но чаще всего винят верстальщика. Оно и понятно: дизайн есть, дизайн хороший, будь как дизайн. Но помимо простого копирования, на верстальщика ложится еще целый ворох обязанностей. Он должен сделать сайт адаптивным, быстрым, легким. Его верстка должна быть семантичной, изображения &ndash; пожатыми или векторными, а формы &ndash; заточенными под бэкенд. Да frontend-разработчик вообще много чего и кому должен, если он хороший (как дизайн). Вот и берет наш герой какой-нибудь фреймворк для ускорения и оптимизации работы &ndash; причем не важно, комбайн-бутстрадейшн или собственный велосипед, с гридами на флексбоксах. Открывает макеты и начинает ваять. И то тут, то там, ему приходится немного отступать от дизайна. Или раздувать таблицы стилей, делая их сложночитаемыми и неоправданно большими. Результат всегда не очень: дизайнер недоволен, фронтендер недоволен, в мире стало чуток темнее.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Но это только в том случае, если наш дизайнер, создавая макеты и передавая их дальше по цепочке, не учел несколько важных моментов, о которых я и собираюсь рассказать. Конечно, вряд ли я смогу здесь описать все, что мешает правильному взаимодействию дизайнера с верстальщиком. Да и проблемы, возникающие в этой связке, бывает, вообще никак не относятся к профессиональным качествам сторон. Но следование изложенным ниже рекомендациям точно не повредит ни проекту, ни его разработчикам.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Текст ниже &mdash; для дизайнера и, чуть-чуть, для фронтендщика. Итак, погнали.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /></p>\r\n<h2 style="font-family: Verdana, sans-serif; font-size: 21px; margin: 0px; font-weight: 400; padding: 0px; background-color: #ffffff;">Унифицируйте элементы</h2>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><img style="border-style: none; max-width: 100%; vertical-align: middle; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" src="https://habrastorage.org/files/781/d81/f2d/781d81f2d738441286dd49dab04ce82a.jpg" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Представим, что на сайте полсотни различных кнопок. От банальной &laquo;читать далее&raquo; до &laquo;произвести расчет стоимости лечения за первое полугодие&raquo;. А есть еще круглые кнопки с иконками и кнопки-списки. И на каждой странице они немного отличаются: где-то кнопка на 5 пикселей шире остальных, где-то иконка переместилась в правую часть, где-то радиус углов немного разный&hellip; Выглядит, конечно, очень круто. И различия на дизайн-макетах даже не бросаются в глаза. Но на деле такое отношение к элементам оборачивается несколькими проблемами:</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&mdash; верстать сложнее, дольше и дороже;</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&mdash; возрастает вероятность, что верстальщик будет использовать на всем сайте только один из визуально почти одинаковых элементов;</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&mdash; пользователю приходится каждый раз &laquo;привыкать&raquo; к новому виду элемента (хотя он и сам может этого не осознавать);</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&mdash; при развитии проекта, скорее всего, получится чехарда из разномастных кнопок, инпутов и тд.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Решение простое. Дорогие дизайнеры, создайте единый документ, в который поместите все-все типовые элементы. Заголовки, списки, параграфы, ссылки, кнопки, поля форм, контролы, миниатюры изображений и прочее. Такую доку называют &laquo;UI Style Guide&raquo; или &laquo;Frontend Style Guide&raquo; &mdash; кто как привык. Обычно это просто послойный исходник вроде&nbsp;</span><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="http://medialoot.com/item/ui-style-guide-template/">этого</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">. И везде в проекте используйте только эти элементы и только в той форме, в которой они здесь запечатлены. Появился новый мультиселект? Добавляйте его в &laquo;стайлгайд&raquo;.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Причем не стоит ограничиваться только элементами. Создайте набор главных цветов интерфейса &mdash; это тоже полезно. В ряде случаев мы даже делаем список основных отступов, используемых в макетах.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Если верстальщик опытный, он сразу сделает себе такой же &laquo;стайлгайд&raquo; в вебе, откуда просто будет копировать элементы. Да и вообще, преимуществ у &laquo;стайлгайдов&raquo; тьма: от удобства в развитии проекта до ускорения работы всех, причастных к фронтенду.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /></p>\r\n<h2 style="font-family: Verdana, sans-serif; font-size: 21px; margin: 0px; font-weight: 400; padding: 0px; background-color: #ffffff;">Изучите основы верстки</h2>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><img style="border-style: none; max-width: 100%; vertical-align: middle; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" src="https://habrastorage.org/files/a1c/73e/838/a1c73e838dda4f26a9cc7f8907238aed.jpg" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Одна из самых спорных рекомендаций, пожалуй. Многие мне возразят, и это нормально. Но веб-дизайнер, понимающий хотя бы самые базовые принципы HTML и CSS, по моему опыту, стоит дороже и работать с ним приятнее. Такой дизайнер понимает, что есть шесть типов заголовков, что параграф обычно имеет отступ снизу, что списки могут быть вложенными и прочее. И здесь речь не просто о типографике &mdash; тут важно, чтобы макет был не только красивым, но и реализуемым, легким (о скорости мы еще поговорим ниже).</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Это не сложно, поверьте. За пару недель ежедневных часовых занятий можно приобрести базовое понимание основных HTML-тегов и возможностей CSS. Никто не просит вас, дорогие творцы, становиться технарями и вникать в дебри псевдоэлементов. Но следует понимать, какие из ваших решений могут быть реализованы в вебе, а для каких потребуется заключать союз с нечистой силой.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /></p>\r\n<h2 style="font-family: Verdana, sans-serif; font-size: 21px; margin: 0px; font-weight: 400; padding: 0px; background-color: #ffffff;">Научитесь работать по гридам</h2>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><img style="border-style: none; max-width: 100%; vertical-align: middle; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" src="https://habrastorage.org/files/856/38f/a78/85638fa7885b445c8d42b423f7c4a835.jpg" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Гриды, сетка, колонки &mdash; суть одна. Если упростить, то модульная сетка для дизайнера представляет из себя условное разделение макета на вертикальные колонки одинаковой ширины, с определенными отступами между ними. Стоит один раз распределить элементы макета внутри этих колонок, и&nbsp;</span><s style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">обратного пути уже не будет</s><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;вы поймете, насколько это удобно.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Привычка работать по сетке &mdash; одна из самых полезных (после утренних пробежек, раздельного питания и использования хоткеев). Она позволяет упорядочивать визуальную структуру документа, с легкостью переиспользовать блоки, ускоряя разработку как дизайна, так и верстки. Кроме того, именно на гридах строятся популярные front-end фреймворки вместе с адаптивностью, а это важно &mdash; и я к этому еще вернусь.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Для дизайнера же гриды хороши еще и тем, что при переносе его макета в верстку шанс точного &laquo;совпадения&raquo; возрастает во много раз. Для верстальщика в целом упрощается все. Опытный фронтендщик просто создаст у себя в проекте точно такие же колонки, и не будет тратить время на попиксельное сравнение отдельных блоков, не говоря уже об адаптивности.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Тем, кто работает в Photoshop\'е, могу предложить даже небольшую&nbsp;</span><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="https://drive.google.com/open?id=0By7LNipPIB05SG14MnR6eGp4cXc">подборку шаблонов</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">. Для предпочитающих Sketch такой штуки у меня, увы, нет &mdash; но она есть в гугле.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /></p>\r\n<h2 style="font-family: Verdana, sans-serif; font-size: 21px; margin: 0px; font-weight: 400; padding: 0px; background-color: #ffffff;">Помните про адаптивность</h2>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><img style="border-style: none; max-width: 100%; vertical-align: middle; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" src="https://habrastorage.org/files/52b/be2/905/52bbe2905c404ff3af6f74dcaa3ade0e.jpg" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">В предыдущем пункте она упоминается аж два раза не просто так. Игнорировать мобильный трафик сейчас &mdash; настоящее преступление, за которое нужно ввести порку розгами. Вот уже два года, как мне перестали попадаться проекты, в которых не нужно было бы реализовывать корректное отображение сайта на экранах мобильных устройств. Вместе с тем многие дизайнеры продолжают создавать только один вариант дизайна &mdash; основной, самый широкий.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Что происходит после этого? У верстальщика, получившего такой макет, есть несколько вариантов действий:</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&mdash; запросить недостающие компоновки страниц, под остальные разрешения;</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&mdash; сделать только то, что ему прислали &mdash; то есть неадаптивную верстку;</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&mdash; попытаться самостоятельно адаптировать имеющийся дизайн.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Первый вариант частенько нереален, потому как дизайнер уже получил свои деньги, а заказчик &mdash; жлоб (например). Второй вариант отпадает, потому что тогда фронтендщик становится соучастником и рискует оказаться наказанным. Чаще всего в таком случае отрабатывается третий вариант. И получается так себе, потому что верстальщик, даже очень хороший &mdash; это не дизайнер. Исключения крайне редки.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Так вот, дизайнеры. Очень прошу, делайте несколько вариантов макетов, под разные разрешения. Этим вы сэкономите время на разработку и повысите шансы положить проект в портфолио, потому что за его реализацию не будет стыдно. Ну и в очередной раз докажете собственный профессионализм.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">И к слову о гридах. Использование модульной сетки в дизайне очень упрощает проектирование адаптивности. Мне, например, уже как-то привычны следующие шаги (ширина макетов): 1440px, 1200px, 960px, 768px, 600px и 320px. Иногда заменяю 600 на 480, но это уже индивидуальности проекта. При переходе на каждый шаг уменьшается ширина колонки, но расстояние между ними остается прежним. Найти уже готовые шаблоны можно по ссылке в пункте выше.&nbsp;</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /></p>\r\n<h2 style="font-family: Verdana, sans-serif; font-size: 21px; margin: 0px; font-weight: 400; padding: 0px; background-color: #ffffff;">Будьте в курсе трендов</h2>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><img style="border-style: none; max-width: 100%; vertical-align: middle; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" src="https://habrastorage.org/files/e1e/86d/94e/e1e86d94e84d40b6bfa098f2a6fd56a8.jpg" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">В общем-то, банальный совет. Но буквально на днях я обнаружил дизайнера, не знакомого с принципами material design. Ну то есть общее понимание концепции у него было, а вот о&nbsp;</span><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="https://material.google.com/">&laquo;гайдлайнах&raquo; material</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;он слыхом не слыхивал. Конечно, у матерого дизайнера изучение практически любого направления не займет много времени, но иногда незнание основ может помешать получить вкусный и интересный заказ.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Однако, помимо направлений в дизайне как таковых, существуют еще и популярные фронтенд-фреймворки. Их задача &mdash; упростить и ускорить разработку внешней части сайта, включая верстку, js и прочее. Если вы, дизайнер, работаете в команде, которая предпочитает использовать определенный фреймворк, изучение его базовых особенностей сохранит время и нервы всей команды. И речь тут не только о цветовой схеме или компоновке блоков, не стоит загонять себя в чересчур жесткие рамки, вы же творец. Речь, скорее, о базовых элементах или особенностях анимации. Например, в некоторых фреймворках боковое меню, появляющееся на небольших экранах, накладывается поверх контента, а не сдвигает его. И изменить такое поведение порой стоит немалых жертв. Поэтому не стесняйтесь общаться с frontend-разработчиками на самых первых этапах, узнавайте о фреймворках и их особенностях.&nbsp;</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Из популярных могу назвать:</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&mdash;&nbsp;</span><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="http://getbootstrap.com/">Bootstrap</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">. Не нуждается в особом представлении. Почти все, что нужно на старте &mdash; есть из коробки. Самый популярный в мире.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&mdash;&nbsp;</span><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="http://foundation.zurb.com/">Foundation</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">. Гибкий, современный, настоящий комбайн. Достойная альтернатива бутстрапу.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&mdash;&nbsp;</span><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="http://materializecss.com/">Materialize</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">. Заточен под material design, что видно из названия. Включает в себя также анимации в стиле материал.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&mdash;&nbsp;</span><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="https://getmdl.io/">Material Design Lite</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">. По сути, брат предыдущего. Имеет в себе все необходимые для быстрого создания проекта в стиле material.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&mdash;&nbsp;</span><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="http://ionicframework.com/">Ionic</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">. Фреймворк для создания мобильных приложений на базе cordova. По сути, реализуется той же HTML-версткой, а потом компилится под разные платформы.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&mdash;&nbsp;</span><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="http://mobileangularui.com/">Mobile Angular UI</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">. То же самое, что и предыдущий, но использует верстку bootstrap.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Frontend-фреймворков тьма, все перечислять не стану. В случае необходимости сами загуглите.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /></p>\r\n<h2 style="font-family: Verdana, sans-serif; font-size: 21px; margin: 0px; font-weight: 400; padding: 0px; background-color: #ffffff;">Учитывайте скорость загрузки сайта</h2>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><img style="border-style: none; max-width: 100%; vertical-align: middle; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" src="https://habrastorage.org/files/71f/16b/bc4/71f16bbc4f12420db690d1e6502d2986.jpg" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Да, скорость загрузки и работы сайта во многом закладывается на этапе дизайна. Знаю, для кого-то это будет новостью. Но стоит вдуматься &mdash; и это становится очевидно. От чего зависит скорость загрузки сайта? Исключим сервер и кривые руки фронтедеров. Статика. Изображения, скрипты, стили.&nbsp;</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">С картинками, вроде, все понятно &mdash; чем их и они меньше, тем быстрее пользователь увидит сайт в том виде, на который вы рассчитываете. Но это ведь не повод отказываться от фоновых изображений, верно? Современные технологии разработки позволяют верстальщикам подставлять разные изображения на разных разрешениях. Так зачем на экраны мобильных устройств тянуть те же мегабитные фоны, что и на десктопах? Подготовьте несколько вариантов фона для разных разрешений &mdash; хотя бы просто в макетах, верстальщик сам их вынет оттуда. Ну или предоставьте верстальщику готовую папку с фонами, если Вы совсем уж святой.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">По возможности, используйте векторную графику для иконок или простых изображений &mdash; она и весит меньше, и выглядит лучше.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Скрипты не во власти дизайна, это очевидно. Но если во время дизайна понавтыкать в каждый квадратный сантиметр сайта параллаксы, анимированное появления блоков и прочие свистелки, у кого-то сайт не загрузится никогда. Очень прошу, дорогие дизайнеры, не увлекайтесь анимацией, если того не требует ТЗ.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">О стилях же я уже писал в самом начале. Если в макете отсутствует унификация элементов, а верстальщик попался добросовестный и усердный, размер таблицы стилей будет сопоставим с размером изображений на сайте. И все это придется тащить браузеру, покуда он не закэширует все это безобразие. Мне в одном проекте встретился файл стилей размером с небольшого котенка &mdash; 17 мегабайт. И это в минифицированном виде. До сих пор кошмары снятся.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /></p>\r\n<h2 style="font-family: Verdana, sans-serif; font-size: 21px; margin: 0px; font-weight: 400; padding: 0px; background-color: #ffffff;">Изучите, наконец, векторную графику</h2>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><img style="border-style: none; max-width: 100%; vertical-align: middle; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" src="https://habrastorage.org/files/87e/214/a01/87e214a010c64f24bd569ac239f6c527.jpg" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Мой самый любимый и одновременно ненавистный пункт. Именно он пришел мне на ум первым, когда я собрался писать эту статью. Прошу дизайнеров отнестись к нему со всей серьезностью.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Речь, конечно, об SVG. Это такой формат векторных изображений, о котором в последнее время говорят все чаще. И я не стану плодить сущности, рассказывая о его преимуществах. Я расскажу о проблеме, которая с ним связана.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Про себя я ее обзываю &laquo;псевдо-SVG&raquo;. Это когда дизайнер дает верстальщику SVG-файл, но тот не может его нигде использовать. Весьма распространенное явление. Причина простая &mdash; дизайнер, работая в фотошопе, просто экспортирует иконку как SVG (по ctrl+shift+alt+w), хотя она является растровой. Внутри таких бесполезных эсвэгэшек обычно лежит текст с:</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /></p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="xml hljs" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;"><span class="hljs-tag" style="color: navy;">&lt;<span class="hljs-name">image</span> <span class="hljs-attr" style="color: teal;">xlink:href</span>=<span class="hljs-string" style="color: #dd1144;">"data:img/png;base64...</span></span></code></pre>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Такое изображение не получится масштабировать, да и разницы между ним и растром, по сути, никакой.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Происходит это от того, что дизайнер не очень понимает, что такое SVG, и не умеет правильно его использовать. Для таких я бы рекомендовал, все-таки, изучить формат. Если же вы работаете в фотошопе, то стараться такие изображения создавать &laquo;перьями&raquo;. Или использовать готовые наборы иконок. Пользователям Sketch тут проще &mdash; у них вектор получается по умолчанию. В любом случае, если вы хотите быть &laquo;дизайнером будущего&raquo;, знать SVG необходимо. Вот несколько полезных ресурсов на русском языке:&nbsp;</span><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="https://svgontheweb.com/ru/">раз</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">,&nbsp;</span><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="https://developer.mozilla.org/ru/docs/Web/SVG">два</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">,&nbsp;</span><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="http://css-live.ru/articles/karmannoe-rukovodstvo-po-napisaniyu-svg-vvedenie.html">три</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Для уменьшения количества запросов к серверу (привет, HTTP/2), да и просто для удобства использования все SVG-иконки на сайте очень часто объединяют в спрайты &mdash; этакие комбинированные файлы. Создать SVG-спрайт можно тремя способами:&nbsp;</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&mdash; вручную, копируя содержимое каждого SVG в один общий файл;</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&mdash; программно, при помощи различных библиотек;</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&mdash; посредством специальных онлайн-сервисов.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&mdash;&nbsp;</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Первый способ оставим людям, у которых много свободного времени. Со вторым все понятно &mdash; он используется верстальщиком и требует определенных навыков. А вот третий способ может подойти и дизайнеру. К примеру, если он ведет развивающийся проект и регулярно добавляет в него новые иконки. Тогда дизайнер может самостоятельно изменять SVG-спрайт, например, через&nbsp;</span><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="http://fontastic.me/">этот вот сервис</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;и отправлять готовый файл на фронтенд. Мелочь, а приятно.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /></p>\r\n<h2 style="font-family: Verdana, sans-serif; font-size: 21px; margin: 0px; font-weight: 400; padding: 0px; background-color: #ffffff;">Прикладывайте шрифты</h2>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><img style="border-style: none; max-width: 100%; vertical-align: middle; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" src="https://habrastorage.org/files/fea/8b6/867/fea8b6867e744720b33a36d187914a35.jpg" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Любой дизайнер, думаю, знаком со&nbsp;</span><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="http://www.w3schools.com/cssref/css_websafe_fonts.asp">списком &laquo;безопасных&raquo; веб-шрифтов</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">. Однако их чаще всего не достаточно. Когда я занимался версткой, мне регулярно попадались макеты с проприетарными или просто редкими шрифтами, при виде которых фотошоп разрывался от ярости предупреждающими окнами. Конечно, многие дизайнеры, отправляя финальный макет, прикладывают к нему и архив со шрифтами (а многие не прикладывают). Но даже имея &laquo;на руках&raquo; необходимый шрифт в формате .ttf или .otf, не всегда получается правильно внедрить его в верстку.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Хочу открыть небольшую тайну дизайнерам. По крайней мере тем из них, кто с ней еще не знаком. Каждый шрифт, который вы хотите использовать в макете (если он не входит в список &laquo;безопасных&raquo;), должен быть представлен как минимум в четырех форматах: ttf, eot, woff (или woff2, а лучше оба) и svg. А если вы используете проприетарный шрифт, то его использование в вебе может быть несколько осложнено. Да и не совсем законно.&nbsp;</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Я всегда советую подбирать шрифт из&nbsp;</span><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="https://fonts.google.com/">Google Fonts</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">, предварительно посмотрев, есть ли у него поддержка кириллицы. Если же этот вариант не подходит, то стоит проверить проприетарность шрифта или сразу подготовить архив со всеми необходимыми форматами. Сконвертировать их можно при любезной помощи&nbsp;</span><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="https://www.fontsquirrel.com/tools/webfont-generator">этого сервиса</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;(не забудьте переключиться в режим &laquo;EXPERT...&raquo; и в секции &laquo;Subsetting&raquo;, отметив &laquo;Custom Subsetting...&raquo;, проставить галочку рядом с &laquo;Cyrillic&raquo;).</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Ибо нет более надежного способа покорить сердце верстальщика, чем вручить ему готовый набор шрифтов для интеграции в веб.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /></p>\r\n<h2 style="font-family: Verdana, sans-serif; font-size: 21px; margin: 0px; font-weight: 400; padding: 0px; background-color: #ffffff;">Эпилог</h2>\r\n<p><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Конечно, множество моментов оставлено здесь без внимания: иерархия и наложение слоев в исходниках, типографика, наборы иконок и многое, многое другое. Однако статья и так получилась объемной, а большинство того, о чем я не написал, прекрасно находится в интернете по запросу &laquo;советы дизайнеру&raquo;. Вот, например, еще рекомендации от&nbsp;</span><a class="user_link" style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="https://habrahabr.ru/users/spaceoddity/">Spaceoddity</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">:&nbsp;</span><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="https://habrahabr.ru/post/173271/">habrahabr.ru/post/173271</a><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">И да, о смысле. Если этот пост помирит хотя бы одну пару дизайнера с верстальщиком, или сэкономит десяток-другой человекочасов &mdash; значит, время на его написание было потрачено не зря.&nbsp;</span></p>', '2016-09-25 22:36:18', '2016-10-23 16:18:59', 7, 6, NULL),
	(29, 'Верстка адаптивных электронных писем: Проблемы и их решения', 'Верстка адаптивных электронных писем: Проблемы и их решения', '1b371a97fce7661809d339b4eb2f522d.jpeg', 'verstka-adaptivnih-elektronnih-pisem-problemi-i-ih-resheniya', '<p><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Электронная почта &mdash; отличный инструмент коммуникации, который позволяет компаниям доставлять контент удобным для аудитории способом. Многие пользователи предпочитают получать HTML-письма, и это неудивительно. Однако создание таких писем оказывается не всегда простой задачей для дизайнеров, поскольку нужно добиваться адекватного представления контента в различных почтовых клиентах. Дело в том, что стандарта верстки писем, который бы поддерживался всеми почтовыми приложениями одновременно, пока не существует.</span><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><br style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;" /><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">Однако нельзя отрицать, что HTML-письма обладают рядом неоспоримых преимуществ: они позволяют оформить сообщение в соответствии с фирменным стилем вашей компании, создать четкую структуру и выделить важные места сообщения. Вчера мы&nbsp;</span><a style="background-color: #ffffff; color: #990099; text-decoration: none; font-family: Verdana, sans-serif; font-size: 14px;" href="https://pechkin.com/blog/layout/#more-1685">вернулись к этой теме</a><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">, а в сегодняшнем материале мы приведем несколько полезных советов, которые позволят создать грамотное письмо, красиво отображаемое на всех платформах.</span></p>\r\n<h3 style="font-family: Verdana, sans-serif; font-size: 19.25px; margin: 0px; font-weight: 400; padding: 0px; background-color: #ffffff;">HTML для электронной почты</h3>\r\n<p><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;"><br />HTML-верстка зиждется на трех китах: таблицах, HTML-атрибутах и инлайн-CSS. К сожалению, из-за особенностей работы email-клиентов, по-разному &laquo;понимающих&raquo; одни и те же вещи, в нашем распоряжении остается весьма ограниченный набор HTML- и CSS-элементов.<br /><br /></span></p>\r\n<h4 style="font-family: Verdana, sans-serif; font-size: 16.8px; margin: 0px; font-weight: 400; padding: 0px; background-color: #ffffff;">1. Таблицы</h4>\r\n<p><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;"><br />В отличие от создания веб-страниц, при верстке email у нас нет возможности использовать семантические элементы. Поэтому, чтобы создаваемые письма рассылок правильно отображались у каждого читателя, мы вынуждены применять таблицы. Для их стилизации необходимо использовать такие атрибуты, как width, height, bgcolor, align, cellpadding, cellspacing и border. В комбинации с инлайн-стилями вроде padding, width и max-width этот набор атрибутов дает определенное место для маневра. Ниже представлен пример кода &laquo;табличного&raquo; письма:</span></p>\r\n<p>&nbsp;</p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="html hljs xml" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;"><span class="hljs-tag" style="color: navy;">&lt;<span class="hljs-name">table</span> <span class="hljs-attr" style="color: teal;">border</span>=<span class="hljs-string" style="color: #dd1144;">"0"</span> <span class="hljs-attr" style="color: teal;">cellpadding</span>=<span class="hljs-string" style="color: #dd1144;">"0"</span> <span class="hljs-attr" style="color: teal;">cellspacing</span>=<span class="hljs-string" style="color: #dd1144;">"0"</span> <span class="hljs-attr" style="color: teal;">width</span>=<span class="hljs-string" style="color: #dd1144;">"100%"</span>&gt;</span>\r\n     <span class="hljs-tag" style="color: navy;">&lt;<span class="hljs-name">tr</span>&gt;</span>\r\n         <span class="hljs-tag" style="color: navy;">&lt;<span class="hljs-name">td</span> <span class="hljs-attr" style="color: teal;">bgcolor</span>=<span class="hljs-string" style="color: #dd1144;">"#333333"</span>&gt;</span>\r\n                <span class="hljs-tag" style="color: navy;">&lt;<span class="hljs-name">div</span> <span class="hljs-attr" style="color: teal;">align</span>=<span class="hljs-string" style="color: #dd1144;">"center"</span> <span class="hljs-attr" style="color: teal;">style</span>=<span class="hljs-string" style="color: #dd1144;">"padding: 0px 15px 0px 15px;"</span>&gt;</span>\r\n                        <span class="hljs-tag" style="color: navy;">&lt;<span class="hljs-name">table</span> <span class="hljs-attr" style="color: teal;">border</span>=<span class="hljs-string" style="color: #dd1144;">"0"</span> <span class="hljs-attr" style="color: teal;">cellpadding</span>=<span class="hljs-string" style="color: #dd1144;">"0"</span> <span class="hljs-attr" style="color: teal;">cellspacing</span>=<span class="hljs-string" style="color: #dd1144;">"0"</span> <span class="hljs-attr" style="color: teal;">width</span>=<span class="hljs-string" style="color: #dd1144;">"500"</span> <span class="hljs-attr" style="color: teal;">class</span>=<span class="hljs-string" style="color: #dd1144;">"wrapper"</span>&gt;</span>\r\n                                <span class="hljs-tag" style="color: navy;">&lt;<span class="hljs-name">tr</span>&gt;</span>\r\n                                        <span class="hljs-tag" style="color: navy;">&lt;<span class="hljs-name">td</span>&gt;</span>&hellip;Content&hellip;<span class="hljs-tag" style="color: navy;">&lt;/<span class="hljs-name">td</span>&gt;</span>\r\n                                <span class="hljs-tag" style="color: navy;">&lt;/<span class="hljs-name">tr</span>&gt;</span>\r\n                        <span class="hljs-tag" style="color: navy;">&lt;/<span class="hljs-name">table</span>&gt;</span>\r\n                <span class="hljs-tag" style="color: navy;">&lt;/<span class="hljs-name">div</span>&gt;</span>\r\n         <span class="hljs-tag" style="color: navy;">&lt;/<span class="hljs-name">td</span>&gt;</span>\r\n     <span class="hljs-tag" style="color: navy;">&lt;/<span class="hljs-name">tr</span>&gt;</span>\r\n<span class="hljs-tag" style="color: navy;">&lt;/<span class="hljs-name">table</span>&gt;</span>\r\n</code></pre>\r\n<p><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;</span></p>\r\n<h4 style="font-family: Verdana, sans-serif; font-size: 16.8px; margin: 0px; font-weight: 400; padding: 0px; background-color: #ffffff;">2. Изображения</h4>\r\n<p><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;"><br />Многие почтовые клиенты по умолчанию блокируют отображение картинок, поэтому важно, чтобы смысл письма был понятен подписчику и без них. Сделать это можно с помощью alt-текста. Стилизовать его позволят инлайн-стили и img-элементы:<br /></span></p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="html hljs xml" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;"><span class="hljs-tag" style="color: navy;">&lt;<span class="hljs-name">img</span> <span class="hljs-attr" style="color: teal;">src</span>=<span class="hljs-string" style="color: #dd1144;">"img/fluid-images.jpg"</span> <span class="hljs-attr" style="color: teal;">width</span>=<span class="hljs-string" style="color: #dd1144;">"240"</span> <span class="hljs-attr" style="color: teal;">height</span>=<span class="hljs-string" style="color: #dd1144;">"130"</span> <span class="hljs-attr" style="color: teal;">style</span>=<span class="hljs-string" style="color: #dd1144;">"display: block; color: #666666; font-family: Helvetica, arial, sans-serif; font-size: 13px; width: 240px; height: 130px;"</span> <span class="hljs-attr" style="color: teal;">alt</span>=<span class="hljs-string" style="color: #dd1144;">"Fluid images"</span> <span class="hljs-attr" style="color: teal;">border</span>=<span class="hljs-string" style="color: #dd1144;">"0"</span> <span class="hljs-attr" style="color: teal;">class</span>=<span class="hljs-string" style="color: #dd1144;">"img-max"</span>&gt;</span></code></pre>\r\n<p><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;</span></p>\r\n<h4 style="font-family: Verdana, sans-serif; font-size: 16.8px; margin: 0px; font-weight: 400; padding: 0px; background-color: #ffffff;">3. Призывы к действию</h4>\r\n<p><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;"><br /><img style="border-style: none; max-width: 100%; vertical-align: middle;" src="https://habrastorage.org/files/f5c/e8a/995/f5ce8a995f4f4f6f8a5e0e5f5464fc43.png" width="400" /><br />В идеале после прочтения письма пользователь должен совершить какое-то действие. Поэтому кнопки CTA (Call To Action) нужно делать крупными, заметными и по возможности располагать в верхней части письма. Вместо обычных изображений желательно использовать&nbsp;<a style="color: #990099; text-decoration: none;" href="https://litmus.com/blog/a-guide-to-bulletproof-buttons-in-email-design">bulletproof-кнопки</a>. Они будут видны даже в тех клиентах, где отображение картинок по умолчанию отключено.<br /><br /></span></p>\r\n<h3 style="font-family: Verdana, sans-serif; font-size: 19.25px; margin: 0px; font-weight: 400; padding: 0px; background-color: #ffffff;">Оптимизация писем для мобильных устройств</h3>\r\n<p><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;"><br />Согласно результатам исследования компании Litmus, 53% открытий писем совершается на мобильных устройствах. При этом 26% из них приходится на iPhone, и 7% &mdash; на Android-девайсы. Во многом эта разница объясняется тем фактом, что в iOS по умолчанию включен показ изображений, а во многих почтовых клиентах на Android сделано наоборот.<br /><br />Компания, отправляющая письмо, может определить, было ли оно открыто, с помощью специальных &laquo;следящих пикселей&raquo; &mdash; небольших изображений, подгружающихся со стороннего сервера. Если загрузка изображения блокируется, посчитать число открытий не представляется возможным.<br /><br />Работа со множеством платформ неизбежно ведет к возникновению ошибок. То, что выглядит хорошо на одной, на другой может отображаться &laquo;криво&raquo;. При верстке писем для iOS и Android важно помнить, что не все мобильные почтовые клиенты обладают одинаковой поддержкой HTML и CSS. К примеру, iOS и Android по-разному &laquo;понимают&raquo; адаптивный дизайн:<br /><br /></span></p>\r\n<ul style="margin: 0px 0px 0px 20px; padding: 0px; list-style-position: outside; list-style-image: initial; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">\r\n<li style="margin-left: 20px;">iOS устройства масштабируют всё письмо, чтобы полностью уместить его на экран.</li>\r\n<li style="margin-left: 20px;">Устройства на Android отображают письмо в масштабе 100%, в связи с чем можно видеть лишь небольшой его фрагмент.</li>\r\n</ul>\r\n<p><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;"><br />Если письма, которые вы рассылаете своим подписчикам, не оптимизированы для просмотра на маленьких экранах, то значительная часть аудитории просто не станет их читать. Избежать этого поможет внимание к следующим нюансам:<br /><br /></span></p>\r\n<h4 style="font-family: Verdana, sans-serif; font-size: 16.8px; margin: 0px; font-weight: 400; padding: 0px; background-color: #ffffff;">1. Следите за длиной темы письма</h4>\r\n<p><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;"><br />Письма с короткими заголовками выделяются среди множества других в папке &laquo;Входящие&raquo;. Как правило, почтовый клиент на компьютере отображает около 60 символов в поле темы сообщения. Мобильные устройства показывают не больше 20&ndash;30 символов. При этом в среднем компании используют для описания темы письма более 40 символов.<br /><br /></span></p>\r\n<h4 style="font-family: Verdana, sans-serif; font-size: 16.8px; margin: 0px; font-weight: 400; padding: 0px; background-color: #ffffff;">2. Используйте текст прехедера</h4>\r\n<p><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;"><br />Прехедер &mdash; это первая строка текста письма, которая &laquo;подтягивается&raquo; в строку под темой и позволяет подписчику понять, о чем пойдет речь в сообщении. Правильно подобранный текст прехедера повышает эффективность рассылки.<br /><br />Для создания прехедера:<br /><br /></span></p>\r\n<ul style="margin: 0px 0px 0px 20px; padding: 0px; list-style-position: outside; list-style-image: initial; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">\r\n<li style="margin-left: 20px;">Обозначьте суть и преимущества своего предложения;</li>\r\n<li style="margin-left: 20px;">Добавьте ссылку на целевую страницу и текстовый призыв к действию (например, &laquo;Узнайте больше&raquo;);</li>\r\n<li style="margin-left: 20px;">Текст прехедера не должен превышать 30 слов (по возможности сократите его до 20 слов);</li>\r\n<li style="margin-left: 20px;">Постарайтесь сделать его персонифицированным;</li>\r\n<li style="margin-left: 20px;">Не повторяйте текст заголовка, прехедер должен дополнять его;</li>\r\n<li style="margin-left: 20px;">Как и остальные элементы письма, текст прехедера нужно тестировать, тестировать и еще раз тестировать.</li>\r\n</ul>\r\n<p><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;</span></p>\r\n<h4 style="font-family: Verdana, sans-serif; font-size: 16.8px; margin: 0px; font-weight: 400; padding: 0px; background-color: #ffffff;">3. Текст должен быть кратким</h4>\r\n<p><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;"><br />На маленьких экранах гораздо важнее эффективно использовать полезное пространство. Поэтому нужно максимально четко доносить до получателей ключевые пункты сообщения и выделять призывы к действию.<br /><br /></span></p>\r\n<h4 style="font-family: Verdana, sans-serif; font-size: 16.8px; margin: 0px; font-weight: 400; padding: 0px; background-color: #ffffff;">4. Используйте большие кнопки CTA</h4>\r\n<p><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;"><br />Призывы к действию должны быть выделены и располагаться по центру экрана. Кроме того, стоит окружить их значительным количеством пустого пространства &mdash; так в них проще попасть пальцем. Например, даже в самых ранних версиях Apple iOS Human Interface Guidelines было прописано, что размер кнопки должен быть не меньше квадрата размером 44&times;44 пикселя.<br /><br /></span></p>\r\n<h4 style="font-family: Verdana, sans-serif; font-size: 16.8px; margin: 0px; font-weight: 400; padding: 0px; background-color: #ffffff;">5. Выбирайте правильный шрифт</h4>\r\n<p><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;"><br />Если основной текст письма состоит из длинных блоков, следует использовать шрифты с засечками. Шрифты Georgia и Verdana делают текст более удобным для чтения. Однако для кратких писем и отдельных отрывков текста больше подходят шрифты без засечек. Подробнее об этом&nbsp;<a style="color: #990099; text-decoration: none;" href="https://habrahabr.ru/company/pechkin/blog/306082/">здесь</a>.<br /><br />Размер шрифта должен быть достаточно большим. Оптимальным будет шрифт размером 14 пикселей для тела сообщения и 22 пикселя для заголовка. Выбор 14-пиксельного размера обусловлен тем, что iOS автоматически увеличивает шрифт минимум до 13 пикселей.<br /><br /></span></p>\r\n<h4 style="font-family: Verdana, sans-serif; font-size: 16.8px; margin: 0px; font-weight: 400; padding: 0px; background-color: #ffffff;">6. Используйте одноколоночную верстку</h4>\r\n<p><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;"><br />На мобильных устройствах лучше работают одноколоночные шаблоны не шире 500&ndash;600 пикселей. Чтобы превратить двухколоночную вёрстку в одноколоночную, нужно создать таблицу-контейнер для десктопной версии размером 640 пикселей и вложенные таблицы на 320 пикселей. Вложенные таблицы будут играть роль колонок.<br /><br />Так как это не веб-вёрстка, то лучше использовать атрибуты HTML-вёрстки, а не их CSS-аналоги. Например, для выравнивания текста используют атрибуты align=&rdquo;left&rdquo; и cellpadding=&rdquo;10&rdquo; вместо float: left; и padding: 10px;.&nbsp;<br /><br />Разметка для двухколоночного шаблона, может выглядеть примерно так:<br /><br /></span></p>\r\n<pre style="font-family: monospace, monospace; font-size: 14px; overflow-x: auto; overflow-y: hidden; word-break: break-all; margin-top: 0px; margin-bottom: 0px; padding: 0px; background-color: #ffffff;"><code class="html hljs xml" style="font-family: Menlo, Monaco, \'Courier New\', monospace; font-size: 12px; display: block; padding: 1em; background: #f8f8f8; overflow-x: auto; color: #333333; white-space: pre-wrap; box-sizing: border-box; text-size-adjust: none;"><span class="hljs-tag" style="color: navy;">&lt;<span class="hljs-name">table</span> <span class="hljs-attr" style="color: teal;">width</span>=<span class="hljs-string" style="color: #dd1144;">"640"</span> <span class="hljs-attr" style="color: teal;">border</span>=<span class="hljs-string" style="color: #dd1144;">"0"</span> <span class="hljs-attr" style="color: teal;">cellpadding</span>=<span class="hljs-string" style="color: #dd1144;">"0"</span> <span class="hljs-attr" style="color: teal;">cellspacing</span>=<span class="hljs-string" style="color: #dd1144;">"0"</span>&gt;</span>\r\n   <span class="hljs-tag" style="color: navy;">&lt;<span class="hljs-name">tr</span>&gt;</span>\r\n      <span class="hljs-tag" style="color: navy;">&lt;<span class="hljs-name">td</span>&gt;</span>\r\n         <span class="hljs-tag" style="color: navy;">&lt;<span class="hljs-name">table</span> <span class="hljs-attr" style="color: teal;">width</span>=<span class="hljs-string" style="color: #dd1144;">"320"</span> <span class="hljs-attr" style="color: teal;">border</span>=<span class="hljs-string" style="color: #dd1144;">"0"</span> <span class="hljs-attr" style="color: teal;">cellspacing</span>=<span class="hljs-string" style="color: #dd1144;">"0"</span> <span class="hljs-attr" style="color: teal;">cellpadding</span>=<span class="hljs-string" style="color: #dd1144;">"20"</span> <span class="hljs-attr" style="color: teal;">align</span>=<span class="hljs-string" style="color: #dd1144;">"left"</span>&gt;</span>\r\n            <span class="hljs-tag" style="color: navy;">&lt;<span class="hljs-name">tr</span>&gt;</span>\r\n                  <span class="hljs-tag" style="color: navy;">&lt;<span class="hljs-name">td</span>&gt;</span>\r\n                         <span class="hljs-tag" style="color: navy;">&lt;<span class="hljs-name">p</span>&gt;</span>Column Left Content<span class="hljs-tag" style="color: navy;">&lt;/<span class="hljs-name">p</span>&gt;</span>\r\n                  <span class="hljs-tag" style="color: navy;">&lt;/<span class="hljs-name">td</span>&gt;</span>\r\n            <span class="hljs-tag" style="color: navy;">&lt;/<span class="hljs-name">tr</span>&gt;</span>\r\n         <span class="hljs-tag" style="color: navy;">&lt;/<span class="hljs-name">table</span>&gt;</span>\r\n         <span class="hljs-tag" style="color: navy;">&lt;<span class="hljs-name">table</span> <span class="hljs-attr" style="color: teal;">width</span>=<span class="hljs-string" style="color: #dd1144;">"320"</span> <span class="hljs-attr" style="color: teal;">border</span>=<span class="hljs-string" style="color: #dd1144;">"0"</span> <span class="hljs-attr" style="color: teal;">cellspacing</span>=<span class="hljs-string" style="color: #dd1144;">"0"</span> <span class="hljs-attr" style="color: teal;">cellpadding</span>=<span class="hljs-string" style="color: #dd1144;">"20"</span> <span class="hljs-attr" style="color: teal;">align</span>=<span class="hljs-string" style="color: #dd1144;">"right"</span>&gt;</span>\r\n            <span class="hljs-tag" style="color: navy;">&lt;<span class="hljs-name">tr</span>&gt;</span>\r\n                   <span class="hljs-tag" style="color: navy;">&lt;<span class="hljs-name">td</span>&gt;</span>\r\n                          <span class="hljs-tag" style="color: navy;">&lt;<span class="hljs-name">p</span>&gt;</span>Column Right Content<span class="hljs-tag" style="color: navy;">&lt;/<span class="hljs-name">p</span>&gt;</span>\r\n                  <span class="hljs-tag" style="color: navy;">&lt;/<span class="hljs-name">td</span>&gt;</span>\r\n            <span class="hljs-tag" style="color: navy;">&lt;/<span class="hljs-name">tr</span>&gt;</span>\r\n         <span class="hljs-tag" style="color: navy;">&lt;/<span class="hljs-name">table</span>&gt;</span>\r\n      <span class="hljs-tag" style="color: navy;">&lt;/<span class="hljs-name">td</span>&gt;</span>\r\n   <span class="hljs-tag" style="color: navy;">&lt;/<span class="hljs-name">tr</span>&gt;</span>\r\n<span class="hljs-tag" style="color: navy;">&lt;/<span class="hljs-name">table</span>&gt;</span></code></pre>\r\n<p><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">&nbsp;</span></p>\r\n<h4 style="font-family: Verdana, sans-serif; font-size: 16.8px; margin: 0px; font-weight: 400; padding: 0px; background-color: #ffffff;">7. Примените технику &laquo;прогрессивного раскрытия&raquo;</h4>\r\n<p><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;"><br />Суть &laquo;прогрессивного раскрытия&raquo; (<a style="color: #990099; text-decoration: none;" href="http://www.useit.com/alertbox/progressive-disclosure.html">progressive disclosure</a>) заключается в сокрытии контента за интерактивным элементом вроде кнопки или ссылки, а затем отображения этого контента по клику. Это гарантирует, что пользователю не придется слишком много скроллить, дабы добраться до нужного содержания в нижней части письма. Такой подход использует &laquo;Википедия&raquo; для мобильных платформ.<br /><br /></span></p>\r\n<h4 style="font-family: Verdana, sans-serif; font-size: 16.8px; margin: 0px; font-weight: 400; padding: 0px; background-color: #ffffff;">8. Тестируйте письмо перед отправкой</h4>\r\n<p><span style="font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;"><br />Почтовые клиенты в плане рендеринга и поддержки HTML и CSS еще хуже, чем браузеры. Тестировать письма необходимо и на реальных устройствах, и с помощью специальных превью-сервисов (например от &laquo;<a style="color: #990099; text-decoration: none;" href="https://pechkin-mail.ru/inbox_inspector/">Печкина</a>&raquo;).<br /><br />В период с 2010 по 2015 год число email-писем, открываемых на мобильных устройствах, возросло на&nbsp;<a style="color: #990099; text-decoration: none;" href="https://www.campaignmonitor.com/resources/guides/mobile-email-marketing/">30%</a>. И эта тенденция еще раз подтверждает, что адаптивный email-дизайн &ndash; не роскошь, а необходимость. Следуя представленным в посте рекомендациям, вы сможете создать привлекательное HTML-письмо, которое будет корректно отображаться на любых платформах.<br /><br />О чем еще мы пишем в блоге Печкин-mail\'а:<br /><br /></span></p>\r\n<ul style="margin: 0px 0px 0px 20px; padding: 0px; list-style-position: outside; list-style-image: initial; font-family: Verdana, sans-serif; font-size: 14px; background-color: #ffffff;">\r\n<li style="margin-left: 20px;">&laquo;Пишите письма&raquo;:&nbsp;<a style="background-color: transparent; color: #990099; text-decoration: none;" href="https://pechkin.com/blog/layout/#more-1685">Три техники верстки хороших email&rsquo;ов</a></li>\r\n<li style="margin-left: 20px;">Email-маркетинг:&nbsp;<a style="background-color: transparent; color: #990099; text-decoration: none;" href="https://pechkin.com/blog/plain-text/#more-1674">Рецепт правильного plain-text письма</a></li>\r\n<li style="margin-left: 20px;">How-to:&nbsp;<a style="background-color: transparent; color: #990099; text-decoration: none;" href="https://pechkin.com/blog/interactive-email/#more-1667">гайд по созданию интерактивных писем</a></li>\r\n<li style="margin-left: 20px;">Печкин-mail &laquo;вики&raquo;:&nbsp;<a style="background-color: transparent; color: #990099; text-decoration: none;" href="https://pechkin.com/blog/checklist/#more-1660">Чеклист по email-рассылкам</a></li>\r\n<li style="margin-left: 20px;">Интерфейсы и юзабилити:&nbsp;<a style="background-color: transparent; color: #990099; text-decoration: none;" href="https://pechkin.com/blog/ui-ux/#more-1648">Кто и как проектирует UX</a></li>\r\n</ul>', '2016-10-10 18:50:28', '2016-10-23 13:57:54', 3, 6, NULL);
/*!40000 ALTER TABLE `posts` ENABLE KEYS */;


-- Дамп структуры для таблица fb.posts_rates
CREATE TABLE IF NOT EXISTS `posts_rates` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `post_id` int(10) unsigned NOT NULL,
  `user_id` int(10) unsigned NOT NULL,
  `value` tinyint(4) NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `posts_rates_post_id_foreign` (`post_id`),
  KEY `posts_rates_user_id_foreign` (`user_id`),
  CONSTRAINT `posts_rates_post_id_foreign` FOREIGN KEY (`post_id`) REFERENCES `posts` (`id`) ON DELETE CASCADE,
  CONSTRAINT `posts_rates_user_id_foreign` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=17 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- Дамп данных таблицы fb.posts_rates: ~6 rows (приблизительно)
/*!40000 ALTER TABLE `posts_rates` DISABLE KEYS */;
INSERT INTO `posts_rates` (`id`, `post_id`, `user_id`, `value`, `created_at`, `updated_at`) VALUES
	(1, 28, 2, 1, '2016-10-01 11:24:52', '2016-10-01 11:24:52'),
	(2, 27, 2, 1, '2016-10-03 18:30:43', '2016-10-03 18:30:43'),
	(3, 28, 5, 1, '2016-10-03 18:53:35', '2016-10-03 18:53:35'),
	(4, 29, 2, 1, '2016-10-18 18:14:40', '2016-10-18 18:14:40'),
	(15, 29, 5, 1, '2016-10-23 09:24:37', '2016-10-23 09:24:37'),
	(16, 28, 8, 1, '2016-10-23 16:18:59', '2016-10-23 16:18:59');
/*!40000 ALTER TABLE `posts_rates` ENABLE KEYS */;


-- Дамп структуры для таблица fb.post_tag
CREATE TABLE IF NOT EXISTS `post_tag` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `post_id` int(10) unsigned NOT NULL,
  `tag_id` int(10) unsigned NOT NULL,
  PRIMARY KEY (`id`),
  KEY `post_tag_post_id_foreign` (`post_id`),
  KEY `post_tag_tag_id_foreign` (`tag_id`),
  CONSTRAINT `post_tag_post_id_foreign` FOREIGN KEY (`post_id`) REFERENCES `posts` (`id`),
  CONSTRAINT `post_tag_tag_id_foreign` FOREIGN KEY (`tag_id`) REFERENCES `tags` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=18 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- Дамп данных таблицы fb.post_tag: ~11 rows (приблизительно)
/*!40000 ALTER TABLE `post_tag` DISABLE KEYS */;
INSERT INTO `post_tag` (`id`, `post_id`, `tag_id`) VALUES
	(7, 29, 15),
	(8, 27, 5),
	(9, 26, 6),
	(10, 16, 16),
	(11, 13, 4),
	(12, 14, 18),
	(13, 11, 20),
	(14, 6, 21),
	(15, 5, 12),
	(16, 4, 22),
	(17, 3, 23);
/*!40000 ALTER TABLE `post_tag` ENABLE KEYS */;


-- Дамп структуры для таблица fb.roles
CREATE TABLE IF NOT EXISTS `roles` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- Дамп данных таблицы fb.roles: ~3 rows (приблизительно)
/*!40000 ALTER TABLE `roles` DISABLE KEYS */;
INSERT INTO `roles` (`id`, `name`, `created_at`, `updated_at`) VALUES
	(1, 'admin', NULL, NULL),
	(2, 'moderator', NULL, NULL),
	(3, 'member', NULL, NULL);
/*!40000 ALTER TABLE `roles` ENABLE KEYS */;


-- Дамп структуры для таблица fb.tags
CREATE TABLE IF NOT EXISTS `tags` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `description` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  `slug` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `category_id` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `tags_slug_unique` (`slug`),
  KEY `tags_category_id_foreign` (`category_id`),
  CONSTRAINT `tags_category_id_foreign` FOREIGN KEY (`category_id`) REFERENCES `categories` (`id`) ON DELETE SET NULL
) ENGINE=InnoDB AUTO_INCREMENT=24 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- Дамп данных таблицы fb.tags: ~22 rows (приблизительно)
/*!40000 ALTER TABLE `tags` DISABLE KEYS */;
INSERT INTO `tags` (`id`, `name`, `description`, `created_at`, `updated_at`, `slug`, `category_id`) VALUES
	(1, 'ajax', 'ajax', NULL, '2016-10-23 13:41:35', 'ajax', 4),
	(2, 'angular', 'angular', NULL, '2016-10-23 13:42:31', 'angular', 4),
	(3, 'codeigniter', 'codeigniter', NULL, '2016-10-23 13:43:11', 'codeigniter', 5),
	(4, 'git', 'git', NULL, '2016-10-23 13:44:10', 'git', 9),
	(5, 'nodejs', 'NodeJS posts', NULL, '2016-10-23 13:44:41', 'nodejs', 4),
	(6, 'laravel', 'laravel', '2016-10-23 13:44:54', '2016-10-23 13:44:54', 'laravel', 5),
	(7, 'mongodb', 'mongodb', '2016-10-23 13:45:18', '2016-10-23 13:45:18', 'mongodb', 6),
	(8, 'mysql', 'mysql', '2016-10-23 13:45:48', '2016-10-23 13:45:48', 'mysql', 6),
	(9, 'nosql', 'nosql', '2016-10-23 13:46:06', '2016-10-23 13:46:06', 'nosql', 6),
	(10, 'postgresql', 'postgresql', '2016-10-23 13:46:30', '2016-10-23 13:46:30', 'postgresql', 6),
	(11, 'symfony', 'symfony', '2016-10-23 13:47:09', '2016-10-23 13:47:09', 'symfony', 5),
	(12, 'jquery', 'jquery', '2016-10-23 13:47:34', '2016-10-23 13:47:34', 'jquery', 4),
	(13, 'browsers', 'browsers', '2016-10-23 13:47:53', '2016-10-23 13:47:53', 'browsers', NULL),
	(14, 'react', 'react', '2016-10-23 13:48:49', '2016-10-23 13:48:49', 'react', 4),
	(15, 'email', 'email', '2016-10-23 13:51:44', '2016-10-23 13:51:44', 'email', 3),
	(16, 'webpack', 'webpack', '2016-10-23 14:34:59', '2016-10-23 14:34:59', 'webpack', 8),
	(18, 'typescript', 'typescript', '2016-10-23 15:10:14', '2016-10-23 15:10:14', 'typescript', 4),
	(19, 'npm', 'npm', '2016-10-23 15:12:20', '2016-10-23 15:12:20', 'npm', 4),
	(20, 'es6', 'es6', '2016-10-23 15:14:23', '2016-10-23 15:14:23', 'es6', 4),
	(21, 'modernizr', 'modernizr', '2016-10-23 15:18:54', '2016-10-23 15:18:54', 'modernizr', 8),
	(22, 'photoshop', 'photoshop', '2016-10-23 15:25:31', '2016-10-23 15:25:31', 'photoshop', 7),
	(23, 'gulp', 'gulp', '2016-10-23 15:27:49', '2016-10-23 15:27:49', 'gulp', 8);
/*!40000 ALTER TABLE `tags` ENABLE KEYS */;


-- Дамп структуры для таблица fb.tag_user
CREATE TABLE IF NOT EXISTS `tag_user` (
  `user_id` int(10) unsigned NOT NULL,
  `tag_id` int(10) unsigned NOT NULL,
  KEY `tag_user_user_id_index` (`user_id`),
  KEY `tag_user_tag_id_index` (`tag_id`),
  CONSTRAINT `tag_user_tag_id_foreign` FOREIGN KEY (`tag_id`) REFERENCES `tags` (`id`) ON DELETE CASCADE,
  CONSTRAINT `tag_user_user_id_foreign` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- Дамп данных таблицы fb.tag_user: ~19 rows (приблизительно)
/*!40000 ALTER TABLE `tag_user` DISABLE KEYS */;
INSERT INTO `tag_user` (`user_id`, `tag_id`) VALUES
	(2, 3),
	(2, 4),
	(2, 1),
	(2, 2),
	(2, 5),
	(5, 1),
	(5, 2),
	(5, 3),
	(5, 4),
	(5, 5),
	(8, 1),
	(8, 5),
	(8, 6),
	(8, 8),
	(8, 9),
	(8, 11),
	(8, 13),
	(8, 18),
	(8, 20);
/*!40000 ALTER TABLE `tag_user` ENABLE KEYS */;


-- Дамп структуры для таблица fb.users
CREATE TABLE IF NOT EXISTS `users` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `login` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `name` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `last_name` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `email` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `password` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `remember_token` varchar(100) COLLATE utf8_unicode_ci DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  `role_id` int(10) unsigned NOT NULL DEFAULT '3',
  `is_active` tinyint(1) NOT NULL DEFAULT '0',
  `age` tinyint(3) unsigned DEFAULT NULL,
  `city` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `avatar` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `ban_counter` tinyint(3) unsigned NOT NULL DEFAULT '0',
  `ban_id` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `users_login_unique` (`login`),
  UNIQUE KEY `users_email_unique` (`email`),
  KEY `users_ban_id_foreign` (`ban_id`),
  CONSTRAINT `users_ban_id_foreign` FOREIGN KEY (`ban_id`) REFERENCES `bans` (`id`) ON DELETE SET NULL
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- Дамп данных таблицы fb.users: ~7 rows (приблизительно)
/*!40000 ALTER TABLE `users` DISABLE KEYS */;
INSERT INTO `users` (`id`, `login`, `name`, `last_name`, `email`, `password`, `remember_token`, `created_at`, `updated_at`, `role_id`, `is_active`, `age`, `city`, `avatar`, `ban_counter`, `ban_id`) VALUES
	(2, 'admin', 'Сергей', 'Меньшиков', 'admin@mail.ro', '$2y$10$dZZp0fXnTOe10EG/vVTnkO8JZ4V0x2Y6AHmtMjiCAUAfp/kkfdlzq', 'bFacrqUkxpqKWDhEvKigNHfSCWRLqjCG8R0lBWWzBEjEjsByzm7lC9str9gE', NULL, '2016-10-23 16:20:50', 1, 1, 21, 'фыв', 'b11f156c234e2c8c18f957916dc1cae9.jpg', 0, NULL),
	(3, 'wadawdawdawd', 'ADAWD', 'AWDAWD', 'awdawdawda@AWD.AWDA', '$2y$10$bz2KSuel3S1/N9jCbiB.DOX4nM1CFXU2XXvdV74T1H3Oy1sS6o2UC', 'r62IbGTTgNP8G1rW80QeDVTqVBkilrfWWUv8FVJsQoGDL6GaFE5KZ0yTceO0', '2016-09-25 21:52:15', '2016-10-11 22:57:37', 3, 0, NULL, NULL, NULL, 0, NULL),
	(4, 'admin3', 'awdawdawd', 'awdawd', 'awdad@awdawd.awd', '$2y$10$30lAA7/6e.oL25KeGOiy4.EVJ6DhWWEXIp0aSLzBrAk7hJoy8ZtCu', NULL, '2016-09-25 22:09:50', '2016-09-25 22:09:50', 1, 1, NULL, NULL, NULL, 0, NULL),
	(5, 'guba', 'qwqwdqwd', 'qwdawdawd', 'awdawd@awd.awd', '$2y$10$M9H8O0HJfLafNDrjxg033uZJ//L566sPZmqFhPar4nlFHJ3GwK6m6', '41UKOsDM6WX2O9c1TmXxktAcl6nja3IYnPS7rb0X7NBPNhcQ4iQc0JWzk3BG', '2016-10-01 15:24:37', '2016-10-23 11:49:43', 3, 1, NULL, '', '131392177ff6fdd87c1bd72e5a9bc472.jpg', 0, NULL),
	(6, 'krasava', 'qweqweqwe', 'asd', 'adasd@aq.aa', '$2y$10$aE5m.1iXcPhiwZGykG2N6uiyKcijgHi9vvMQtoDYamrJ2mbbcVwdO', 'bY33TpDqF3dyUN35LPr17KZB5EPAYxCJHs5zsFdNfHQoZmuvXeijiRQVVAMU', '2016-10-11 22:58:52', '2016-10-11 23:37:35', 3, 1, NULL, NULL, NULL, 0, NULL),
	(7, 'admin23232', 'qweqwe', 'qweqwe', 'adawd@ad.awdawd', '$2y$10$kqP0rOxMZVWVtb7Km9ReL.dOOXMrnOxqfKO.V1URcDNUp23lwXvd2', NULL, '2016-10-23 13:33:40', '2016-10-23 13:33:40', 3, 0, NULL, NULL, NULL, 0, NULL),
	(8, 'destroyer112', 'Александр', 'Мешков', 'destroyer112@ad.ad', '$2y$10$MPwTKmSAQ.ijsGXPThkHfug1Cu9YtYlaQlRibZFCLlVwzLoHAcsgC', 'CqhQKkzK9htwTK92dLua9LC7huemGkK06Sy2xwX8YmPAWDKoTD5KLr34vWi7', '2016-10-23 15:45:36', '2016-10-23 16:19:42', 3, 1, NULL, '', '8e9d3c2eb83c3cf41cda3d0378ab0e4b.jpg', 0, NULL);
/*!40000 ALTER TABLE `users` ENABLE KEYS */;


-- Дамп структуры для таблица fb.user_activations
CREATE TABLE IF NOT EXISTS `user_activations` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `user_id` int(10) unsigned NOT NULL,
  `token` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `created_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  KEY `user_activations_token_index` (`token`),
  KEY `user_activations_user_id_foreign` (`user_id`),
  CONSTRAINT `user_activations_user_id_foreign` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- Дамп данных таблицы fb.user_activations: ~1 rows (приблизительно)
/*!40000 ALTER TABLE `user_activations` DISABLE KEYS */;
INSERT INTO `user_activations` (`id`, `user_id`, `token`, `created_at`) VALUES
	(1, 7, '03ac6cc7b71e5dd43c075422eabd8ec8317925fdbf66a828f513682e0c0363eb', '2016-10-23 13:33:47');
/*!40000 ALTER TABLE `user_activations` ENABLE KEYS */;
/*!40101 SET SQL_MODE=IFNULL(@OLD_SQL_MODE, '') */;
/*!40014 SET FOREIGN_KEY_CHECKS=IF(@OLD_FOREIGN_KEY_CHECKS IS NULL, 1, @OLD_FOREIGN_KEY_CHECKS) */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
